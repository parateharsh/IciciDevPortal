package com.icici.apigw.controller;

import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.security.PermitAll;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONTokener;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.google.gson.Gson;
import com.icici.apigw.dao.InventoryDao;
import com.icici.apigw.factory.DaoFactory;
import com.icici.apigw.model.APIInventoryDetails;
import com.google.gson.Gson;
import com.icici.apigw.dao.InventoryDao;
import com.icici.apigw.factory.DaoFactory;
import com.icici.apigw.model.APIInventoryDetails;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.security.PermitAll;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.log4j.Logger;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;


@PermitAll
@Path("/inv")
public class ApiInventoryController {
	private static final Logger LOGGER = Logger.getLogger(ApiInventoryController.class);
	private InventoryDao inventoryDataDao = DaoFactory.getInventoryDaoImpl();

	@POST
	@Path("/fetchInventoryList")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchInventoryList() {
		List<APIInventoryDetails> inventoryList = null;
		try {
			inventoryList = inventoryDataDao.fetchInventoryList();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info(ex.toString());
		}
		return Response.ok(inventoryList).build();
	}

	@POST
	@Path("/fetchInventoryOperationName")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchInventoryOperationName(@FormParam("applicationName") String applicationName,
			@FormParam("apiProxyName") String apiProxyName, @FormParam("apiOperationName") String apiOperationName) {
		String invOperName = null;
		try {
			invOperName = inventoryDataDao.fetchInventoryOperation(applicationName, apiProxyName, apiOperationName);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info(ex.toString());
		}
		return Response.ok(invOperName).build();
	}
	

	  @POST
	  @Path("/fetchInventoryBySearch")
	  @Consumes({"application/x-www-form-urlencoded"})
	  @Produces({"application/json"})
	  public Response fetchInventoryBySearch(@FormParam("apiProxyName") String apiProxyName, @FormParam("description") String description, @FormParam("natureOfApi") String natureOfApi, @FormParam("apiConsumer") String apiConsumer, @FormParam("apiProvider") String apiProvider, @FormParam("tagSearch") String tagSearch) {
	    String invResult = null;
	    try {
	      invResult = this.inventoryDataDao.fetchInventoryBySearch(apiProxyName, description, natureOfApi, apiConsumer, apiProvider, tagSearch);
	    } catch (Exception e) {
	      StringWriter ex = new StringWriter();
	      e.printStackTrace(new PrintWriter(ex));
	      LOGGER.error(ex.toString());
	    } 
	    Response.ResponseBuilder responseBuilder = Response.ok(invResult);
	    responseBuilder.header("Access-Control-Allow-Origin", "*")
	      .header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	      .header("Access-Control-Allow-Headers", "Content-Type, Authorization");
	    return responseBuilder.build();
	  }
	  
	  @POST
	  @Path("/fetchInventoryBysrNo")
	  @Consumes({"application/x-www-form-urlencoded"})
	  @Produces({"application/json"})
	  public Response fetchInventoryBysrNo(@FormParam("srNo") String fetchInventoryBysrNo) {
	    String invResult = null;
	    try {
	      invResult = this.inventoryDataDao.fetchInventoryBysrNo(fetchInventoryBysrNo);
	    } catch (Exception e) {
	      StringWriter ex = new StringWriter();
	      e.printStackTrace(new PrintWriter(ex));
	      LOGGER.error(ex.toString());
	    } 
	    Response.ResponseBuilder responseBuilder = Response.ok(invResult);
	    responseBuilder.header("Access-Control-Allow-Origin", "*")
	      .header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	      .header("Access-Control-Allow-Headers", "Content-Type, Authorization");
	    return responseBuilder.build();
	  }
	  
	  @POST
	  @Path("/getAllProxyNames")
	  @Produces({"application/json"})
	  public Response getAllProxyNames() {
	    List<String> proxyList = this.inventoryDataDao.fetchAllProxyNames();
	    Response.ResponseBuilder responseBuilder = Response.ok((new Gson()).toJson(proxyList));
	    responseBuilder.header("Access-Control-Allow-Origin", "*")
	      .header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	      .header("Access-Control-Allow-Headers", "Content-Type, Authorization");
	    return responseBuilder.build();
	  }
	  
	  @POST
	  @Path("/getApisByProxy")
	  @Consumes({"application/x-www-form-urlencoded"})
	  @Produces({"application/json"})
	  public Response getApisByProxy(@FormParam("proxyName") String proxyName) {
	    List<APIInventoryDetails> apiList = this.inventoryDataDao.fetchApisByProxy(proxyName);
	    Response.ResponseBuilder responseBuilder = Response.ok((new Gson()).toJson(apiList));
	    responseBuilder.header("Access-Control-Allow-Origin", "*")
	      .header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	      .header("Access-Control-Allow-Headers", "Content-Type, Authorization");
	    return responseBuilder.build();
	  }
	  
	  @POST
	  @Path("/saveRequestResponsePacket")
	  @Consumes({"application/x-www-form-urlencoded"})
	  @Produces({"application/json"})
	  public Response saveRequestResponsePacket(@FormParam("srNo") int srNo, @FormParam("packetType") String packetType, @FormParam("requestPacket") String requestPacket, @FormParam("responsePacket") String responsePacket, @FormParam("requestTags") String requestTags, @FormParam("responseTags") String responseTags) {
	    try {
	      boolean requestSaved = false;
	      boolean responseSaved = false;
	      if ((requestTags == null || requestTags.trim().isEmpty()) && requestPacket != null && !requestPacket.trim().isEmpty())
	        requestTags = extractTagsFromPacket(requestPacket, packetType); 
	      if ((responseTags == null || responseTags.trim().isEmpty()) && responsePacket != null && !responsePacket.trim().isEmpty())
	        responseTags = extractTagsFromPacket(responsePacket, packetType); 
	      if (requestPacket != null && !requestPacket.trim().isEmpty())
	        requestSaved = this.inventoryDataDao.saveRequestPacket(srNo, packetType, requestPacket, requestTags); 
	      if (responsePacket != null && !responsePacket.trim().isEmpty())
	        responseSaved = this.inventoryDataDao.saveResponsePacket(srNo, packetType, responsePacket, responseTags); 
	      boolean success = !(!requestSaved && !responseSaved);
	      return Response.ok("{\"success\": " + success + "}").header("Access-Control-Allow-Origin", "*").build();
	    } catch (Exception e) {
	      e.printStackTrace();
	      return Response.status(500).entity("Failed to process request/response packet").build();
	    } 
	  }
	  
	  private String extractTagsFromPacket(String content, String packetType) {
	    Set<String> tags = new HashSet<>();
	    if ("JSON".equalsIgnoreCase(packetType)) {
	      try {
	        Object json = (new JSONTokener(content)).nextValue();
	        if (json instanceof JSONObject) {
	          extractJsonKeys((JSONObject)json, tags);
	        } else if (json instanceof JSONArray) {
	          JSONArray array = (JSONArray)json;
	          for (int i = 0; i < array.length(); i++) {
	            Object item = array.get(i);
	            if (item instanceof JSONObject)
	              extractJsonKeys((JSONObject)item, tags); 
	          } 
	        } else {
	          throw new IllegalArgumentException("Unsupported JSON structure");
	        } 
	      } catch (JSONException e) {
	        throw new IllegalArgumentException("Invalid JSON content");
	      } 
	    } else if ("XML".equalsIgnoreCase(packetType)) {
	      try {
	        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder builder = factory.newDocumentBuilder();
	        Document doc = builder.parse(new InputSource(new StringReader(content)));
	        extractXmlTags(doc.getDocumentElement(), tags);
	      } catch (Exception e) {
	        throw new IllegalArgumentException("Invalid XML content");
	      } 
	    } 
	    return String.join(",", (Iterable)tags);
	  }
	  
	  private void extractJsonKeys(JSONObject jsonObject, Set<String> keys) {
	    Iterator<String> iter = jsonObject.keys();
	    while (iter.hasNext()) {
	      String key = iter.next();
	      keys.add(key);
	      Object value = jsonObject.get(key);
	      if (value instanceof JSONObject) {
	        extractJsonKeys((JSONObject)value, keys);
	        continue;
	      } 
	      if (value instanceof JSONArray)
	        for (int i = 0; i < ((JSONArray)value).length(); i++) {
	          Object item = ((JSONArray)value).get(i);
	          if (item instanceof JSONObject)
	            extractJsonKeys((JSONObject)item, keys); 
	        }  
	    } 
	  }
	  
	  private void extractXmlTags(Node node, Set<String> tags) {
	    tags.add(node.getNodeName());
	    NodeList children = node.getChildNodes();
	    for (int i = 0; i < children.getLength(); i++) {
	      Node child = children.item(i);
	      if (child.getNodeType() == 1)
	        extractXmlTags(child, tags); 
	    } 
	  }
	  
	  @POST
	  @Path("/getPacketDetailsBySrNo")
	  @Consumes({"application/x-www-form-urlencoded"})
	  @Produces({"application/json"})
	  public Response getPacketDetails(@FormParam("srNo") int srNo) {
	    try {
	      Map<String, String> details = this.inventoryDataDao.getPacketDetailsBySrNo(srNo);
	      Response.ResponseBuilder responseBuilder = Response.ok((new Gson()).toJson(details));
	      responseBuilder.header("Access-Control-Allow-Origin", "*")
	        .header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	        .header("Access-Control-Allow-Headers", "Content-Type, Authorization");
	      return responseBuilder.build();
	    } catch (Exception e) {
	      e.printStackTrace();
	      return Response.status(500).entity("Failed to fetch packet details").build();
	    } 
	  }
	}
