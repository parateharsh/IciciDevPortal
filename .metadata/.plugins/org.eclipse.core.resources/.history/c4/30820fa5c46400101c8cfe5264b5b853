package com.example.demo;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.w3c.dom.*;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import java.util.*;

public class TagExtractorWithDynamicColumns {

	public static void main(String[] args) {
	    System.out.println("Start: ");
	    String filePath = "F:\\Temp\\API_inventory_ORMG_New.xlsx";

	    try (FileInputStream fis = new FileInputStream(filePath);
	         Workbook workbook = new XSSFWorkbook(fis)) {

	        Sheet sheet = workbook.getSheetAt(0);

	        List<List<String>> allRequestTagsList = new ArrayList<>();
	        List<List<String>> allResponseTagsList = new ArrayList<>();
	        List<String> allRemarks = new ArrayList<>();
	        List<String> allTypes = new ArrayList<>();
	        List<String> allRequestTagsCombined = new ArrayList<>();
	        List<String> allResponseTagsCombined = new ArrayList<>();

	        int maxReqTags = 0;
	        int maxResTags = 0;

	        // Read rows and extract tags
	        for (Row row : sheet) {
	            if (row.getRowNum() == 0 || row.getRowNum() == 1 || row.getRowNum() == 2) continue;

	            String request = getCellValue(row.getCell(9));
	            String response = getCellValue(row.getCell(10));

	            StringBuilder remarks = new StringBuilder();

	            String requestType = detectPacketType(request);
	            String responseType = detectPacketType(response);

	            Set<String> requestTags = new LinkedHashSet<>();
	            Set<String> responseTags = new LinkedHashSet<>();

	            extractTagsWithValidation(request, remarks, "Request", requestTags);
	            extractTagsWithValidation(response, remarks, "Response", responseTags);

	            allRequestTagsList.add(new ArrayList<>(requestTags));
	            allResponseTagsList.add(new ArrayList<>(responseTags));

	            allRequestTagsCombined.add(String.join(",", requestTags));
	            allResponseTagsCombined.add(String.join(",", responseTags));

	            allRemarks.add(remarks.toString());
	            allTypes.add(requestType + " / " + responseType);

	            maxReqTags = Math.max(maxReqTags, requestTags.size());
	            maxResTags = Math.max(maxResTags, responseTags.size());
	        }

	        // Define column indexes
	        int requestStartCol = 50;
	        int responseStartCol = requestStartCol + maxReqTags;
	        int remarkCol = responseStartCol + maxResTags;
	        int typeCol = remarkCol + 1;
	        int allRequestCol = typeCol + 1;
	        int allResponseCol = allRequestCol + 1;

	        // Header rows
	        Row row0 = sheet.getRow(0);
	        if (row0 == null) row0 = sheet.createRow(0);

	        Row row1 = sheet.getRow(1);
	        if (row1 == null) row1 = sheet.createRow(1);

	        Row row2 = sheet.getRow(2);
	        if (row2 == null) row2 = sheet.createRow(2);

	        // Request Tag Header
	        if (maxReqTags > 0) {
	            sheet.addMergedRegion(new CellRangeAddress(1, 1, requestStartCol, requestStartCol + maxReqTags - 1));
	            if (row1.getCell(requestStartCol) == null)
	                row1.createCell(requestStartCol).setCellValue("Request");

	            for (int i = 0; i < maxReqTags; i++) {
	                if (row2.getCell(requestStartCol + i) == null)
	                    row2.createCell(requestStartCol + i).setCellValue("Tag" + (i + 1));
	            }
	        }

	        // Response Tag Header
	        if (maxResTags > 0) {
	            sheet.addMergedRegion(new CellRangeAddress(1, 1, responseStartCol, responseStartCol + maxResTags - 1));
	            if (row1.getCell(responseStartCol) == null)
	                row1.createCell(responseStartCol).setCellValue("Response");

	            for (int i = 0; i < maxResTags; i++) {
	                if (row2.getCell(responseStartCol + i) == null)
	                    row2.createCell(responseStartCol + i).setCellValue("Tag" + (i + 1));
	            }
	        }

	        // Remark / Type / Combined Tag Headers
	        if (row1.getCell(remarkCol) == null) row1.createCell(remarkCol).setCellValue("Remark");
	        if (row2.getCell(remarkCol) == null) row2.createCell(remarkCol).setCellValue("Remark");

	        if (row1.getCell(typeCol) == null) row1.createCell(typeCol).setCellValue("Type");
	        if (row2.getCell(typeCol) == null) row2.createCell(typeCol).setCellValue("Type");

	        if (row1.getCell(allRequestCol) == null) row1.createCell(allRequestCol).setCellValue("All Request Tags");
	        if (row2.getCell(allRequestCol) == null) row2.createCell(allRequestCol).setCellValue("All Request Tags");

	        if (row1.getCell(allResponseCol) == null) row1.createCell(allResponseCol).setCellValue("All Response Tags");
	        if (row2.getCell(allResponseCol) == null) row2.createCell(allResponseCol).setCellValue("All Response Tags");

	        // Fill data from row 3 onward
	        int rowIndex = 3;
	        for (int i = 0; i < allRequestTagsList.size(); i++) {
	            Row row = sheet.getRow(rowIndex);
	            if (row == null) row = sheet.createRow(rowIndex);

	            List<String> reqTags = allRequestTagsList.get(i);
	            List<String> resTags = allResponseTagsList.get(i);

	            for (int j = 0; j < reqTags.size(); j++) {
	                row.createCell(requestStartCol + j).setCellValue(reqTags.get(j));
	            }

	            for (int j = 0; j < resTags.size(); j++) {
	                row.createCell(responseStartCol + j).setCellValue(resTags.get(j));
	            }

	            row.createCell(remarkCol).setCellValue(allRemarks.get(i));
	            row.createCell(typeCol).setCellValue(allTypes.get(i));
	            row.createCell(allRequestCol).setCellValue(allRequestTagsCombined.get(i));
	            row.createCell(allResponseCol).setCellValue(allResponseTagsCombined.get(i));

	            rowIndex++;
	        }

	        try (FileOutputStream out = new FileOutputStream(filePath)) {
	            workbook.write(out);
	            System.out.println("Updated file saved at: " + filePath);
	        }

	        workbook.close();
	        System.out.println("End: ");
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}


    private static String getCellValue(Cell cell) {
        if (cell == null) return "";
        return cell.getCellType() == CellType.STRING ? cell.getStringCellValue() : cell.toString();
    }

    private static String detectPacketType(String content) {
        if (content == null || content.trim().isEmpty()) return "Empty";
        content = content.trim();
        if (content.startsWith("{") || content.startsWith("[")) return "JSON";
        if (content.startsWith("<")) return "XML";
        return "Invalid";
    }

    private static void extractTagsWithValidation(String content, StringBuilder remarks, String fieldName, Set<String> tags) {
        if (content == null || content.trim().isEmpty()) return;
        content = content.trim();
        try {
            if (content.startsWith("{") || content.startsWith("[")) {
                Object json = new JSONTokener(content).nextValue();
                if (json instanceof JSONObject) {
                    extractJsonKeys((JSONObject) json, tags);
                } else if (json instanceof JSONArray) {
                    JSONArray array = (JSONArray) json;
                    for (int i = 0; i < array.length(); i++) {
                        Object item = array.get(i);
                        if (item instanceof JSONObject) {
                            extractJsonKeys((JSONObject) item, tags);
                        }
                    }
                } else {
                    remarks.append(fieldName).append(" is not valid JSON. ");
                }
            } else if (content.startsWith("<")) {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document doc = builder.parse(new InputSource(new StringReader(content)));
                extractXmlTags(doc.getDocumentElement(), tags);
            } else {
                remarks.append(fieldName).append(" is neither valid JSON nor XML. ");
            }
        } catch (Exception e) {
            remarks.append(fieldName).append(" is not valid JSON or XML. ");
        }
    }

    private static void extractJsonKeys(JSONObject jsonObject, Set<String> keys) {
        Iterator<String> iter = jsonObject.keys();
        while (iter.hasNext()) {
            String key = iter.next();
            keys.add(key);
            Object value = jsonObject.get(key);
            if (value instanceof JSONObject) {
                extractJsonKeys((JSONObject) value, keys);
            } else if (value instanceof JSONArray) {
                for (int i = 0; i < ((JSONArray) value).length(); i++) {
                    Object item = ((JSONArray) value).get(i);
                    if (item instanceof JSONObject) {
                        extractJsonKeys((JSONObject) item, keys);
                    }
                }
            }
        }
    }

    private static void extractXmlTags(Node node, Set<String> tags) {
        tags.add(node.getNodeName());
        NodeList children = node.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            Node child = children.item(i);
            if (child.getNodeType() == Node.ELEMENT_NODE) {
                extractXmlTags(child, tags);
            }
        }
    }
}
