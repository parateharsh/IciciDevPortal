package com.icici.apigw.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Map.Entry;
import java.util.Set;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.StreamingOutput;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.tika.Tika;
import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.yaml.snakeyaml.Yaml;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.icici.apigw.common.SMTPCase;
import com.icici.apigw.dao.ApiDataDao;
import com.icici.apigw.dao.DIYStandardDao;
import com.icici.apigw.dao.DIYStandardDaoImpl;
import com.icici.apigw.db.DBConnUtil;
import com.icici.apigw.exception.AppNameConflictException;
import com.icici.apigw.exception.ConsumerKeyConflictException;
import com.icici.apigw.exception.ConsumerKeyNotExistsException;
import com.icici.apigw.exception.IXCAPPCreateConflictException;
import com.icici.apigw.exception.IXCAPPNotExistException;
import com.icici.apigw.exception.IXCDeveloperCreateConflictException;
import com.icici.apigw.exception.IXCKVMEntryConflictException;
import com.icici.apigw.exception.MerchantIPConflictException;
import com.icici.apigw.factory.DaoFactory;
import com.icici.apigw.model.DIYGenericStandardModel;
import com.icici.apigw.model.DIYStandardModel;
import com.icici.apigw.model.PortalUserRegDt;
import com.icici.apigw.model.RequestedApiDetail;
import com.icici.apigw.model.ResponseModel;
import com.icici.apigw.util.GwConstants;
import com.icici.apigw.util.HttpClient;
import com.icici.apigw.util.IXCJWTToken;
import com.icici.apigw.util.JIRAConfigUtil;
import com.icici.apigw.util.MailTemplete;
import com.icici.apigw.util.Utility;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.ListItem;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;

@Path("/diyStandard/v1")
public class DIYSTNDOnboarding {

//	https://developerportaluat.icicibankltd.com/rest/diyStandard/v1/createUatOnboarding

	private static final Logger LOGGER = Logger.getLogger(DIYSTNDOnboarding.class);
	private DIYStandardDao diyStandardDao = DaoFactory.getDIYStandardDaoImpl();
	private static ApiDataDao apiDataDao = DaoFactory.getApiDataDaoImpl();

	@POST
	@Path("/requestAPIAccess")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response requestAPIAccess(@FormParam("userID") String userID, @FormParam("userEmail") String userEmail,
			@FormParam("mobileNo") String mobileNo, @FormParam("firstName") String firstName,
			@FormParam("apiProduct") String apiProduct, @FormParam("apiParent") String apiParent,
			@FormParam("apiName") String apiName, @FormParam("apiID") String apiID,
			@FormParam("apiType") String apiType, @FormParam("fieldMappingRequired") String fieldMappingRequired,
			@FormParam("apiPath") String apiPath) {

		ResponseModel responseModel = new ResponseModel();
		boolean isSaved = false;
		String jiraID = null;
		StringBuilder builder = new StringBuilder();
		try {
			builder.append("Api Type : " + apiType + "\n")
					.append("Field Mapping Required : " + fieldMappingRequired + "\n");
			try {
				jiraID = jiraRequestAccess(builder.toString());
				LOGGER.info("Create JIRA : " + jiraID);
			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error(ex.toString());
			}
			if (jiraID == null) {
				responseModel.setMessage("JIRA creation failed.Please contact administrator");
				responseModel.setStatus(false);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			} else {
				JSONObject fields = new JSONObject();
				fields.put("customfield_15700", userID);
				fields.put("customfield_15703", apiProduct);
				fields.put("customfield_15702", apiName);
				fields.put("customfield_15701", apiID);
				fields.put("customfield_15704", "TRADEAPI");
				String[] mailSplit = userEmail.split("@");
				if (mailSplit.length == 2) {
					if (mailSplit[1].equalsIgnoreCase("ext.icicibank.com")
							|| mailSplit[1].equalsIgnoreCase("icicibank.com")) {
						fields.put("customfield_16000", userEmail);
						fields.put("customfield_16001", firstName);
						fields.put("customfield_16002", "");
						fields.put("customfield_16003", "ICICIBANKLTD");
						fields.put("customfield_16004", mobileNo);
					} else {
						PortalUserRegDt userData = diyStandardDao.requestAPIUserData(userID);
						fields.put("customfield_16000", userData.getEmail());
						fields.put("customfield_16001", userData.getFirstName());
						fields.put("customfield_16002", userData.getLastName());
						fields.put("customfield_16003", userData.getCompanyName());
						fields.put("customfield_16004", userData.getContactNo());
					}
				}
				JSONObject issue = new JSONObject();
				issue.put("fields", fields);
				try {
					boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
					if (fieldsUpdated == true) {
						LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
					}
				} catch (JSONException e) {
					LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
				}
				LOGGER.info("API ACCESS PATH TRADE  : " + apiPath);
				isSaved = diyStandardDao.saveRequestAPIAccess(jiraID, "In Verification Trade Team", userID, userEmail,
						apiProduct, apiParent, apiName, apiID, apiType, fieldMappingRequired, apiPath, firstName);

				if (isSaved == true) {
					boolean isReverted = jiraTransition("11", jiraID);
					jiraComment("JIRA Status Moved to IN Verification", jiraID);
					if (isReverted == true) {
						responseModel.setMessage("Request submitted sucessfully.");
						responseModel.setData(jiraID);
						responseModel.setStatus(true);
						responseModel.setStatus_code(201);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Jira Transition failed");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						responseModel.setData(jiraID);
						return Response.ok(responseModel).build();
					}
				} else {
					responseModel.setMessage("Data not saved into DB");
					responseModel.setStatus(false);
					responseModel.setStatus_code(200);
					responseModel.setData(jiraID);
					return Response.ok(responseModel).build();
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
	}

	@POST
	@Path("/fetchAPIAccess")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public boolean fetchAPIAccess() {
		try {
			diyStandardDao.fetchRequestAccessJira();
			return true;
		} catch (Exception e) {
			LOGGER.info(e.toString());
			return false;
		}
	}

	@POST
	@Path("/submitTransition")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response submitTransition(@FormParam("jiraStatus") String jiraStatus, @FormParam("jiraID") String jiraID,
			@FormParam("username") String username) {
		ResponseModel responseModel = new ResponseModel();
		String fieldMappingRequired = null;
		String apiType = null;
		String apiProduct = null;
		DIYStandardModel jiraUserData = null;
		String jiraCategory = null;
		try {
			jiraUserData = diyStandardDao.getJIRAData(jiraID);
			apiType = jiraUserData.getApiType();
			apiProduct = jiraUserData.getApiProduct();
			fieldMappingRequired = jiraUserData.getFieldMappingRequired();
			jiraCategory = jiraUserData.getJiraCategory();
			if (jiraCategory.equalsIgnoreCase("NEW")) {
				if (apiType.equalsIgnoreCase("OUTBOUND") && apiProduct.equalsIgnoreCase("Collections")
						|| apiProduct.equalsIgnoreCase("Trade APIs")) {
					if (jiraStatus.equalsIgnoreCase("FIELD MAPPING")) {
						boolean isReverted = jiraTransition("101", jiraID);
						jiraComment("JIRA Status Moved to SIT TESTING", jiraID);
						if (isReverted == true) {
							diyStandardDao.updateFieldMappingDate(jiraID);
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						}
					} else if (jiraStatus.equalsIgnoreCase("SIT TESTING")) {
						boolean isReverted = jiraTransition("111", jiraID);
						jiraComment("JIRA Status Moved to UAT TESTING", jiraID);
						if (isReverted == true) {
							diyStandardDao.updateSITSignOffDate(jiraID);
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						}
					} else if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
						boolean isReverted = jiraTransition("121", jiraID);
						jiraComment("JIRA Status Moved to IN VERIFICATION GO LIVE", jiraID);
						if (isReverted == true) {
							diyStandardDao.updateUATSignOffDate(jiraID);
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						}
					}
				} else if (apiProduct.equals("Trade APIs") && apiType.equalsIgnoreCase("INBOUND")) {
					if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
						boolean isReverted = jiraTransition("121", jiraID);
						jiraComment("JIRA Status Moved to IN VERIFICATION GO LIVE", jiraID);
						if (isReverted == true) {
							diyStandardDao.updateUATSignOffDate(jiraID);
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						}
					}
				} else if (apiProduct.equals("Payments") && apiType.equalsIgnoreCase("INBOUND")) {
					if (fieldMappingRequired.equalsIgnoreCase("Yes")) {
						if (jiraStatus.equalsIgnoreCase("FIELD MAPPING")) {
							boolean isReverted = jiraTransition("301", jiraID);
							jiraComment("JIRA Status Moved to UAT TESTING", jiraID);
							if (isReverted == true) {
								diyStandardDao.updateFieldMappingDate(jiraID);
								responseModel.setMessage("Request Submitted Successfully");
								responseModel.setStatus(true);
								responseModel.setStatus_code(200);
								responseModel.setData(jiraID);
								return Response.ok(responseModel).build();
							} else {
								responseModel.setMessage("Jira Transition failed");
								responseModel.setStatus(false);
								responseModel.setData(jiraID);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						}
					}
					if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
						boolean isReverted = jiraTransition("121", jiraID);
						jiraComment("JIRA Status Moved to IN VERIFICATION GO LIVE", jiraID);
						if (isReverted == true) {
							diyStandardDao.updateUATSignOffDate(jiraID);
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				}
			} else if (jiraCategory.equalsIgnoreCase("ADD")) {
				if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
					boolean isReverted = jiraTransition("111", jiraID);
					jiraComment("JIRA Status Moved to IN VERIFICATION GO LIVE", jiraID);
					if (isReverted == true) {
						diyStandardDao.updateUATSignOffDate(jiraID);
						responseModel.setMessage("Request Submitted Successfully");
						responseModel.setStatus(true);
						responseModel.setStatus_code(200);
						responseModel.setData(jiraID);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Jira Transition failed");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						responseModel.setData(jiraID);
						return Response.ok(responseModel).build();
					}
				}
			}
		} catch (Exception e) {
			responseModel.setMessage("JIRA Trasition Failed");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	@POST
	@Path("/uatFileUpload")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public Response uatFileUpload(@FormDataParam("userID") String userID,
			@FormDataParam("apiProduct") String apiProduct, @FormDataParam("apiParent") String apiParent,
			@FormDataParam("apiType") String apiType, @FormDataParam("jiraID") String jiraID,
			@FormDataParam("testCaseDoc") File testCaseDoc,
			@FormDataParam("testCaseDoc") FormDataContentDisposition testCaseDocDetail,
			@FormDataParam("statusJSON") String statusJSON) {
//		,@FormDataParam("alternativeMails") String alternativeMails
		ResponseModel responseModel = new ResponseModel();
		boolean isSaved = false;
		String fileExtension = null;
		String jiraDirPath = null;
		String testCaseDocPath = null;
		boolean docUploaded = false;
		Response clientResponse = null;
		String alternativeMails = "";
		if (userID.equalsIgnoreCase("BAN329125") || userID.equalsIgnoreCase("BAN414247")) {
			alternativeMails = "marupaka.suresh@ext.icicibank.com,nareshryasa@gmail.com";
		}
		try {
			jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
			String attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
					+ "/attachments";
			String[] fileNameSplit = testCaseDocDetail.getFileName().split("\\.");
			LOGGER.info("fileNameSplit : " + fileNameSplit.length);
			if (fileNameSplit.length == 2) {
				fileExtension = fileNameSplit[1];
			} else if (fileNameSplit.length > 2 || fileNameSplit.length < 2) {
				responseModel.setMessage("Please upload a correct file to process the request");
				responseModel.setStatus(false);
				responseModel.setStatus_code(221);
				return Response.ok(responseModel).build();
			}
			LOGGER.info("fileExtension : " + fileExtension);
			if (fileExtension.equalsIgnoreCase("xlsx")) {
				testCaseDocPath = jiraDirPath + "/" + testCaseDocDetail.getFileName();
				serverFileUpload(testCaseDocPath, jiraDirPath, testCaseDoc);
				boolean excelResult = apiDataDao.validateExcel(testCaseDocPath);
				LOGGER.info("excelResult : " + excelResult);
				if (excelResult == true) {
					clientResponse = HttpClient.postUpdateJiraAttachment(attachmentUrl, testCaseDoc,
							testCaseDocDetail.getName());
					if (clientResponse.getStatus() == 200 || clientResponse.getStatus() == 201) {
						docUploaded = true;
					} else {
						docUploaded = true;
					}
					LOGGER.info("docUploaded : " + docUploaded);
					if (docUploaded == true) {
						isSaved = diyStandardDao.saveTestCaseDocPath(jiraID, userID, testCaseDocPath, alternativeMails);
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						LOGGER.info("=============== EXCEL file is valid =================");
						responseModel.setMessage("File uploaded successfully");
						responseModel.setStatus(isSaved);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						LOGGER.info("Jira & Server File upload failed");
						responseModel.setMessage("Jira & Server File upload failed");
						responseModel.setStatus(isSaved);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else {
					LOGGER.info("=============== EXCEL file is not valid ==============");
					responseModel.setMessage("Uploaded EXCEL contains invalid contents");
					responseModel.setStatus(isSaved);
					responseModel.setStatus_code(222);
					return Response.ok(responseModel).build();
				}
			} else {
				LOGGER.info("Unsupported file type");
				responseModel.setMessage("Unsupported file type");
				responseModel.setStatus(false);
				responseModel.setStatus_code(223);
				return Response.ok(responseModel).build();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			LOGGER.info("UAT Testcase document error");
			responseModel.setMessage("Uploaded EXCEL contains invalid contents");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
	}

	@POST
	@Path("/revertChanges")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response revertChanges(@FormParam("apiProduct") String apiProduct, @FormParam("apiParent") String apiParent,
			@FormParam("apiName") String apiName, @FormParam("apiType") String apiType,
			@FormParam("username") String username, @FormParam("statusJSON") String statusJSON,
			@FormParam("jiraID") String jiraID, @FormParam("jiraStatus") String jiraStatus) {
		String[] apiNames = null;
		JSONObject json = null;
		DIYStandardModel apiUserData = null;
		boolean isSaved = false;
		boolean isRevertDone = false;
		try {
			if (apiType.equalsIgnoreCase("OUTBOUND")) {
				if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("Trade APIs")) {
					apiNames = apiName.split(",");
					int apiCount = apiNames.length;
					if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
						isRevertDone = jiraTransition("291", jiraID);
						jiraComment("JIRA Status reverted to Field Mapping", jiraID);
						for (int i = 0; i < apiCount; i++) {
							diyStandardDao.updateRevertUATDate(jiraID, apiNames[i]);
							diyStandardDao.clearUAT(apiNames[i], jiraID);
							diyStandardDao.clearSIT(apiNames[i], jiraID);
						}
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
					} else if (jiraStatus.equalsIgnoreCase("SIT Testing")) {
						isRevertDone = jiraTransition("281", jiraID);
						jiraComment("JIRA Status reverted to Field Mapping", jiraID);
						for (int i = 0; i < apiCount; i++) {
							diyStandardDao.updateRevertSIT(jiraID, apiNames[i]);
							diyStandardDao.clearUAT(apiNames[i], jiraID);
							diyStandardDao.clearSIT(apiNames[i], jiraID);
						}
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
					} else if (jiraStatus.equalsIgnoreCase("Field Mapping")) {
						try {
							isRevertDone = jiraTransition("171", jiraID);
							jiraComment("JIRA Status reverted to Technical Details", jiraID);
							for (int i = 0; i < apiCount; i++) {
								apiUserData = diyStandardDao.getApiNameData(apiNames[i], jiraID);
								json = new JSONObject(apiUserData.getMongoJSON());
								diyStandardDao.updateRevertFieldMapping(jiraID, apiNames[i]);
								if (apiProduct.equals("Collections") || apiProduct.equals("Trade APIs")) {
									json.put("isMongoFileUATUpdated", false);
									json.put("isMongoPrefsUATUpdated", false);
									json.put("isAppCreationUATDone", false);
									diyStandardDao.saveMongoDBStatus(json.toString(), jiraID, apiNames[i]);
								}
//						outBoundDataDao.updateTechnicalDetailsNull(jiraID, apiNames[i]);
							}
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						} catch (Exception e) {
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(ex.toString());
						}
					}
					if (isRevertDone == true) {
						isSaved = diyStandardDao.updateRevertStatus(jiraID);
					}
				}
			} else if (apiType.equalsIgnoreCase("INBOUND")) {
				if (apiProduct.equalsIgnoreCase("Trade APIs")) {
					apiUserData = diyStandardDao.getApiParentData(apiParent, jiraID);
					String appJSON = apiUserData.getAppJSON();
					json = new JSONObject(appJSON);
					if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
						json.put("isKVMUATUpdated", false);
						json.put("isAppCreationUATDone", false);
						diyStandardDao.saveAppStatus(json.toString(), jiraID);
						isRevertDone = jiraTransition("181", jiraID);
						jiraComment("JIRA Status reverted to Technical Details", jiraID);
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
					}
					if (isRevertDone == true) {
						isSaved = diyStandardDao.updateRevertStatus(jiraID);
						diyStandardDao.clearTestCaseDocPath(jiraID, username);
					}
				} else if (apiProduct.equalsIgnoreCase("Payments")) {
					apiUserData = diyStandardDao.getApiParentData(apiParent, jiraID);
					String appJSON = apiUserData.getAppJSON();
					json = new JSONObject(appJSON);
					if (apiUserData.getFieldMappingRequired().equalsIgnoreCase("Yes")) {
						if (jiraStatus.equalsIgnoreCase("Field Mapping")) {
							json.put("isKVMUATUpdated", false);
							json.put("isAppCreationUATDone", false);
							diyStandardDao.saveAppStatus(json.toString(), jiraID);
							isRevertDone = jiraTransition("171", jiraID);
							jiraComment("JIRA Status reverted to Technical Details", jiraID);
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						} else if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
							json.put("isKVMUATUpdated", false);
							json.put("isAppCreationUATDone", false);
							diyStandardDao.saveAppStatus(json.toString(), jiraID);
							isRevertDone = jiraTransition("291", jiraID);
							jiraComment("JIRA Status reverted to Field Mapping", jiraID);
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						}
						if (isRevertDone == true) {
							isSaved = diyStandardDao.updateRevertStatus(jiraID);
							if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
								diyStandardDao.clearTestCaseDocPath(jiraID, username);
							}
						}
					} else {
						if (jiraStatus.equalsIgnoreCase("UAT TESTING")) {
							json.put("isKVMUATUpdated", false);
							json.put("isAppCreationUATDone", false);
							diyStandardDao.saveAppStatus(json.toString(), jiraID); 
							isRevertDone = jiraTransition("181", jiraID);
							jiraComment("JIRA Status reverted to Technical Details", jiraID);
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							if (isRevertDone == true) {
								isSaved = diyStandardDao.updateRevertStatus(jiraID);
								diyStandardDao.clearTestCaseDocPath(jiraID, username);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
			return Response.ok(isSaved).build();
		}
		return Response.ok(isSaved).build();
	}

	@POST
	@Path("/fetchListByUserName")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchListByUserName(@FormParam("username") String username) {
		Gson finalJson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
		try {
			List<DIYStandardModel> userDataList = diyStandardDao.getListByUserName(username);
			return Response.status(200).entity(finalJson.toJson(userDataList)).build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return Response.ok(null).build();
	}

	
	@POST
	@Path("/fetchByJiraID")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchByJiraID(@FormParam("username") String username, @FormParam("jiraID") String jiraID) {
		Gson finalJson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();

		try {
			List<DIYStandardModel> userJiraList = diyStandardDao.getByJiraID(username, jiraID);
			return Response.status(200).entity(finalJson.toJson(userJiraList)).build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		return Response.ok(null).build();
	}

	@POST
	@Path("/fetchByApiName")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchByApiName(@FormParam("apiName") String apiName, @FormParam("jiraID") String jiraID) {
		Gson finalJson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();

		try {
			List<DIYStandardModel> userAPIList = diyStandardDao.getByApiName(apiName, jiraID);
			return Response.status(200).entity(finalJson.toJson(userAPIList)).build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		return Response.ok(null).build();
	}

	@POST
	@Path("/saveBasicAPIDetails")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public Response saveBasicAPIDetails(@FormDataParam("userID") String userID,
			@FormDataParam("userEmail") String userEmail, @FormDataParam("industry") String industry,
			@FormDataParam("organizationName") String organizationName, @FormDataParam("useCase") String useCase,
			@FormDataParam("isBankAccNoRequired") String isBankAccNoRequired,
			@FormDataParam("bankAccNo") String bankAccNo,
			@FormDataParam("amIMTeamMemberName") String amIMTeamMemberName,
			@FormDataParam("amIMMobNum") String amIMMobNum, @FormDataParam("amIMEmailID") String amIMEmailID,
			@FormDataParam("businessFirstName") String businessFirstName,
			@FormDataParam("businessLastName") String businessLastName,
			@FormDataParam("businessMobNo") String businessMobNo,
			@FormDataParam("businessEmailID") String businessEmailID, @FormDataParam("itFirstName") String itFirstName,
			@FormDataParam("itLastName") String itLastName, @FormDataParam("itMobNo") String itMobNo,
			@FormDataParam("itEmailID") String itEmailID, @FormDataParam("apiProduct") String apiProduct,
			@FormDataParam("apiParent") String apiParent, @FormDataParam("apiName") String apiName,
			@FormDataParam("apiID") String apiID, @FormDataParam("apiType") String apiType,
			@FormDataParam("apiPath") String apiPath, @FormDataParam("gatewayProduct") String gatewayProduct,
			@FormDataParam("natureOfApi") String natureOfApi, @FormDataParam("applicationName") String applicationName,
			@FormDataParam("fieldMappingRequired") String fieldMappingRequired,
			@FormDataParam("paymentModes") String paymentModes, @FormDataParam("deemedAction") String deemedAction,
			@FormDataParam("custID") String custID, @FormDataParam("corpID") String corpID,
			@FormDataParam("website") String website, @FormDataParam("gstin") String gstin,
			@FormDataParam("isPaymentAggregator") String isPaymentAggregator,
			@FormDataParam("PAPGLicense") String PAPGLicense,
			@FormDataParam("PAPGEscrowAccount") String PAPGEscrowAccount,
			@FormDataParam("PAEscrowAccountNumber") String PAEscrowAccountNumber,
			@FormDataParam("reportingEntityFIURegistered") String reportingEntityFIURegistered,
			@FormDataParam("FIUINDRegistrationNumber") String FIUINDRegistrationNumber,
			@FormDataParam("principalOfficerPMLA") String principalOfficerPMLA,
			@FormDataParam("principalOfficerName") String principalOfficerName,
			@FormDataParam("principalOfficerEmailID") String principalOfficerEmailID,
			@FormDataParam("accountManageEmployeeID") String accountManageEmployeeID,
			@FormDataParam("nonAvailabilityPAPGLicense") String nonAvailabilityPAPGLicense,
			@FormDataParam("noCrowdFundingCollection") String noCrowdFundingCollection,
			@FormDataParam("noDonationsCollection") String noDonationsCollection,
			@FormDataParam("noForexCollection") String noForexCollection,
			@FormDataParam("noApprovalPaymentCIB") String noApprovalPaymentCIB,
			@FormDataParam("beneficiaryValidation") String beneficiaryValidation,
			@FormDataParam("beneficiaryValidationType") String beneficiaryValidationType,
			@FormDataParam("uploadCAS") File uploadCAS,
			@FormDataParam("uploadCAS") FormDataContentDisposition uploadCASDetail,
			@FormDataParam("collectionService") String collectionService,
			@FormDataParam("jiraCategory") String jiraCategory, @FormDataParam("parentJira") String parentJira) {

		ResponseModel responseModel = new ResponseModel();
		JSONObject paymentFuntional = new JSONObject();
		boolean isSaved = false;
		String jiraID = "";
		JSONObject fields = new JSONObject();
		String uatCASFileName = null;
		DIYStandardModel apiUserDataModel = null;
		try {
			if (apiProduct.equalsIgnoreCase("Payments") || apiProduct == "Payments") {

				paymentFuntional.put("website", website);
				paymentFuntional.put("gstin", gstin);
				paymentFuntional.put("isPaymentAggregator", isPaymentAggregator);
				paymentFuntional.put("PAPGLicense", PAPGLicense);
				paymentFuntional.put("PAPGEscrowAccount", PAPGEscrowAccount);
				paymentFuntional.put("PAEscrowAccountNumber", PAEscrowAccountNumber);
				paymentFuntional.put("reportingEntityFIURegistered", reportingEntityFIURegistered);
				paymentFuntional.put("FIUINDRegistrationNumber", FIUINDRegistrationNumber);
				paymentFuntional.put("principalOfficerPMLA", principalOfficerPMLA);
				paymentFuntional.put("principalOfficerName", principalOfficerName);
				paymentFuntional.put("principalOfficerEmailID", principalOfficerEmailID);
				paymentFuntional.put("accountManageEmployeeID", accountManageEmployeeID);
				paymentFuntional.put("nonAvailabilityPAPGLicense", nonAvailabilityPAPGLicense);
				paymentFuntional.put("noCrowdFundingCollection", noCrowdFundingCollection);
				paymentFuntional.put("noDonationsCollection", noDonationsCollection);
				paymentFuntional.put("noForexCollection", noForexCollection);
				paymentFuntional.put("uploadCAS", uploadCASDetail.getFileName());
				paymentFuntional.put("collectionService", collectionService);
				paymentFuntional.put("noApprovalPaymentCIB", noApprovalPaymentCIB);
				paymentFuntional.put("beneficiaryValidation", beneficiaryValidation);
				paymentFuntional.put("beneficiaryValidationType", beneficiaryValidationType);

				fields.put("customfield_15780", paymentModes);
				fields.put("customfield_15804", website);
				fields.put("customfield_15806", gstin);
				fields.put("customfield_15807", isPaymentAggregator);
				fields.put("customfield_15808", PAPGLicense);
				fields.put("customfield_15809", PAPGEscrowAccount);
				fields.put("customfield_15810", PAEscrowAccountNumber);
				fields.put("customfield_15811", reportingEntityFIURegistered);
				fields.put("customfield_15812", FIUINDRegistrationNumber);
				fields.put("customfield_15813", principalOfficerPMLA);
				fields.put("customfield_15814", principalOfficerName);
				fields.put("customfield_15815", principalOfficerEmailID);
				fields.put("customfield_15816", accountManageEmployeeID);
				fields.put("customfield_15817", nonAvailabilityPAPGLicense);
				fields.put("customfield_15818", noCrowdFundingCollection);
				fields.put("customfield_15819", noDonationsCollection);
				fields.put("customfield_15820", noForexCollection);
				fields.put("customfield_15824", uploadCAS);
				fields.put("customfield_15825", collectionService);
				if (apiParent.equals("CIB Payment API") || apiParent.equals("Account Service API")
						|| apiParent.equals("Composite Payment API") || apiParent.equals("Composite Validation API")
						|| apiParent.equals("Dealer Collection API") || apiParent.equals("Fixed Deposit API")) {
					fields.put("customfield_15821", noApprovalPaymentCIB);
					fields.put("customfield_15822", beneficiaryValidation);
				} else if (apiParent.equals("Transac Pro API")) {
					fields.put("customfield_15821", noApprovalPaymentCIB);
					fields.put("customfield_15822", beneficiaryValidation);
					fields.put("customfield_15823", beneficiaryValidationType);
				}
				JSONObject apiParentJSON = new JSONObject();
				if (apiParent.equals("CIB Payment API")) {
					apiParentJSON.put("id", "19701");
				} else if (apiParent.equals("Account Service API")) {
					apiParentJSON.put("id", "19702");
				} else if (apiParent.equals("Composite Payment API")) {
					apiParentJSON.put("id", "19703");
				} else if (apiParent.equals("Composite Validation API")) {
					apiParentJSON.put("id", "19704");
				} else if (apiParent.equals("Dealer Collection API")) {
					apiParentJSON.put("id", "19710");
				} else if (apiParent.equals("Fixed Deposit API")) {
					apiParentJSON.put("id", "19705");
				} else if (apiParent.equals("Transac Pro API")) {
					apiParentJSON.put("id", "19700");
				} else if (apiParent.equals("UPI QR/ Intent API")) {
					apiParentJSON.put("id", "19708");
				} else if (apiParent.equals("UPI Collect API")) {
					apiParentJSON.put("id", "19706");
				} else if (apiParent.equals("UPI Mandate API")) {
					apiParentJSON.put("id", "19707");
				} else if (apiParent.equals("Payment Model I")) {
					apiParentJSON.put("id", "19709");
				}
				fields.put("customfield_16100", apiParentJSON);
//				api_product -- 16100
//				Transac Pro API -- 19700
//				CIB Payment API -- 19701
//				Account Service API -- 19702
//				Composite Payment API -- 19703
//				Composite Validation API -- 19704
//				Fixed Deposit API -- 19705 
//				UPI Collect API -- 19706
//				UPI Mandate API -- 19707
//				UPI QR/ Intent API -- 19708
//				Payment Model I -- 19709
//				Dealer Collection API -- 19710

			}
			if (apiProduct.equalsIgnoreCase("Payments") || apiProduct == "Payments") {
				if (uploadCAS.length() > 0) {
					try {
						String fileExtension = null;
						String filePath = uploadCAS.getPath();
						LOGGER.info("uploadCASDetail.getFileName : " + uploadCASDetail.getFileName());
						String[] fileNameSplit = uploadCASDetail.getFileName().split("\\.");
						LOGGER.info("fileNameSplit : " + fileNameSplit.length);
						if (fileNameSplit.length == 2) {
							fileExtension = fileNameSplit[1];
						} else if (fileNameSplit.length > 2 || fileNameSplit.length < 2) {
							responseModel.setMessage("Please upload a correct file to process the request");
							responseModel.setStatus(false);
							responseModel.setStatus_code(221);
							return Response.ok(responseModel).build();
						}
						LOGGER.info("fileExtension : " + fileExtension);
						if (fileExtension.equalsIgnoreCase("zip")) {
							String zipTestLocation = GwConstants.ZIP_TEMP_LOCATION;
							boolean zipResult = apiDataDao.unzip(filePath, zipTestLocation);
							boolean listOfFilesTestResult = false;
							boolean isDeleted = false;

							if (zipResult) {
								listOfFilesTestResult = apiDataDao.ListOfFilesTest1(zipTestLocation);
								if (listOfFilesTestResult) {
									LOGGER.info("=============== Zip file is valid =================");
									File file = new File(zipTestLocation);
									isDeleted = apiDataDao.deleteDirectory(file);
									if (isDeleted) {
										LOGGER.info("Extracted Zip file is Deleted");
									}
								} else {
									File file = new File(zipTestLocation);
									isDeleted = apiDataDao.deleteDirectory(file);
									if (isDeleted) {
										LOGGER.info("Extracted Zip file is Deleted");
									}
									LOGGER.info("=============== Zip file is not valid ==============");
									responseModel.setMessage("Uploaded Zip contains invalid contents");
									responseModel.setStatus(false);
									responseModel.setStatus_code(221);
									return Response.ok(responseModel).build();
								}
							} else {
								try {
									File file = new File(zipTestLocation);
									isDeleted = apiDataDao.deleteDirectory(file);
								} catch (Exception e) {
									LOGGER.info("=============== Zip Location is not valid ==============");
								}

								LOGGER.info("=============== Zip file is not valid ==============");
								responseModel.setMessage("Uploaded file contains invalid contents");
								responseModel.setStatus(false);
								responseModel.setStatus_code(221);
								return Response.ok(responseModel).build();
							}
						} else if (fileExtension.equalsIgnoreCase("pdf")) {
							boolean pdfResult = apiDataDao.validatePDF(filePath);
							if (pdfResult) {
								LOGGER.info("=============== PDF file is valid =================");
							} else {
								LOGGER.info("=============== PDF file is not valid ==============");
								responseModel.setMessage("Uploaded PDF contains invalid contents");
								responseModel.setStatus(false);
								responseModel.setStatus_code(222);
								return Response.ok(responseModel).build();
							}
						} else {
							responseModel.setMessage("Unsupported file type");
							responseModel.setStatus(false);
							responseModel.setStatus_code(223);
							return Response.ok(responseModel).build();
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.error(ex.toString());
						responseModel.setMessage("Uploaded PDF contains invalid contents");
						responseModel.setStatus(false);
						responseModel.setStatus_code(222);
						return Response.ok(responseModel).build();
					}
				}
			}
			try {
				if (jiraCategory.equalsIgnoreCase("NEW")) {
					jiraID = jiraCreateDIY(apiType, fieldMappingRequired, apiProduct, applicationName, natureOfApi);
					LOGGER.info("Create NEW JIRA : " + jiraID);
				} else if (jiraCategory.equalsIgnoreCase("ADD")) {
					jiraID = jiraAddProductDIY(parentJira, apiProduct, apiType);
					LOGGER.info("Create ADD PRODUCT JIRA : " + jiraID);
				}

				if (jiraID == "" || jiraID.equals("") || jiraID == null) {
					responseModel.setMessage("JIRA creation failed.Please contact administrator");
					responseModel.setStatus(false);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				} else {
					Response clientResponse1 = null;
					String str1 = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/").toString();
					String attachmentUrl = str1 + jiraID + "/attachments";
					try {
						if (uploadCAS.length() > 0) {
							LOGGER.info("attachmentUrl : " + attachmentUrl);
							clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, uploadCAS,
									uatCASFileName);
							LOGGER.info("clientResponse1 : " + clientResponse1.getStatus());
							if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
								LOGGER.info("CAS File Uploaded : " + jiraID);
							}
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.error(ex.toString());
					}

					if (jiraCategory.equalsIgnoreCase("NEW")) {
						fields.put("customfield_15763", apiName);
						fields.put("customfield_15701", apiID);
						fields.put("customfield_15700", userID);
						fields.put("customfield_15600", industry);
						fields.put("customfield_15768", organizationName);
						fields.put("customfield_15601", useCase);
						fields.put("customfield_15769", isBankAccNoRequired);
						fields.put("customfield_15603", bankAccNo);
						fields.put("customfield_15604", amIMTeamMemberName);
						fields.put("customfield_15605", amIMMobNum);
						fields.put("customfield_15606", amIMEmailID);
						fields.put("customfield_15771", businessFirstName);
						fields.put("customfield_15772", businessLastName);
						fields.put("customfield_15773", businessMobNo);
						fields.put("customfield_15774", businessEmailID);
						fields.put("customfield_15775", itFirstName);
						fields.put("customfield_15776", itLastName);
						fields.put("customfield_15777", itMobNo);
						fields.put("customfield_15778", itEmailID);
						JSONObject natureOfApiJSON = new JSONObject();
						if (natureOfApi.equalsIgnoreCase("External Published")) {
							natureOfApiJSON.put("id", "18820");
						} else if (natureOfApi.equalsIgnoreCase("External Consumed")) {
							natureOfApiJSON.put("id", "18821");
						} else if (natureOfApi.equalsIgnoreCase("Internal API")) {
							natureOfApiJSON.put("id", "18822");
						} else {
							natureOfApiJSON.put("id", "18820");
						}
						fields.put("customfield_15827", natureOfApiJSON);
						JSONObject applicationNameJSON = new JSONObject();
						if (applicationName.equalsIgnoreCase("APIGEE EDGE SAAS")) {
							applicationNameJSON.put("id", "18815");
						} else if (applicationName.equalsIgnoreCase("APIGEE HYBRID DMZ")) {
							applicationNameJSON.put("id", "18816");
						} else if (applicationName.equalsIgnoreCase("APIGEE HYBRID CORP")) {
							applicationNameJSON.put("id", "18817");
						}
						fields.put("customfield_10915", applicationNameJSON);
						if (apiProduct.equalsIgnoreCase("Collections")
								&& apiName.equalsIgnoreCase("credit_confirmation/MODEL-7")
								|| apiName.equalsIgnoreCase("intimation/MODEL-7")
								|| apiName.equalsIgnoreCase("intimation/MODEL-5")) {
							fields.put("customfield_15779", paymentModes);
							fields.put("customfield_15780", deemedAction);
						} else if (apiProduct.equalsIgnoreCase("Payments")
								|| apiParent.equalsIgnoreCase("Transac Pro API")) {
							fields.put("customfield_15779", paymentModes);
						} else if (apiProduct.equalsIgnoreCase("Trade APIs") || apiType.equalsIgnoreCase("INBOUND")) {
							fields.put("customfield_15782", corpID);
						} else if (apiProduct.equalsIgnoreCase("Trade APIs") || apiType.equalsIgnoreCase("OUTBOUND")) {
							fields.put("customfield_15781", custID);
						}
					} else if (jiraCategory.equalsIgnoreCase("ADD")) {
						apiUserDataModel = diyStandardDao.getJIRAData(parentJira);
						fields.put("customfield_10664", apiName);
						fields.put("customfield_15701", apiID);
						fields.put("customfield_15703", apiProduct);
						fields.put("customfield_13804", gatewayProduct);
						fields.put("customfield_15700", userID);
						JSONObject applicationNameJSON = new JSONObject();
						if (applicationName.equalsIgnoreCase("APIGEE HYBRID DMZ")) {
							applicationNameJSON.put("id", "18816");
						}
						fields.put("customfield_10915", applicationNameJSON);
						JSONObject inboundJSON = new JSONObject();
						if (apiType.equalsIgnoreCase("INBOUND")) {
							inboundJSON.put("id", "18819");
						}
						fields.put("customfield_15826", inboundJSON);
						JSONObject natureOfApiJSON = new JSONObject();
						if (natureOfApi.equalsIgnoreCase("External Published")) {
							natureOfApiJSON.put("id", "18820");
						} else if (natureOfApi.equalsIgnoreCase("External Consumed")) {
							natureOfApiJSON.put("id", "18821");
						} else if (natureOfApi.equalsIgnoreCase("Internal API")) {
							natureOfApiJSON.put("id", "18822");
						} else {
							natureOfApiJSON.put("id", "18820");
						}
						fields.put("customfield_15827", natureOfApiJSON);

						fields.put("customfield_16400", Optional.ofNullable(apiUserDataModel.getAppname()).orElse(""));
						fields.put("customfield_16401", Optional.ofNullable(apiUserDataModel.getUatAppID()).orElse(""));
						fields.put("customfield_16402", Optional.ofNullable(apiUserDataModel.getAppname()).orElse(""));
						fields.put("customfield_16403",
								Optional.ofNullable(apiUserDataModel.getProdAppID()).orElse(""));

					}

					JSONObject issue = new JSONObject();
					issue.put("fields", fields);
					LOGGER.info("JIRA CUSTOM_FILEDS BASIC " + jiraCategory + " : " + issue.toString());
					try {
						boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
						if (fieldsUpdated == true) {
							LOGGER.info("JIRA CUSTOM_FILEDS BASIC UPDATED : " + fieldsUpdated);
						}
					} catch (JSONException e) {
						LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
					}

				}

				// basic details mongoDB
				JSONObject basicData = new JSONObject();
				JSONObject basicDetails = new JSONObject();
				JSONObject businessDetails = new JSONObject();
				JSONObject itDetails = new JSONObject();
				JSONObject operationalDetails = new JSONObject();

				basicDetails.put("Bank_Acc_No", bankAccNo);
				basicDetails.put("IM_Email_Id", amIMEmailID);
				basicDetails.put("IM_Mobile_Number", amIMMobNum);
				basicDetails.put("IM_Team_Member_Name", amIMTeamMemberName);
				basicDetails.put("Organization_Name", organizationName);

				operationalDetails.put("Bank_Acc_No", bankAccNo);
				operationalDetails.put("IM_Email_Id", amIMEmailID);
				operationalDetails.put("IM_Mobile_Number", amIMMobNum);
				operationalDetails.put("IM_Team_Member_Name", amIMTeamMemberName);
				operationalDetails.put("Organization_Name", organizationName);
				operationalDetails.put("Industry", industry);
				operationalDetails.put("Usecase", useCase);

				businessDetails.put("Email_ID", businessEmailID);
				businessDetails.put("First_Name", businessFirstName);
				businessDetails.put("Last_Name", businessLastName);
				businessDetails.put("Mob_Num", businessMobNo);

				itDetails.put("Email_ID", itEmailID);
				itDetails.put("First_Name", itFirstName);
				itDetails.put("Last_Name", itLastName);
				itDetails.put("Mob_Num", itMobNo);

				if (apiProduct.equals("Collections") || apiProduct.equals("Payments")
						|| apiProduct.equals("Trade APIs")) {
					basicData.put("BasicDetails", operationalDetails);
					basicData.put("BusinessContact", businessDetails);
					basicData.put("ITContactDetails", itDetails);
				}
				String basicDetailsMongo = basicData.toString();

				String[] apiNames = apiName.split(",");
				int apiCount = apiNames.length;
				JSONObject statusJson = new JSONObject();
				JSONObject technicalJSON = new JSONObject();
				JSONObject fieldMappingJSON = new JSONObject();
				JSONObject sitJSON = new JSONObject();
				JSONObject uatJSON = new JSONObject();

				if (apiType.equalsIgnoreCase("INBOUND") && fieldMappingRequired.equalsIgnoreCase("Yes")) {
					for (int i = 0; i < apiCount; i++) {
						technicalJSON.put(apiParent, false);
						fieldMappingJSON.put(apiParent, false);
						uatJSON.put(apiParent, false);
					}
					statusJson.put("TECHNICAL", technicalJSON);
					statusJson.put("FIELDMAPPING", fieldMappingJSON);
					statusJson.put("UAT", uatJSON);
				} else if (apiType.equalsIgnoreCase("INBOUND") && fieldMappingRequired.equalsIgnoreCase("No")) {
					for (int i = 0; i < apiCount; i++) {
						technicalJSON.put(apiParent, false);
						uatJSON.put(apiParent, false);
					}
					statusJson.put("TECHNICAL", technicalJSON);
					statusJson.put("UAT", uatJSON);
				} else if (apiType.equalsIgnoreCase("OUTBOUND")) {
					for (int i = 0; i < apiCount; i++) {
						technicalJSON.put(apiNames[i], false);
						fieldMappingJSON.put(apiNames[i], false);
						sitJSON.put(apiNames[i], false);
						uatJSON.put(apiNames[i], false);
					}
					statusJson.put("TECHNICAL", technicalJSON);
					statusJson.put("FIELDMAPPING", fieldMappingJSON);
					statusJson.put("SIT", sitJSON);
					statusJson.put("UAT", uatJSON);
				}

				String statusJSON = statusJson.toString();
				LOGGER.info("statusJSON : " + statusJSON);
				if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("Trade APIs")
						|| apiProduct.equalsIgnoreCase("Payments")) {
					isSaved = diyStandardDao.saveBasicDetails(jiraID, userID, userEmail, industry, useCase,
							organizationName, isBankAccNoRequired, bankAccNo, amIMTeamMemberName, amIMMobNum,
							amIMEmailID, businessFirstName, businessLastName, businessMobNo, businessEmailID,
							itFirstName, itLastName, itMobNo, itEmailID, apiProduct, apiType, apiParent, apiName, apiID,
							fieldMappingRequired, paymentModes, basicDetailsMongo, statusJSON, deemedAction, custID,
							corpID, apiPath, paymentFuntional.toString(), gatewayProduct, natureOfApi, applicationName,
							jiraCategory, parentJira);
				}
				if (isSaved == true) {
					boolean isReverted = jiraTransition("11", jiraID);
					jiraComment("JIRA Status Moved to TECHNICAL DETAILS", jiraID);
					if (isReverted == true) {
						responseModel.setMessage("Data saved successfully");
						responseModel.setData(jiraID);
						responseModel.setStatus(true);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Jira Transition failed");
						responseModel.setStatus(false);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else {
					responseModel.setMessage("Data not saved into DB");
					responseModel.setStatus(false);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				}
			} catch (Exception e) {
				responseModel.setMessage("JIRA creation failed.Please contact administrator");
				responseModel.setStatus(false);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
	}

	@POST
	@Path("/saveTechnicalDetails")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public Response saveTechnicalDetails(@FormDataParam("userID") String userID,
			@FormDataParam("userEmail") String userEmail, 
			@FormDataParam("jiraID") String jiraID,
			@FormDataParam("apiProduct") String apiProduct, 
			@FormDataParam("apiParent") String apiParent,
			@FormDataParam("apiName") String apiName, 
			@FormDataParam("apiID") String apiID,
			@FormDataParam("apiType") String apiType, 
			@FormDataParam("payloadAPIData") String payloadAPIData,
			@FormDataParam("isRevert") boolean isRevert,
			@FormDataParam("statusJSON") String statusJSON,
			@FormDataParam("uatPublicKey") File uatPublicKey,
			@FormDataParam("uatPublicKey") FormDataContentDisposition uatPublicKeyDetail,
			@FormDataParam("prodPublicKey") File prodPublicKey,
			@FormDataParam("prodPublicKey") FormDataContentDisposition prodPublicKeyDetail,
			@FormDataParam("uatAPISpecDoc1") File uatAPISpecDoc1,
			@FormDataParam("uatAPISpecDoc1") FormDataContentDisposition uatAPISpecDoc1Detail,
			@FormDataParam("uatAPISpecDoc2") File uatAPISpecDoc2,
			@FormDataParam("uatAPISpecDoc2") FormDataContentDisposition uatAPISpecDoc2Detail,
			@FormDataParam("uatTLSProof1Doc") File uatTLSProof1Doc,
			@FormDataParam("uatTLSProof1Doc") FormDataContentDisposition uatTLSProof1DocDetail,
			@FormDataParam("prodTLSProof1Doc") File prodTLSProof1Doc,
			@FormDataParam("prodTLSProof1Doc") FormDataContentDisposition prodTLSProof1DocDetail,
			@FormDataParam("uatTLSProof2Doc") File uatTLSProof2Doc,
			@FormDataParam("uatTLSProof2Doc") FormDataContentDisposition uatTLSProof2DocDetail,
			@FormDataParam("prodTLSProof2Doc") File prodTLSProof2Doc,
			@FormDataParam("prodTLSProof2Doc") FormDataContentDisposition prodTLSProof2DocDetail) {
		ResponseModel responseModel = new ResponseModel();
		String uatAPISpecDoc1Path = null;
		String uatAPISpecDoc2Path = null;
		String uatPublicKeyPath = null;
		String prodPublicKeyPath = null;
		String uatTLS2FilePath = null;
		String uatTLS1FilePath = null;
		String prodTLS2FilePath = null;
		String prodTLS1FilePath = null;
		String uatTLSProof1DocFileName = null;
		String prodTLSProof1DocFileName = null;
		String uatTLSProof2DocFileName = null;
		String prodTLSProof2DocFileName = null;
		String uatAPISpecDoc1FileName = null;
		String uatAPISpecDoc2FileName = null;
		String uatPublicKeyFileName = null;
		String prodPublicKeyFileName = null;
		String uatPublicCertificate = null;
		String prodPublicCertificate = null;
		Response response = null;
		boolean uatCertDone = false;
		boolean prodCertDone = false;
		boolean uatDocDone = false;
		boolean uatTLSDone = false;
		boolean prodTLSDone = false;
		JSONObject filePaths1 = null;
		JSONObject filePaths2 = null;
		Response clientResponse1 = null;
		Response clientResponse2 = null;
		Response clientResponse3 = null;
		boolean isFileUploadedJira = false;
		String jiraDirPath = null;
		int loopValue = 0;
		JSONObject payloadJSON = null;
		JSONObject apiDataJSON = null;
		JSONObject appJSON = null;
		DIYStandardModel apiUserDataModel = null;
		String uatAuthHeaders = null;
		String prodAuthHeaders = null;
		try {
			
			jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
			String attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
					+ "/attachments";
		try {
    if (apiProduct.equalsIgnoreCase("Host-To-Host")) {
        apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
        String jiraCategory = apiUserDataModel.getJiraCategory();
        String CorpID = apiUserDataModel.getCorpID();

        if (apiParent.equals("Snorkel-fileTransfer") && apiType.equals("Inbound")){

            JSONObject payload = new JSONObject(payloadAPIData);

     

            // === 2. Preference JSON ===
            JSONObject preferencesJson = new JSONObject();
            JSONObject clientDetails = new JSONObject();
            clientDetails.put("Status", "Active");
            clientDetails.put("Name", payload.optString("ClientName"));
            clientDetails.put("EnableAlerts", payload.optString("EnableAlerts"));

            // === Upload Section ===
            if ("true".equalsIgnoreCase(payload.optString("EnablePushOperations"))) {
                JSONObject upload = new JSONObject();
                upload.put("Enable", payload.optString("EnablePushOperations"));
                upload.put("IsMultipleUpload", payload.optString("IsMultipleUpload"));
                if ("true".equalsIgnoreCase(payload.optString("IsMultipleUpload"))) {
                    upload.put("Source", new JSONObject()
                        .put("Source1", payload.optString("Source1"))
                        .put("Source2", payload.optString("Source2"))
                        .put("Source3", payload.optString("Source3"))
                        .put("Source4", payload.optString("Source4"))
                        .put("Source5", payload.optString("Source5")));
                    upload.put("Backup", new JSONObject()
                        .put("Backup1", payload.optString("Backup1"))
                        .put("Backup2", payload.optString("Backup2"))
                        .put("Backup3", payload.optString("Backup3"))
                        .put("Backup4", payload.optString("Backup4"))
                        .put("Backup5", payload.optString("Backup5")));
                    upload.put("Destination", new JSONObject()
                        .put("Destination1", payload.optString("Destination1"))
                        .put("Destination2", payload.optString("Destination2"))
                        .put("Destination3", payload.optString("Destination3"))
                        .put("Destination4", payload.optString("Destination4"))
                        .put("Destination5", payload.optString("Destination5")));
                    upload.put("DestinationApplication", new JSONObject()
                        .put("DestinationApplication1", payload.optString("DestinationApplication1"))
                        .put("DestinationApplication2", payload.optString("DestinationApplication2"))
                        .put("DestinationApplication3", payload.optString("DestinationApplication3"))
                        .put("DestinationApplication4", payload.optString("DestinationApplication4"))
                        .put("DestinationApplication5", payload.optString("DestinationApplication5")));
                    upload.put("EnableEncryption", new JSONObject()
                        .put("EnableEncryption1", payload.optString("EnableEncryption1"))
                        .put("EnableEncryption2", payload.optString("EnableEncryption2"))
                        .put("EnableEncryption3", payload.optString("EnableEncryption3"))
                        .put("EnableEncryption4", payload.optString("EnableEncryption4"))
                        .put("EnableEncryption5", payload.optString("EnableEncryption5")));
                    upload.put("Encryption", new JSONObject()
                        .put("Algorithm1", payload.optString("Algorithm1"))
                        .put("Algorithm2", payload.optString("Algorithm2"))
                        .put("Algorithm3", payload.optString("Algorithm3"))
                        .put("Algorithm4", payload.optString("Algorithm4"))
                        .put("Algorithm5", payload.optString("Algorithm5")));
                    upload.put("PeerCode", new JSONObject()
                        .put("PeerCode1", payload.optString("PeerCode1"))
                        .put("PeerCode2", payload.optString("PeerCode2"))
                        .put("PeerCode3", payload.optString("PeerCode3"))
                        .put("PeerCode4", payload.optString("PeerCode4"))
                        .put("PeerCode5", payload.optString("PeerCode5")));
                    upload.put("Prefix", new JSONObject()
                        .put("Prefix1", payload.optString("Prefix1"))
                        .put("Prefix2", payload.optString("Prefix2"))
                        .put("Prefix3", payload.optString("Prefix3"))
                        .put("Prefix4", payload.optString("Prefix4"))
                        .put("Prefix5", payload.optString("Prefix5")));
                    upload.put("addPrefix", new JSONObject()
                        .put("addPrefix1", payload.optString("addPrefix1"))
                        .put("addPrefix2", payload.optString("addPrefix2"))
                        .put("addPrefix3", payload.optString("addPrefix3"))
                        .put("addPrefix4", payload.optString("addPrefix4"))
                        .put("addPrefix5", payload.optString("addPrefix5")));
                }
                clientDetails.put("Upload", upload);
            }

            // === MIS Section ===
            if ("true".equalsIgnoreCase(payload.optString("EnablePullOperations"))) {
                JSONObject mis = new JSONObject();
                mis.put("Enable", payload.optString("EnablePullOperations"));
                mis.put("IsMultipleMIS", payload.optString("IsMultipleMIS"));
                if ("true".equalsIgnoreCase(payload.optString("IsMultipleMIS"))) {
                    mis.put("Source", new JSONObject()
                        .put("Source1", payload.optString("MIS_Source1"))
                        .put("Source2", payload.optString("MIS_Source2"))
                        .put("Source3", payload.optString("MIS_Source3"))
                        .put("Source4", payload.optString("MIS_Source4"))
                        .put("Source5", payload.optString("MIS_Source5")));
                    mis.put("Backup", new JSONObject()
                        .put("Backup1", payload.optString("MIS_Backup1"))
                        .put("Backup2", payload.optString("MIS_Backup2"))
                        .put("Backup3", payload.optString("MIS_Backup3"))
                        .put("Backup4", payload.optString("MIS_Backup4"))
                        .put("Backup5", payload.optString("MIS_Backup5")));
                    mis.put("Destination", new JSONObject()
                        .put("Destination1", payload.optString("MIS_Destination1"))
                        .put("Destination2", payload.optString("MIS_Destination2"))
                        .put("Destination3", payload.optString("MIS_Destination3"))
                        .put("Destination4", payload.optString("MIS_Destination4"))
                        .put("Destination5", payload.optString("MIS_Destination5")));
                    mis.put("EnableEncryption", new JSONObject()
                        .put("EnableEncryption1", payload.optString("MIS_EnableEncryption1"))
                        .put("EnableEncryption2", payload.optString("MIS_EnableEncryption2"))
                        .put("EnableEncryption3", payload.optString("MIS_EnableEncryption3"))
                        .put("EnableEncryption4", payload.optString("MIS_EnableEncryption4"))
                        .put("EnableEncryption5", payload.optString("MIS_EnableEncryption5")));
                    mis.put("Encryption", new JSONObject()
                        .put("Algorithm1", payload.optString("MIS_Algorithm1"))
                        .put("Algorithm2", payload.optString("MIS_Algorithm2"))
                        .put("Algorithm3", payload.optString("MIS_Algorithm3"))
                        .put("Algorithm4", payload.optString("MIS_Algorithm4"))
                        .put("Algorithm5", payload.optString("MIS_Algorithm5")));
                    mis.put("removePrefixMIS", new JSONObject()
                        .put("removePrefixMIS1", payload.optString("removePrefixMIS1"))
                        .put("removePrefixMIS2", payload.optString("removePrefixMIS2"))
                        .put("removePrefixMIS3", payload.optString("removePrefixMIS3"))
                        .put("removePrefixMIS4", payload.optString("removePrefixMIS4"))
                        .put("removePrefixMIS5", payload.optString("removePrefixMIS5")));
                }
                clientDetails.put("MIS", mis);
            }

            clientDetails.put("AdditionalFields", new JSONObject()
                .put("Add_Field1", payload.optString("Add_Field1"))
                .put("Add_Field2", payload.optString("Add_Field2"))
                .put("Add_Field3", payload.optString("Add_Field3"))
                .put("Add_Field4", payload.optString("Add_Field4"))
                .put("Add_Field5", payload.optString("Add_Field5"))
                .put("Add_Field6", payload.optString("Add_Field6")));

            preferencesJson.put("ClientDetails", clientDetails);

            // === Counter & Transaction
            JSONObject counterJson = new JSONObject();
            counterJson.put("PeerCode", payload.optString("PeerCode"));
            counterJson.put("Source1Count", payload.optString("Source1Count"));
            counterJson.put("Source2Count", payload.optString("Source2Count"));
            counterJson.put("Source3Count", payload.optString("Source3Count"));
            counterJson.put("Source4Count", payload.optString("Source4Count"));
            counterJson.put("Source5Count", payload.optString("Source5Count"));
            counterJson.put("Date", payload.optString("Date"));

            JSONObject transactionJson = new JSONObject();
            transactionJson.put("PeerCode", payload.optString("PeerCode"));
            transactionJson.put("Pending", payload.optString("Pending"));
            transactionJson.put("UploadCount", payload.optString("UploadCount"));
            transactionJson.put("MISCount", payload.optString("MISCount"));
            transactionJson.put("LastFileUpload", payload.optString("LastFileUpload"));
            transactionJson.put("LastFileUploadTimestamp", payload.optString("LastFileUploadTimestamp"));
            transactionJson.put("LastMISFile", payload.optString("LastMISFile"));
            transactionJson.put("LastMISFileTimestamp", payload.optString("LastMISFileTimestamp"));

            boolean isSave = saveJsonPayloadsForFlicker( userID,  jiraID,  apiName,
                     preferencesJson,  transactionJson,  counterJson);


            if (isSave) {
            	

            	List<JSONObject> payloads = Arrays.asList(preferencesJson, counterJson, transactionJson);
            	List<String> urls = Arrays.asList(
            	    "https://uat-onprem-dmz-hybrid.icicibankltd.com/fileflick/database/services/preference/save",
            	    "https://uat-onprem-dmz-hybrid.icicibankltd.com/fileflick/database/services/counter/save",
            	    "https://uat-onprem-dmz-hybrid.icicibankltd.com/fileflick/database/services/files/save"
            	);

                for (int i = 0; i < urls.size(); i++) {
                    URL url = new URL(urls.get(i));
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("POST");
                    conn.setRequestProperty("Content-Type", "application/json");
                    conn.setDoOutput(true);

                    try (OutputStream os = conn.getOutputStream()) {
                        byte[] input = payloads.get(i).toString().getBytes("utf-8");
                        os.write(input, 0, input.length);
                    }

                    int responseCode = conn.getResponseCode();
                    if (responseCode != 200 && responseCode != 201) {
                        return Response.status(responseCode).entity("MongoDB operation failed at index " + i).build();
                    }
                }

                // === JIRA CUSTOM FIELD UPDATE (Same as Trade APIs) ===
                JSONObject jiraPayload = new JSONObject(payloadAPIData);
                JSONObject jiraDetails = jiraPayload.getJSONObject(apiParent);
                String uatIP = jiraDetails.optString("uatIP", "");
                String prodIP = jiraDetails.optString("prodIP", "");

                JSONObject fields = new JSONObject();
                fields.put("customfield_15616", uatIP);
                fields.put("customfield_15632", prodIP);
                fields.put("customfield_15782", CorpID);

                JSONObject issue = new JSONObject();
                issue.put("fields", fields);

                LOGGER.info("JIRA CUSTOM_FIELDS NEWPRODUCT: " + issue.toString());
                boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
                if (fieldsUpdated) {
                    LOGGER.info("✅ JIRA Fields updated successfully for NewProduct");
                } else {
                    LOGGER.warn("⚠️ JIRA Fields update failed for NewProduct");
                }

                // === JIRA TRANSITION ===
                 appJSON = new JSONObject();
                String appCreationJSON = "";

                if (jiraCategory.equalsIgnoreCase("NEW")) {
                    appJSON.put("isAppUATCreated", !isRevert);
                    appJSON.put("isAppPRODCreated", false);
                    appCreationJSON = appJSON.toString();
                } else if (jiraCategory.equalsIgnoreCase("ADD")) {
                    appJSON.put("isAddProductUATDone", false);
                    appJSON.put("isAddProductPRODDone", false);
                    appCreationJSON = appJSON.toString();
                }

                boolean isReverted = jiraTransition("21", jiraID);
                jiraComment("✅ JIRA Status moved to InVerification for NewProduct", jiraID);

                if (isReverted) {
                    diyStandardDao.saveStatusJSON(statusJSON, jiraID);
                } else {
                    LOGGER.error("❌ JIRA transition failed for NewProduct");
                }

                return Response.ok().entity("All MongoDB operations executed successfully.").build();
            } else {
                throw new RuntimeException("Failed to save JSON payloads for JIRA ID: " + jiraID);
            }
        }
        else if(apiParent.equals("Snorkel-InternalApplication"))
        {
        	
                JSONObject payload = new JSONObject(payloadAPIData);


                // === 1. Custom Attributes ===
                JSONObject customAttributesJson = new JSONObject();
                customAttributesJson.put("ClientName",payload.optString("ClientName"));
               
                customAttributesJson.put("PeerCode", payload.optString("PeerCode"));
                customAttributesJson.put("destinationPaymentPath", payload.optString("destinationPaymentPath"));
                customAttributesJson.put("ReversalBackup", payload.optString("ReversalBackup"));
                customAttributesJson.put("ReversalFilePath", payload.optString("ReversalFilePath"));

String ClientName=payload.optString("ClientName");
String PeerCode=payload.optString("PeerCode");
String destinationPaymentPath=payload.optString("destinationPaymentPath");
String ReversalBackup=payload.optString("ReversalBackup");
String ReversalFilePath=payload.optString("ReversalFilePath");

                    // === JIRA CUSTOM FIELD UPDATE (Same as Trade APIs) ===
                    JSONObject jiraPayload = new JSONObject(payloadAPIData);
                    JSONObject jiraDetails = jiraPayload.getJSONObject(apiParent);
                    String uatIP = jiraDetails.optString("uatIP", "");
                    String prodIP = jiraDetails.optString("prodIP", "");

                    JSONObject fields = new JSONObject();
                    fields.put("customfield_15616", uatIP);
                    fields.put("customfield_15632", prodIP);
                    fields.put("customfield_15782", CorpID);
                    fields.put("ClientName", ClientName);
                    fields.put("PeerCode", PeerCode);
                    fields.put("destinationPaymentPath", destinationPaymentPath);
                    fields.put("ReversalBackup", ReversalBackup);
                    fields.put("ReversalFilePath", ReversalFilePath);
                    
                    JSONObject issue = new JSONObject();
                    issue.put("fields", fields);

                    LOGGER.info("JIRA CUSTOM_FIELDS NEWPRODUCT: " + issue.toString());
                    boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
                    if (fieldsUpdated) {
                        LOGGER.info("✅ JIRA Fields updated successfully for NewProduct");
                    } else {
                        LOGGER.warn("⚠️ JIRA Fields update failed for NewProduct");
                    }

                    // === JIRA TRANSITION ===
                     appJSON = new JSONObject();
                    String appCreationJSON = "";

                    if (jiraCategory.equalsIgnoreCase("NEW")) {
                        appJSON.put("isAppUATCreated", !isRevert);
                        appJSON.put("isAppPRODCreated", false);
                        appCreationJSON = appJSON.toString();
                    } else if (jiraCategory.equalsIgnoreCase("ADD")) {
                        appJSON.put("isAddProductUATDone", false);
                        appJSON.put("isAddProductPRODDone", false);
                        appCreationJSON = appJSON.toString();
                    }

                    boolean isReverted = jiraTransition("21", jiraID);
                    jiraComment("✅ JIRA Status moved to InVerification for NewProduct", jiraID);

                    if (isReverted) {
                        diyStandardDao.saveStatusJSON(statusJSON, jiraID);
                    } else {
                        LOGGER.error("❌ JIRA transition failed for NewProduct");
                    }

                    return Response.ok().entity("All MongoDB operations executed successfully.").build();
                } else {
                    throw new RuntimeException("Failed to save JSON payloads for JIRA ID: " + jiraID);
                }
            }
        
    }
} catch (Exception e) {
    LOGGER.error("❌ Exception: ", e);
    return Response.status(500).entity("Internal Server Error: " + e.getMessage()).build();
}

			
			
			if (apiProduct.equalsIgnoreCase("Collections")
					|| apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("OUTBOUND")) {

				String[] apiNameSplit = apiName.split(",");
				int apiNameCount = apiNameSplit.length;
				LOGGER.info("apiNameCount : " + apiNameCount);
				String[] apiIDSplit = apiID.split(",");
				if (apiNameCount == apiIDSplit.length) {
					for (int i = 0; i < apiNameCount; i++) {
						apiUserDataModel = diyStandardDao.getApiNameData(apiName, jiraID);
						loopValue = i;
						LOGGER.info("loopValue : " + loopValue);
						payloadJSON = new JSONObject(payloadAPIData);
						apiDataJSON = payloadJSON.getJSONObject(apiNameSplit[i]);

						String uatDomainName = apiDataJSON.getString("uatDomainName");
						String uatIP = apiDataJSON.getString("uatIP");
						String uatServiceName = apiDataJSON.getString("uatServiceName");
						String uatServiceUrl = apiDataJSON.getString("uatServiceUrl");
						String uatTLSServiceUrl = apiDataJSON.getString("uatTLSServiceUrl");
						String uatPort = apiDataJSON.getString("uatPort");
						String uatWebService = apiDataJSON.getString("uatWebService");
						String uatHttpMethod = apiDataJSON.getString("uatHttpMethod");
						String uatAuthenticationRequired = apiDataJSON.getString("uatAuthenticationRequired");
						String uatAPIAuthentication = apiDataJSON.getString("uatAPIAuthentication");
						if (uatAPIAuthentication.equalsIgnoreCase("CREDS_PAYLOAD")) {
							uatAuthHeaders = null;
							prodAuthHeaders = null;
						} else {
							uatAuthHeaders = apiDataJSON.getString("uatAuthHeaders").toString();
							prodAuthHeaders = apiDataJSON.getString("prodAuthHeaders").toString();
						}
						String uatCustomAddHeaders = apiDataJSON.getString("uatCustomAddHeaders").toString();
						String prodCustomAddHeaders = apiDataJSON.getString("prodCustomAddHeaders").toString();
						String uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
						String uatEncMode = apiDataJSON.getString("uatEncMode");
						String uatEncType = apiDataJSON.getString("uatEncType");
						String uatAlgorithm = apiDataJSON.getString("uatAlgorithm");
						String uatAlgoMode = apiDataJSON.getString("uatAlgoMode");
						String uatAlgoPadding = apiDataJSON.getString("uatAlgoPadding");
						String uatAlgoKeySize = apiDataJSON.getString("uatAlgoKeySize");
						String uatAlgoIVLength = apiDataJSON.getString("uatAlgoIVLength");
						String uatHybAlgorithm = apiDataJSON.getString("uatHybAlgorithm");
						String uatHybAlgoMode = apiDataJSON.getString("uatHybAlgoMode");
						String uatHybAlgoPadding = apiDataJSON.getString("uatHybAlgoPadding");
						String uatHybAlgoKeySize = apiDataJSON.getString("uatHybAlgoKeySize");
						String uatHybAlgoIVLength = apiDataJSON.getString("uatHybAlgoIVLength");
						String uatEncryptedPayloadFieldName = apiDataJSON.getString("uatEncryptedPayloadFieldName");
						String uatEncryptedPayloadIV = apiDataJSON.getString("uatEncryptedPayloadIV");
						String uatEncryptedPayloadSecret = apiDataJSON.getString("uatEncryptedPayloadSecret");
						String uatChecksumRequired = apiDataJSON.getString("uatChecksumRequired");
						String uatChecksumType = apiDataJSON.getString("uatChecksumType");
						String uatCheckSumAlgo = apiDataJSON.getString("uatCheckSumAlgo");
						String uatDelimiter = apiDataJSON.getString("uatDelimiter");
						String uatStandardFunction = apiDataJSON.getString("uatStandardFunction");
						String uatChecksumValue = apiDataJSON.getString("uatChecksumValue");
						String uatChecksumSecret = apiDataJSON.getString("uatChecksumSecret");
						String prodDomainName = apiDataJSON.getString("prodDomainName");
						String prodIP = apiDataJSON.getString("prodIP");
						String prodServiceName = apiDataJSON.getString("prodServiceName");
						String prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
						String prodTLSServiceUrl = apiDataJSON.getString("prodTLSServiceUrl");
						String prodPort = apiDataJSON.getString("prodPort");
						String prodChecksumSecret = null;
						if (apiDataJSON.has("prodChecksumSecret")) {
							prodChecksumSecret = apiDataJSON.getString("prodChecksumSecret");
						}
						String uatSymmetricKey = null;
						if (apiDataJSON.has("uatSymmetricKey")) {
							uatSymmetricKey = apiDataJSON.getString("uatSymmetricKey");
						}
						String uatStaticIV = null;
						if (apiDataJSON.has("uatStaticIV")) {
							uatStaticIV = apiDataJSON.getString("uatStaticIV");
						}

						if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("Trade APIs")) {
							JSONObject fields = new JSONObject();
							JSONObject issue = new JSONObject();
							fields.put("customfield_15615", uatDomainName);
							fields.put("customfield_15616", uatIP);
							fields.put("customfield_15617", uatServiceName);
							fields.put("customfield_15619", uatServiceUrl);
							fields.put("customfield_15620", uatPort);
							fields.put("customfield_15621", uatWebService);
							fields.put("customfield_15622", uatHttpMethod);
							fields.put("customfield_15624", uatAPIAuthentication);
							fields.put("customfield_15625", uatCustomAddHeaders);

							String encFields = null;
							if (uatEncType.equals("SELECT_FIELD")) {
								if (uatAlgoIVLength != null) {
									encFields = uatAlgorithm + "/" + uatAlgoMode + "/" + uatAlgoPadding + "/"
											+ uatAlgoKeySize + "/" + uatAlgoIVLength;
								} else {
									encFields = uatAlgorithm + "/" + uatAlgoMode + "/" + uatAlgoPadding + "/"
											+ uatAlgoKeySize;
								}
							} else if (uatEncType.equals("ALL_FIELD")) {
								if (uatAlgoIVLength != null) {
									encFields = uatAlgorithm + "/" + uatAlgoMode + "/" + uatAlgoPadding + "/"
											+ uatAlgoKeySize + "/" + uatAlgoIVLength;
								} else {
									encFields = uatAlgorithm + "/" + uatAlgoMode + "/" + uatAlgoPadding + "/"
											+ uatAlgoKeySize;
								}
							} else if (uatEncType.equals("ALL_PAYLOAD")) {
								if (uatHybAlgoIVLength != null) {
									encFields = uatHybAlgorithm + "/" + uatHybAlgoMode + "/" + uatHybAlgoPadding + "/"
											+ uatHybAlgoKeySize + "/" + uatHybAlgoIVLength;
								} else {
									encFields = uatHybAlgorithm + "/" + uatHybAlgoMode + "/" + uatHybAlgoPadding + "/"
											+ uatHybAlgoKeySize;
								}
							}

							fields.put("customfield_15784", encFields);
							fields.put("customfield_15629", uatChecksumRequired);
							fields.put("customfield_15631", prodDomainName);
							fields.put("customfield_15632", prodIP);
							fields.put("customfield_15633", prodServiceName);
							fields.put("customfield_15635", prodServiceUrl);
							fields.put("customfield_15636", prodPort);
							fields.put("customfield_15637", uatWebService);
							fields.put("customfield_15639", uatAPIAuthentication);
							fields.put("customfield_15641", prodCustomAddHeaders);
							fields.put("customfield_15794", encFields);
							fields.put("customfield_15645", uatChecksumRequired);
							fields.put("customfield_16600", uatEncryptionRequired);
							fields.put("customfield_16601", uatAuthenticationRequired);
							fields.put("customfield_16602", uatEncryptionRequired);
							fields.put("customfield_16603", uatAuthenticationRequired);
							if (apiProduct.equalsIgnoreCase("Trade APIs")) {
								fields.put("customfield_15781", apiUserDataModel.getCustID());
							}
							issue.put("fields", fields);

							try {
								LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
								boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
								if (fieldsUpdated == true) {
									LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
								}
							} catch (JSONException e) {
								LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
							}
						}
						if (isRevert == false) {
							if (uatEncryptionRequired.equals("true") && loopValue == 0) {
								if (uatAlgorithm.equalsIgnoreCase("RSA")
										|| uatEncType.equalsIgnoreCase("ALL_PAYLOAD_HYBRID")) {
									try {
										if (uatPublicKey.length() > 0) {
											uatPublicKeyFileName = "UAT_"
													+ uatPublicKeyDetail.getFileName().replaceAll(" ", "_");
											String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
											uatPublicKeyPath = jiraDirPath + "/" + timeStamp + "_"
													+ uatPublicKeyFileName;
											uatPublicCertificate = checkCertificateMethod(uatPublicKey);
											LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
											if (uatPublicCertificate == "FILE NOT FOUND") {
												responseModel.setMessage("Uploaded certicate contains invalid content");
												responseModel.setStatus(false);
												responseModel.setStatus_code(200);
												return Response.ok(responseModel).build();
											} else {
												clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
														uatPublicKey, uatPublicKeyFileName);
												if (clientResponse1.getStatus() == 200
														|| clientResponse1.getStatus() == 201) {
													uatCertDone = true;
												} else {
													uatCertDone = true;
												}
												serverFileUpload(uatPublicKeyPath, jiraDirPath, uatPublicKey);
												LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
											}
										} else if (uatPublicKey == null || uatPublicKeyDetail == null
												|| uatPublicKeyDetail.getFileName().isEmpty()) {
											responseModel.setMessage("Please upload valid certificate");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}

										if (prodPublicKey.length() > 0) {
											prodPublicKeyFileName = "PROD_"
													+ prodPublicKeyDetail.getFileName().replaceAll(" ", "_");
											String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
											prodPublicKeyPath = jiraDirPath + "/" + timeStamp + "_"
													+ prodPublicKeyFileName;
											prodPublicCertificate = checkCertificateMethod(prodPublicKey);
											LOGGER.info("prodPublicCertificate : " + prodPublicCertificate);
											if (prodPublicCertificate == "FILE NOT FOUND") {
												responseModel.setMessage("Uploaded certicate contains invalid content");
												responseModel.setStatus(false);
												responseModel.setStatus_code(200);
												return Response.ok(responseModel).build();
											} else {
												clientResponse2 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
														prodPublicKey, prodPublicKeyFileName);
												if (clientResponse2.getStatus() == 200
														|| clientResponse2.getStatus() == 201) {
													prodCertDone = true;
												} else {
													prodCertDone = true;
												}
												serverFileUpload(prodPublicKeyPath, jiraDirPath, prodPublicKey);
											}
										} else if (prodPublicKey == null || prodPublicKeyDetail == null
												|| prodPublicKeyDetail.getFileName().isEmpty()) {
											responseModel.setMessage("Please upload valid certificate");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.info("Exception:" + ex.toString());
										LOGGER.info("=============== file is not valid ==============");
										responseModel.setMessage("Uploaded certicate contains invalid content");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}
								}
							}
							try {
								if (loopValue == 0) {
									if (uatAPISpecDoc1.length() > 0) {
										uatAPISpecDoc1FileName = uatAPISpecDoc1Detail.getFileName().replaceAll(" ",
												"_");
										uatAPISpecDoc1Path = jiraDirPath + "/" + uatAPISpecDoc1FileName;
										boolean isValid = yamlFileChecker(uatAPISpecDoc1, uatWebService);
										if (isValid == true) {
											clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													uatAPISpecDoc1, uatAPISpecDoc1FileName);
											serverFileUpload(uatAPISpecDoc1Path, jiraDirPath, uatAPISpecDoc1);
											if (clientResponse3.getStatus() == 200
													|| clientResponse3.getStatus() == 201) {
												uatDocDone = true;
											} else {
												uatDocDone = true;
											}
										} else {
											LOGGER.info("=============== Invalid YAML Document ==============");
											responseModel.setMessage("Invalid YAML Document");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} else {
										LOGGER.info("Please upload YAML file");
										responseModel.setMessage("Please upload YAML file");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}

									if (uatTLSServiceUrl.equalsIgnoreCase("yes")) {
										if (uatTLSProof1Doc.length() > 0) {
											uatTLSProof1DocFileName = "UAT_"
													+ uatTLSProof1DocDetail.getFileName().replaceAll(" ", "_");
											uatTLS1FilePath = jiraDirPath + "/" + uatTLSProof1DocFileName;
											boolean isValid = tlsFileChecker(uatTLSProof1Doc, uatTLSProof1DocFileName);
											if (isValid == true) {
												clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
														uatTLSProof1Doc, uatTLSProof1DocFileName);
												serverFileUpload(uatTLS1FilePath, jiraDirPath, uatTLSProof1Doc);
												if (clientResponse3.getStatus() == 200
														|| clientResponse3.getStatus() == 201) {
													uatTLSDone = true;
												} else {
													uatTLSDone = true;
												}
											} else {
												LOGGER.info("Please upload TLS file");
												responseModel.setMessage("Please upload TLS file");
												responseModel.setStatus(false);
												responseModel.setStatus_code(200);
												return Response.ok(responseModel).build();
											}
										}
									}
									if (prodTLSServiceUrl.equalsIgnoreCase("yes")) {
										if (prodTLSProof1Doc.length() > 0) {
											prodTLSProof1DocFileName = "PROD_"
													+ prodTLSProof1DocDetail.getFileName().replaceAll(" ", "_");
											prodTLS1FilePath = jiraDirPath + "/" + prodTLSProof1DocFileName;
											boolean isValid = tlsFileChecker(prodTLSProof1Doc,
													prodTLSProof1DocFileName);
											if (isValid == true) {
												clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
														prodTLSProof1Doc, prodTLSProof1DocFileName);
												serverFileUpload(prodTLS1FilePath, jiraDirPath, prodTLSProof1Doc);
												if (clientResponse3.getStatus() == 200
														|| clientResponse3.getStatus() == 201) {
													prodTLSDone = true;
												} else {
													prodTLSDone = true;
												}
											} else {
												LOGGER.info("Please upload TLS file");
												responseModel.setMessage("Please upload TLS file");
												responseModel.setStatus(false);
												responseModel.setStatus_code(200);
												return Response.ok(responseModel).build();
											}
										}
									}
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.info("Exception:" + ex.toString());
								LOGGER.info("=============== file is not valid ==============");
								responseModel.setMessage("Uploaded Certificate file contains invalid contents");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}

							try {
								if (apiNameCount == 2 & loopValue == 1) {
									if (uatAPISpecDoc2.length() > 0) {
										uatAPISpecDoc2FileName = uatAPISpecDoc2Detail.getFileName().replaceAll(" ",
												"_");
										uatAPISpecDoc2Path = jiraDirPath + "/" + uatAPISpecDoc2FileName;
										boolean isValid = yamlFileChecker(uatAPISpecDoc2, uatWebService);
										if (isValid == true) {
											clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													uatAPISpecDoc2, uatAPISpecDoc2FileName);
											serverFileUpload(uatAPISpecDoc2Path, jiraDirPath, uatAPISpecDoc2);
											if (clientResponse3.getStatus() == 200
													|| clientResponse3.getStatus() == 201) {
												uatDocDone = true;
											} else {
												uatDocDone = true;
											}
										} else {
											LOGGER.info("=============== Invalid YAML2 Document ==============");
											responseModel.setMessage("Invalid YAML2 Document");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} else {
										LOGGER.info("Please upload YAML2 file");
										responseModel.setMessage("Please upload YAML2 file");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}

									if (uatTLSServiceUrl.equalsIgnoreCase("yes")) {
										if (uatTLSProof2Doc.length() > 0) {
											uatTLSProof2DocFileName = "UAT_"
													+ uatTLSProof2DocDetail.getFileName().replaceAll(" ", "_");
											uatTLS2FilePath = jiraDirPath + "/" + uatTLSProof2DocFileName;
											boolean isValid = tlsFileChecker(uatTLSProof2Doc, uatTLSProof2DocFileName);
											if (isValid == true) {
												clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
														uatTLSProof2Doc, uatTLSProof2DocFileName);
												serverFileUpload(uatTLS2FilePath, jiraDirPath, uatTLSProof2Doc);
												if (clientResponse3.getStatus() == 200
														|| clientResponse3.getStatus() == 201) {
													uatTLSDone = true;
												} else {
													uatTLSDone = true;
												}
											} else {
												LOGGER.info("Please upload TLS file");
												responseModel.setMessage("Please upload TLS file");
												responseModel.setStatus(false);
												responseModel.setStatus_code(200);
												return Response.ok(responseModel).build();
											}
										}
									}
									if (prodTLSServiceUrl.equalsIgnoreCase("yes")) {
										if (prodTLSProof2Doc.length() > 0) {
											prodTLSProof2DocFileName = "PROD_"
													+ prodTLSProof2DocDetail.getFileName().replaceAll(" ", "_");
											prodTLS2FilePath = jiraDirPath + "/" + prodTLSProof2DocFileName;
											boolean isValid = tlsFileChecker(prodTLSProof2Doc,
													prodTLSProof2DocFileName);
											if (isValid == true) {
												clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
														prodTLSProof2Doc, prodTLSProof2DocFileName);
												serverFileUpload(prodTLS2FilePath, jiraDirPath, prodTLSProof2Doc);
												if (clientResponse3.getStatus() == 200
														|| clientResponse3.getStatus() == 201) {
													prodTLSDone = true;
												} else {
													prodTLSDone = true;
												}
											} else {
												LOGGER.info("Please upload TLS file");
												responseModel.setMessage("Please upload TLS file");
												responseModel.setStatus(false);
												responseModel.setStatus_code(200);
												return Response.ok(responseModel).build();
											}
										}
									}
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.info("Exception:" + ex.toString());
								LOGGER.info("=============== file is not valid ==============");
								responseModel.setMessage("Uploaded Certificate file contains invalid contents");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else if (isRevert == true) {
							filePaths1 = diyStandardDao.getFilePaths1(jiraID, apiNameSplit[0]);
							LOGGER.info("filePaths1 : " + filePaths1.toString());
							if (apiNameCount == 2 & loopValue == 1) {
								filePaths2 = diyStandardDao.getFilePaths1(jiraID, apiNameSplit[1]);
								LOGGER.info("filePaths2 : " + filePaths2.toString());
							}
							if (uatAPISpecDoc1.length() > 0) {
								uatAPISpecDoc1FileName = uatAPISpecDoc1Detail.getFileName().replaceAll(" ", "_");
								uatAPISpecDoc1Path = jiraDirPath + "/" + uatAPISpecDoc1FileName;
								boolean isValid = yamlFileChecker(uatAPISpecDoc1, uatWebService);
								if (isValid == true) {
									clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl, uatAPISpecDoc1,
											uatAPISpecDoc1FileName);
									serverFileUpload(uatAPISpecDoc1Path, jiraDirPath, uatAPISpecDoc1);
									if (clientResponse3.getStatus() == 200 || clientResponse3.getStatus() == 201) {
										uatDocDone = true;
									} else {
										uatDocDone = true;
									}
								} else {
									LOGGER.info("=============== Invalid YAML Document ==============");
									responseModel.setMessage("Invalid YAML Document");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								}
							} else {
								uatDocDone = true;
								uatAPISpecDoc1Path = filePaths1.getString("UAT_API_SPEC_DOC");
							}
							if (apiNameCount == 2 & loopValue == 1) {
								if (uatAPISpecDoc2.length() > 0) {
									uatAPISpecDoc2FileName = uatAPISpecDoc2Detail.getFileName().replaceAll(" ", "_");
									uatAPISpecDoc2Path = jiraDirPath + "/" + uatAPISpecDoc2FileName;
									boolean isValid = yamlFileChecker(uatAPISpecDoc2, uatWebService);
									if (isValid == true) {
										clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
												uatAPISpecDoc2, uatAPISpecDoc2FileName);
										serverFileUpload(uatAPISpecDoc2Path, jiraDirPath, uatAPISpecDoc2);
										if (clientResponse3.getStatus() == 200 || clientResponse3.getStatus() == 201) {
											uatDocDone = true;
										} else {
											uatDocDone = true;
										}
									} else {
										LOGGER.info("=============== Invalid YAML2 Document ==============");
										responseModel.setMessage("Invalid YAML2 Document");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}
								} else {
									uatDocDone = true;
									uatAPISpecDoc2Path = filePaths2.getString("UAT_API_SPEC_DOC");
								}
							}
							if (uatEncryptionRequired.equals("true") && loopValue == 0) {
								if (uatAlgorithm.equalsIgnoreCase("RSA")
										|| uatEncType.equalsIgnoreCase("ALL_PAYLOAD_HYBRID")) {
									if (uatPublicKey.length() > 0) {
										uatPublicKeyFileName = "UAT_"
												+ uatPublicKeyDetail.getFileName().replaceAll(" ", "_");
										String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
										uatPublicKeyPath = jiraDirPath + "/" + timeStamp + "_" + uatPublicKeyFileName;
										uatPublicCertificate = checkCertificateMethod(uatPublicKey);
										LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
										if (uatPublicCertificate == "FILE NOT FOUND") {
											responseModel.setMessage("Uploaded certicate contains invalid content");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										} else {
											clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													uatPublicKey, uatPublicKeyFileName);
											if (clientResponse1.getStatus() == 200
													|| clientResponse1.getStatus() == 201) {
												uatCertDone = true;
											} else {
												uatCertDone = true;
											}
											serverFileUpload(uatPublicKeyPath, jiraDirPath, uatPublicKey);
										}
									} else {
										uatCertDone = true;
										uatPublicKeyPath = filePaths1.getString("UAT_PUBLIC_KEY");
										LOGGER.info("uatPublicKeyPath : " + uatPublicKeyPath);
										uatPublicCertificate = checkCertificatePath(uatPublicKeyPath);
										LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
										if (uatPublicCertificate == "FILE NOT FOUND") {
											responseModel.setMessage("Uploaded Certificate contains invalid content");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									}

									if (prodPublicKey.length() > 0) {
										prodPublicKeyFileName = "PROD_"
												+ prodPublicKeyDetail.getFileName().replaceAll(" ", "_");
										String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
										prodPublicKeyPath = jiraDirPath + "/" + timeStamp + "_" + prodPublicKeyFileName;
										prodPublicCertificate = checkCertificateMethod(prodPublicKey);
										LOGGER.info("prodPublicCertificate : " + prodPublicCertificate);
										if (prodPublicCertificate == "FILE NOT FOUND") {
											responseModel.setMessage("Uploaded certicate contains invalid content");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										} else {
											clientResponse2 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													prodPublicKey, prodPublicKeyFileName);
											if (clientResponse2.getStatus() == 200
													|| clientResponse2.getStatus() == 201) {
												prodCertDone = true;
											} else {
												prodCertDone = true;
											}
											serverFileUpload(prodPublicKeyPath, jiraDirPath, prodPublicKey);
										}
									} else {
										prodCertDone = true;
										prodPublicKeyPath = filePaths1.getString("PROD_PUBLIC_KEY");
										LOGGER.info("prodPublicKeyPath : " + prodPublicKeyPath);
										prodPublicCertificate = checkCertificatePath(prodPublicKeyPath);
										LOGGER.info("prodPublicCertificate : " + prodPublicCertificate);
										if (prodPublicCertificate == "FILE NOT FOUND") {
											responseModel.setMessage("Uploaded Certificate contains invalid content");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									}
								}
							}

							if (loopValue == 0) {
								if (uatTLSServiceUrl.equalsIgnoreCase("yes")) {
									if (uatTLSProof1Doc.length() > 0) {
										uatTLSProof1DocFileName = "UAT_"
												+ uatTLSProof1DocDetail.getFileName().replaceAll(" ", "_");
										uatTLS1FilePath = jiraDirPath + "/" + uatTLSProof1DocFileName;
										boolean isValid = tlsFileChecker(uatTLSProof1Doc, uatTLSProof1DocFileName);
										if (isValid == true) {
											clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													uatTLSProof1Doc, uatTLSProof1DocFileName);
											serverFileUpload(uatTLS1FilePath, jiraDirPath, uatTLSProof1Doc);
											if (clientResponse3.getStatus() == 200
													|| clientResponse3.getStatus() == 201) {
												uatTLSDone = true;
											} else {
												uatTLSDone = true;
											}
										} else {
											LOGGER.info("Please upload TLS file");
											responseModel.setMessage("Please upload TLS file");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} else {
										uatTLSDone = true;
										uatTLS1FilePath = filePaths1.getString("UAT_TLS_PATH");
										LOGGER.info("uatTLS1FilePath : " + uatTLS1FilePath);
									}
								}
								if (prodTLSServiceUrl.equalsIgnoreCase("yes")) {
									if (prodTLSProof1Doc.length() > 0) {
										prodTLSProof1DocFileName = "PROD_"
												+ prodTLSProof1DocDetail.getFileName().replaceAll(" ", "_");
										prodTLS1FilePath = jiraDirPath + "/" + prodTLSProof1DocFileName;
										boolean isValid = tlsFileChecker(prodTLSProof1Doc, prodTLSProof1DocFileName);
										if (isValid == true) {
											clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													prodTLSProof1Doc, prodTLSProof1DocFileName);
											serverFileUpload(prodTLS1FilePath, jiraDirPath, prodTLSProof1Doc);
											if (clientResponse3.getStatus() == 200
													|| clientResponse3.getStatus() == 201) {
												prodTLSDone = true;
											} else {
												prodTLSDone = true;
											}
										} else {
											LOGGER.info("Please upload TLS file");
											responseModel.setMessage("Please upload TLS file");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} else {
										prodTLSDone = true;
										prodTLS1FilePath = filePaths1.getString("PROD_TLS_PATH");
										LOGGER.info("prodTLS1FilePath : " + prodTLS1FilePath);
									}
								}
							} else if (apiNameCount == 2 & loopValue == 1) {
								if (uatTLSServiceUrl.equalsIgnoreCase("yes")) {
									if (uatTLSProof2Doc.length() > 0) {
										uatTLSProof2DocFileName = "UAT_"
												+ uatTLSProof2DocDetail.getFileName().replaceAll(" ", "_");
										uatTLS2FilePath = jiraDirPath + "/" + uatTLSProof2DocFileName;
										boolean isValid = tlsFileChecker(uatTLSProof2Doc, uatTLSProof2DocFileName);
										if (isValid == true) {
											clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													uatTLSProof2Doc, uatTLSProof2DocFileName);
											serverFileUpload(uatTLS2FilePath, jiraDirPath, uatTLSProof2Doc);
											if (clientResponse3.getStatus() == 200
													|| clientResponse3.getStatus() == 201) {
												uatTLSDone = true;
											} else {
												uatTLSDone = true;
											}
										} else {
											LOGGER.info("Please upload TLS file");
											responseModel.setMessage("Please upload TLS file");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} else {
										uatTLSDone = true;
										uatTLS1FilePath = filePaths2.getString("UAT_TLS_PATH");
										LOGGER.info("uatTLS1FilePath : " + uatTLS1FilePath);
									}
								}
								if (prodTLSServiceUrl.equalsIgnoreCase("yes")) {
									if (prodTLSProof2Doc.length() > 0) {
										prodTLSProof2DocFileName = "PROD_"
												+ prodTLSProof2DocDetail.getFileName().replaceAll(" ", "_");
										prodTLS2FilePath = jiraDirPath + "/" + prodTLSProof2DocFileName;
										boolean isValid = tlsFileChecker(prodTLSProof2Doc, prodTLSProof2DocFileName);
										if (isValid == true) {
											clientResponse3 = HttpClient.postUpdateJiraAttachment(attachmentUrl,
													prodTLSProof2Doc, prodTLSProof2DocFileName);
											serverFileUpload(prodTLS2FilePath, jiraDirPath, prodTLSProof2Doc);
											if (clientResponse3.getStatus() == 200
													|| clientResponse3.getStatus() == 201) {
												prodTLSDone = true;
											} else {
												prodTLSDone = true;
											}
										} else {
											LOGGER.info("Please upload TLS file");
											responseModel.setMessage("Please upload TLS file");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									} else {
										prodTLSDone = true;
										prodTLS2FilePath = filePaths2.getString("PROD_TLS_PATH");
										LOGGER.info("prodTLS2FilePath : " + prodTLS2FilePath);
									}
								}
							}
						}

						if (uatEncryptionRequired.equalsIgnoreCase("true")) {
							if (uatAlgorithm.equalsIgnoreCase("RSA")
									|| uatEncType.equalsIgnoreCase("ALL_PAYLOAD_HYBRID")) {
								if (uatCertDone == true && prodCertDone == true && uatDocDone == true) {
									isFileUploadedJira = true;
								} else {
									isFileUploadedJira = true;
								}
							} else {
								if (uatDocDone == true) {
									isFileUploadedJira = true;
								} else {
									isFileUploadedJira = true;
								}
							}
						} else if (uatEncryptionRequired.equalsIgnoreCase("false")) {
							if (uatDocDone == true) {
								isFileUploadedJira = true;
							} else {
								isFileUploadedJira = true;
							}
						}
						LOGGER.info("isFileUploadedJira : " + isFileUploadedJira);
						JSONObject json = new JSONObject();
						String mongoJSON = null;
						if (isFileUploadedJira == true) {
							if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("Trade APIs")
									&& apiType.equalsIgnoreCase("OUTBOUND")) {
								if (isRevert == false) {
									json.put("isMongoFileUATCreated", false);
									json.put("isMongoBasicUATCreated", false);
									json.put("isMongoPrefsUATCreated", false);
									json.put("isMongoFileUATUpdated", false);
									json.put("isMongoPrefsUATUpdated", false);
									json.put("isMongoFilePRODCreated", false);
									json.put("isMongoBasicPRODCreated", false);
									json.put("isMongoPrefsPRODCreated", false);
									json.put("isAppCreationUATDone", false);
									json.put("isAppCreationPRODDone", false);
									mongoJSON = json.toString();
								} else {
									json.put("isMongoFileUATCreated", true);
									json.put("isMongoBasicUATCreated", true);
									json.put("isMongoPrefsUATCreated", true);
									json.put("isMongoFileUATUpdated", false);
									json.put("isMongoPrefsUATUpdated", false);
									json.put("isMongoFilePRODCreated", false);
									json.put("isMongoBasicPRODCreated", false);
									json.put("isMongoPrefsPRODCreated", false);
									json.put("isAppCreationUATDone", false);
									json.put("isAppCreationPRODDone", false);
									mongoJSON = json.toString();
								}
								response = saveOutbound(userID, jiraID, apiProduct, apiParent, apiNameSplit[i],
										apiIDSplit[i], apiType, uatDomainName, uatIP, uatServiceName, uatServiceUrl,
										uatTLSServiceUrl, uatPort, uatWebService, uatHttpMethod,
										uatAuthenticationRequired, uatAPIAuthentication, uatAuthHeaders,
										prodAuthHeaders, uatCustomAddHeaders, prodCustomAddHeaders,
										uatEncryptionRequired, uatEncMode, uatEncType, uatAlgorithm, uatAlgoMode,
										uatAlgoPadding, uatAlgoKeySize, uatAlgoIVLength, uatHybAlgorithm,
										uatHybAlgoMode, uatHybAlgoPadding, uatHybAlgoKeySize, uatHybAlgoIVLength,
										uatEncryptedPayloadFieldName, uatEncryptedPayloadIV, uatEncryptedPayloadSecret,
										uatChecksumRequired, uatCheckSumAlgo, uatDelimiter, uatStandardFunction,
										uatChecksumValue, uatChecksumType, uatChecksumSecret, prodDomainName, prodIP,
										prodServiceName, prodServiceUrl, prodTLSServiceUrl, prodPort, uatPublicKeyPath,
										prodPublicKeyPath, uatPublicCertificate, prodPublicCertificate, uatAPISpecDoc1,
										uatAPISpecDoc1Path, uatAPISpecDoc2, uatAPISpecDoc2Path, uatAPISpecDoc1FileName,
										uatAPISpecDoc2FileName, mongoJSON, statusJSON, isRevert, uatTLS1FilePath,
										uatTLSProof1DocFileName, uatTLS2FilePath, uatTLSProof2DocFileName,
										prodTLS1FilePath, prodTLSProof1DocFileName, prodTLS2FilePath,
										prodTLSProof2DocFileName, loopValue, uatSymmetricKey, uatStaticIV,
										prodChecksumSecret);
							}
						} else {
							responseModel.setMessage("file upload failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
					if (apiProduct.equalsIgnoreCase("Collections") && apiType.equalsIgnoreCase("OUTBOUND")) {
						boolean isReverted = jiraTransition("41", jiraID);
						jiraComment("JIRA Status Moved to InVerification Collections", jiraID);
						diyStandardDao.updateTechnicalDate(jiraID);
						if (isReverted == true) {
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					} else if (apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("OUTBOUND")) {
						boolean isReverted = jiraTransition("21", jiraID);
						jiraComment("JIRA Status Moved to InVerification Trade APIs", jiraID);
						diyStandardDao.updateTechnicalDate(jiraID);
						if (isReverted == true) {
							responseModel.setMessage("Request Submitted Successfully");
							responseModel.setStatus(true);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							responseModel.setData(jiraID);
							return Response.ok(responseModel).build();
						}
					}
					return response;
				} else {
					LOGGER.info("API_ID & API_NAME COUNT MISMATCHED");
				}
			} else if (apiProduct.equalsIgnoreCase("Payments") && apiType.equalsIgnoreCase("INBOUND")) {
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
				appJSON = new JSONObject();
				String appCreationJSON = null;
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
				if (isRevert == false) {
					appJSON.put("isDeveloperUATCreated", false);
					appJSON.put("isAppUATCreated", false);
					appJSON.put("isKVMUATCreated", false);
					appJSON.put("isDeveloperPRODCreated", false);
					appJSON.put("isAppPRODCreated", false);
					appJSON.put("isKVMPRODCreated", false);
					appJSON.put("isAppCreationUATDone", false);
					appJSON.put("isAppCreationPRODDone", false);
					appCreationJSON = appJSON.toString();
				} else {
					appJSON.put("isDeveloperUATCreated", true);
					appJSON.put("isAppUATCreated", true);
					appJSON.put("isKVMUATCreated", true);
					appJSON.put("isKVMUATUpdated", false);
					appJSON.put("isDeveloperPRODCreated", false);
					appJSON.put("isAppPRODCreated", false);
					appJSON.put("isKVMPRODCreated", false);
					appJSON.put("isAppCreationUATDone", false);
					appJSON.put("isAppCreationPRODDone", false);
					appCreationJSON = appJSON.toString();
				}
				if (apiParent.equals("Transac Pro API") || apiParent.equals("CIB Payment API")
						|| apiParent.equals("Account Service API") || apiParent.equals("Composite Payment API")
						|| apiParent.equals("Composite Validation API") || apiParent.equals("Dealer Collection API")
						|| apiParent.equals("Fixed Deposit API") || apiParent.equals("UPI Collect API")
						|| apiParent.equals("UPI Mandate API") || apiParent.equals("UPI QR/ Intent API")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String uatIP = null;
					String uatServiceUrl = null;
					String uatEncryptionRequired = null;
					String uatEncMode = null;
					String prodIP = null;
					String prodServiceUrl = null;
					if (apiDataJSON.has("uatIP")) {
						uatIP = apiDataJSON.getString("uatIP");
					} else {
						uatIP = "";
					}
					if (apiDataJSON.has("uatServiceUrl")) {
						uatServiceUrl = apiDataJSON.getString("uatServiceUrl");
					} else {
						uatServiceUrl = "";
					}
					if (apiDataJSON.has("uatEncryptionRequired")) {
						uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
					} else {
						uatEncryptionRequired = "";
					}
					if (apiDataJSON.has("uatEncMode")) {
						uatEncMode = apiDataJSON.getString("uatEncMode");
					} else {
						uatEncMode = "";
					}
					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					} else {
						prodIP = "";
					}
					if (apiDataJSON.has("prodServiceUrl")) {
						prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
					} else {
						prodServiceUrl = "";
					}
					if (isRevert == false) {
						if (uatEncryptionRequired.equals("true")) {
							if (uatPublicKey.length() > 0) {
								uatPublicKeyFileName = "UAT_" + uatPublicKeyDetail.getFileName().replaceAll(" ", "_");
								String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
								uatPublicKeyPath = jiraDirPath + "/" + timeStamp + "_" + uatPublicKeyFileName;
								uatPublicCertificate = checkCertificateMethod(uatPublicKey);
								LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
								if (uatPublicCertificate == "FILE NOT FOUND") {
									responseModel.setMessage("Uploaded certicate contains invalid content");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, uatPublicKey,
											uatPublicKeyFileName);
									if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
										uatCertDone = true;
									} else {
										uatCertDone = true;
									}
									serverFileUpload(uatPublicKeyPath, jiraDirPath, uatPublicKey);
								}
							} else if (uatPublicKey == null || uatPublicKeyDetail == null
									|| uatPublicKeyDetail.getFileName().isEmpty()) {
								responseModel.setMessage("Please upload valid certificate");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}

							if (prodPublicKey.length() > 0) {
								prodPublicKeyFileName = "PROD_"
										+ prodPublicKeyDetail.getFileName().replaceAll(" ", "_");
								String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
								prodPublicKeyPath = jiraDirPath + "/" + timeStamp + "_" + prodPublicKeyFileName;
								prodPublicCertificate = checkCertificateMethod(prodPublicKey);
								LOGGER.info("prodPublicCertificate : " + prodPublicCertificate);
								if (prodPublicCertificate == "FILE NOT FOUND") {
									responseModel.setMessage("Uploaded certicate contains invalid content");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									clientResponse2 = HttpClient.postUpdateJiraAttachment(attachmentUrl, prodPublicKey,
											prodPublicKeyFileName);
									if (clientResponse2.getStatus() == 200 || clientResponse2.getStatus() == 201) {
										prodCertDone = true;
									} else {
										prodCertDone = true;
									}
									serverFileUpload(prodPublicKeyPath, jiraDirPath, prodPublicKey);
								}
							} else if (prodPublicKey == null || prodPublicKeyDetail == null
									|| prodPublicKeyDetail.getFileName().isEmpty()) {
								responseModel.setMessage("Please upload valid certificate");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						}
					} else if (isRevert == true) { // file read old rebert NARESHa
						if (uatEncryptionRequired.equals("true")) {
							if (uatPublicKey.length() > 0) {
								uatPublicKeyFileName = "UAT_" + uatPublicKeyDetail.getFileName().replaceAll(" ", "_");
								String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
								uatPublicKeyPath = jiraDirPath + "/" + timeStamp + "_" + uatPublicKeyFileName;
								uatPublicCertificate = checkCertificateMethod(uatPublicKey);
								LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
								if (uatPublicCertificate == "FILE NOT FOUND") {
									responseModel.setMessage("Uploaded certicate contains invalid content");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, uatPublicKey,
											uatPublicKeyFileName);
									if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
										uatCertDone = true;
									} else {
										uatCertDone = true;
									}
									serverFileUpload(uatPublicKeyPath, jiraDirPath, uatPublicKey);
								}
							} else {
								uatPublicCertificate = checkCertificatePath(apiUserDataModel.getUatPublicKey());
								LOGGER.info("uatPublicCertificate : " + uatPublicCertificate);
								uatPublicKeyPath = apiUserDataModel.getUatPublicKey();
							}

							if (prodPublicKey.length() > 0) {
								prodPublicKeyFileName = "PROD_"
										+ prodPublicKeyDetail.getFileName().replaceAll(" ", "_");
								String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
								prodPublicKeyPath = jiraDirPath + "/" + timeStamp + "_" + prodPublicKeyFileName;
								prodPublicCertificate = checkCertificateMethod(prodPublicKey);
								LOGGER.info("prodPublicCertificate : " + prodPublicCertificate);
								if (prodPublicCertificate == "FILE NOT FOUND") {
									responseModel.setMessage("Uploaded certicate contains invalid content");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									clientResponse2 = HttpClient.postUpdateJiraAttachment(attachmentUrl, prodPublicKey,
											prodPublicKeyFileName);
									if (clientResponse2.getStatus() == 200 || clientResponse2.getStatus() == 201) {
										prodCertDone = true;
									} else {
										prodCertDone = true;
									}
									serverFileUpload(prodPublicKeyPath, jiraDirPath, prodPublicKey);
								}
							} else {
								prodPublicCertificate = checkCertificatePath(apiUserDataModel.getProdPublicKey());
								LOGGER.info("prodPublicCertificate : " + prodPublicCertificate);
								prodPublicKeyPath = apiUserDataModel.getProdPublicKey();
							}
						}
					}

					JSONObject fields = new JSONObject();
					JSONObject issue = new JSONObject();
					fields.put("customfield_15616", uatIP);
					fields.put("customfield_15632", prodIP);
					fields.put("customfield_15619", uatServiceUrl);
					fields.put("customfield_15635", prodServiceUrl);
					issue.put("fields", fields);
					try {
						LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
						boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
						if (fieldsUpdated == true) {
							LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
						}
					} catch (JSONException e) {
						LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
					}

					boolean isSaved = diyStandardDao.savePaymentsTechnical(jiraID, userID, uatIP, uatEncryptionRequired,
							uatEncMode, prodIP, uatPublicKeyPath, prodPublicKeyPath, appCreationJSON, uatServiceUrl,
							prodServiceUrl);
					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						boolean isReverted = jiraTransition("31", jiraID);
						jiraComment("JIRA Status Moved to InVerification Payments", jiraID);
						if (isReverted == true) {
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							responseModel.setMessage("Onboarding Request Submitted Successfully");
							responseModel.setStatus(isSaved);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				} else if (apiParent.equals("Payment Model I")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String uatIP = apiDataJSON.getString("uatIP");
					String uatServiceUrl = apiDataJSON.getString("uatServiceUrl");
					String uatPort = apiDataJSON.getString("uatPort");
					String prodIP = apiDataJSON.getString("prodIP");
					String prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
					String prodPort = apiDataJSON.getString("prodPort");

					boolean isSaved = diyStandardDao.saveBulkPaymentsTechnical(jiraID, userID, uatIP, uatServiceUrl,
							uatPort, prodIP, prodServiceUrl, prodPort, appCreationJSON);

					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						boolean isReverted = jiraTransition("31", jiraID);
						jiraComment("JIRA Status Moved to InVerification Payments", jiraID);
						if (isReverted == true) {
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							responseModel.setMessage("Onboarding Request Submitted Successfully");
							responseModel.setStatus(isSaved);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("INBOUND")) {
				String appCreationJSON = null;
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
				payloadJSON = new JSONObject(payloadAPIData);
				apiDataJSON = payloadJSON.getJSONObject(apiParent);
				String jiraCategory = apiUserDataModel.getJiraCategory();
				String uatIP = apiDataJSON.getString("uatIP");
				String uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
				String uatEncMode = apiDataJSON.getString("uatEncMode");
				String prodIP = apiDataJSON.getString("prodIP");
				JSONObject fields = new JSONObject();
				JSONObject issue = new JSONObject();
				fields.put("customfield_15616", uatIP);
				fields.put("customfield_15632", prodIP);
				fields.put("customfield_15782", apiUserDataModel.getCorpID());
				issue.put("fields", fields);
				try {
					LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
					boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
					if (fieldsUpdated == true) {
						LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
					}
				} catch (JSONException e) {
					LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
				}
				appJSON = new JSONObject();
				if (jiraCategory.equalsIgnoreCase("NEW")) {
					if (isRevert == false) {
						appJSON.put("isDeveloperUATCreated", false);
						appJSON.put("isAppUATCreated", false);
						appJSON.put("isKVMUATCreated", false);
						appJSON.put("isDeveloperPRODCreated", false);
						appJSON.put("isAppPRODCreated", false);
						appJSON.put("isKVMPRODCreated", false);
						appJSON.put("isAppCreationUATDone", false);
						appJSON.put("isAppCreationPRODDone", false);
						appCreationJSON = appJSON.toString();
					} else {
						appJSON.put("isDeveloperUATCreated", true);
						appJSON.put("isAppUATCreated", true);
						appJSON.put("isKVMUATCreated", true);
						appJSON.put("isKVMUATUpdated", false);
						appJSON.put("isDeveloperPRODCreated", false);
						appJSON.put("isAppPRODCreated", false);
						appJSON.put("isKVMPRODCreated", false);
						appJSON.put("isAppCreationUATDone", false);
						appJSON.put("isAppCreationPRODDone", false);
						appCreationJSON = appJSON.toString();
					}
				} else if (jiraCategory.equalsIgnoreCase("ADD")) {
					appJSON.put("isAddProductUATDone", false);
					appJSON.put("isAddProductPRODDone", false);
					appCreationJSON = appJSON.toString();
				}
				boolean isSaved = diyStandardDao.saveTradeTechnical(jiraID, userID, uatIP, uatEncryptionRequired,
						uatEncMode, prodIP, appCreationJSON);
				LOGGER.info("Trade APIs Technical Details Saved : " + isSaved);
				if (!isSaved) {
					LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
					responseModel.setMessage("Details not inserted into DB : " + apiParent);
					responseModel.setStatus(isSaved);
					responseModel.setData(jiraID);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				} else {
					boolean isReverted = jiraTransition("21", jiraID);
					jiraComment("JIRA Status Moved to InVerification Trade APIs", jiraID);
					if (isReverted == true) {
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						responseModel.setMessage("Onboarding Request Submitted Successfully");
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Jira Transition failed");
						responseModel.setStatus(false);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}
	
}


		private Response saveOutbound(String userID, String jiraID, String apiProduct, String apiParent, String apiName,
			String apiID, String apiType, String uatDomainName, String uatIP, String uatServiceName,
			String uatServiceUrl, String uatTLSServiceUrl, String uatPort, String uatWebService, String uatHttpMethod,
			String uatAuthenticationRequired, String uatAPIAuthentication, String uatAuthHeaders,
			String prodAuthHeaders, String uatCustomAddHeaders, String prodCustomAddHeaders,
			String uatEncryptionRequired, String uatEncMode, String uatEncType, String uatAlgorithm, String uatAlgoMode,
			String uatAlgoPadding, String uatAlgoKeySize, String uatAlgoIVLength, String uatHybAlgorithm,
			String uatHybAlgoMode, String uatHybAlgoPadding, String uatHybAlgoKeySize, String uatHybAlgoIVLength,
			String uatEncryptedPayloadFieldName, String uatEncryptedPayloadIV, String uatEncryptedPayloadSecret,
			String uatChecksumRequired, String uatCheckSumAlgo, String uatDelimiter, String uatStandardFunction,
			String uatChecksumValue, String uatChecksumType, String uatChecksumSecret, String prodDomainName,
			String prodIP, String prodServiceName, String prodServiceUrl, String prodTLSServiceUrl, String prodPort,
			String uatPublicKeyPath, String prodPublicKeyPath, String uatPublicCertificate,
			String prodPublicCertificate, File uatAPISpecDoc1, String uatAPISpecDoc1Path, File uatAPISpecDoc2,
			String uatAPISpecDoc2Path, String uatAPISpecDoc1FileName, String uatAPISpecDoc2FileName, String mongoJSON,
			String statusJSON, boolean isRevert, String uatTLS1FilePath, String uatTLSProof1DocFileName,
			String uatTLS2FilePath, String uatTLSProof2DocFileName, String prodTLS1FilePath,
			String prodTLSProof1DocFileName, String prodTLS2FilePath, String prodTLSProof2DocFileName, int loopValue,
			String uatSymmetricKey, String uatStaticIV, String prodChecksumSecret) {
		ResponseModel responseModel = new ResponseModel();
		boolean isSaved = false;
		DIYGenericStandardModel genericDetails = null;
		try {
			LOGGER.info("saveOutbound");
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			JSONObject uatTechdetailsData = new JSONObject();
			uatTechdetailsData.put("domainName", uatDomainName);
			uatTechdetailsData.put("ipAddress", uatIP);
			uatTechdetailsData.put("serviceName", uatServiceName);
			uatTechdetailsData.put("serviceURL", uatServiceUrl);
			uatTechdetailsData.put("port", uatPort);
			String typeOFWebServiceUat = null;
			if (uatWebService.equalsIgnoreCase("application/json")) {
				typeOFWebServiceUat = "JSON";
			} else if (uatWebService.equalsIgnoreCase("application/xml")) {
				typeOFWebServiceUat = "XML";
			} else if (uatWebService.equals("application/soap+xml")) {
				typeOFWebServiceUat = "SOAP";
			}
			uatTechdetailsData.put("typeOfWebService", typeOFWebServiceUat);
			uatTechdetailsData.put("httpMethodType", uatHttpMethod);

			// UAT Preferences details mongoDB
			JSONObject uatMainJson = new JSONObject();
			uatMainJson.put("verb", uatHttpMethod.toUpperCase());
			uatMainJson.put("pathSuffix", "");// apiName prefix
			if (apiName.equals("validation") || apiName.equals("receipt")) {
				uatMainJson.put("prefix", "");
			}
//			if (apiProduct.equalsIgnoreCase("Trade APIs")) {
//				uatMainJson.put("apigeeEndpoint", genericDetails.getEndpoint());
//			} else {
			uatMainJson.put("apigeeEndpoint", genericDetails.getEndpoint());
//			}
			uatMainJson.put("targetEndpoint", uatServiceUrl);
			uatMainJson.put("targetContentType", uatWebService);

			// Security Preferences details mongoDB
			JSONObject uatSecurityJson = new JSONObject();
			JSONObject uatEncPrefrencesJson = new JSONObject();
			boolean uatEncryptionRequiredBoolean = Boolean.parseBoolean(uatEncryptionRequired);
			uatEncPrefrencesJson.put("enabled", uatEncryptionRequiredBoolean);
			uatEncPrefrencesJson.put("encryptionModel", uatEncMode.toUpperCase());
			if (uatEncType == "SELECT_FIELD" || uatEncType.equalsIgnoreCase("SELECT_FIELD")) {
				uatEncPrefrencesJson.put("encryptionType", uatEncType);
				JSONArray fieldsToEncryptArr = new JSONArray();
				uatEncPrefrencesJson.put("fieldsToEncrypt", fieldsToEncryptArr);
				uatEncPrefrencesJson.put("algorithm", uatAlgorithm);
				uatEncPrefrencesJson.put("algoMode", uatAlgoMode);
				uatEncPrefrencesJson.put("algoPadding", uatAlgoPadding);
				uatEncPrefrencesJson.put("algoKeySize", uatAlgoKeySize);
				uatEncPrefrencesJson.put("algoIVLength", uatAlgoIVLength);
				uatEncPrefrencesJson.put("rsaPubKey", uatPublicCertificate);
				uatEncPrefrencesJson.put("hybAlgorithm", "");
				uatEncPrefrencesJson.put("hybAlgoMode", "");
				uatEncPrefrencesJson.put("hybAlgoPadding", "");
				uatEncPrefrencesJson.put("hybAlgoKeySize", "");
				uatEncPrefrencesJson.put("hybAlgoIVLength", "");

				if (uatAlgorithm.equalsIgnoreCase("AES")) {
					uatEncPrefrencesJson.put("staticSymmentricKey", encodeKey(uatSymmetricKey));
					uatEncPrefrencesJson.put("staticIV", uatStaticIV);
				}
			} else if (uatEncType == "ALL_FIELD" || uatEncType.equalsIgnoreCase("ALL_FIELD")) {
				uatEncPrefrencesJson.put("encryptionType", uatEncType);
				JSONArray fieldsToEncryptArr = new JSONArray();
				uatEncPrefrencesJson.put("fieldsToEncrypt", fieldsToEncryptArr);
				if (uatAlgorithm == "DESede" || uatAlgorithm.equals("DESede")) {
					uatAlgorithm = "DES EDE";
				}
				uatEncPrefrencesJson.put("algorithm", uatAlgorithm);
				uatEncPrefrencesJson.put("algoMode", uatAlgoMode);
				uatEncPrefrencesJson.put("algoPadding", uatAlgoPadding);
				uatEncPrefrencesJson.put("algoKeySize", uatAlgoKeySize);
				uatEncPrefrencesJson.put("algoIVLength", uatAlgoIVLength);
				uatEncPrefrencesJson.put("rsaPubKey", uatPublicCertificate);
				uatEncPrefrencesJson.put("hybAlgorithm", "");
				uatEncPrefrencesJson.put("hybAlgoMode", "");
				uatEncPrefrencesJson.put("hybAlgoPadding", "");
				uatEncPrefrencesJson.put("hybAlgoKeySize", "");
				uatEncPrefrencesJson.put("hybAlgoIVLength", "");

				if (uatAlgorithm.equalsIgnoreCase("AES")) {
					uatEncPrefrencesJson.put("staticSymmentricKey", encodeKey(uatSymmetricKey));
					uatEncPrefrencesJson.put("staticIV", uatStaticIV);
				}

			} else if (uatEncType == "ALL_PAYLOAD" || uatEncType.equalsIgnoreCase("ALL_PAYLOAD")) {
				uatEncPrefrencesJson.put("encryptionType", uatEncType);
				JSONArray fieldsToEncryptArr = new JSONArray();
				uatEncPrefrencesJson.put("fieldsToEncrypt", fieldsToEncryptArr);
				uatEncPrefrencesJson.put("algorithm", uatHybAlgorithm);
				uatEncPrefrencesJson.put("algoMode", uatHybAlgoMode);
				uatEncPrefrencesJson.put("algoPadding", uatHybAlgoPadding);
				uatEncPrefrencesJson.put("algoKeySize", uatHybAlgoKeySize);
				uatEncPrefrencesJson.put("algoIVLength", uatHybAlgoIVLength);
				uatEncPrefrencesJson.put("rsaPubKey", uatPublicCertificate);
				uatEncPrefrencesJson.put("hybAlgorithm", uatAlgorithm);
				uatEncPrefrencesJson.put("hybAlgoMode", uatAlgoMode);
				uatEncPrefrencesJson.put("hybAlgoPadding", uatAlgoPadding);
				uatEncPrefrencesJson.put("hybAlgoKeySize", uatAlgoKeySize);
				uatEncPrefrencesJson.put("hybAlgoIVLength", uatAlgoIVLength);

				if (uatAlgorithm.equalsIgnoreCase("AES")) {
					uatEncPrefrencesJson.put("staticSymmentricKey", encodeKey(uatSymmetricKey));
					uatEncPrefrencesJson.put("staticIV", uatStaticIV);
				}
			} else if (uatEncType == "ALL_PAYLOAD_HYBRID" || uatEncType.equalsIgnoreCase("ALL_PAYLOAD_HYBRID")) {
				uatEncPrefrencesJson.put("encryptionType", "ALL_PAYLOAD");
				JSONArray fieldsToEncryptArr = new JSONArray();
				uatEncPrefrencesJson.put("fieldsToEncrypt", fieldsToEncryptArr);
				uatEncPrefrencesJson.put("algorithm", uatHybAlgorithm);
				uatEncPrefrencesJson.put("algoMode", uatHybAlgoMode);
				uatEncPrefrencesJson.put("algoPadding", uatHybAlgoPadding);
				uatEncPrefrencesJson.put("algoKeySize", uatHybAlgoKeySize);
				uatEncPrefrencesJson.put("algoIVLength", uatHybAlgoIVLength);
				uatEncPrefrencesJson.put("rsaPubKey", uatPublicCertificate);
				uatEncPrefrencesJson.put("hybAlgorithm", uatAlgorithm);
				uatEncPrefrencesJson.put("hybAlgoMode", uatAlgoMode);
				uatEncPrefrencesJson.put("hybAlgoPadding", uatAlgoPadding);
				uatEncPrefrencesJson.put("hybAlgoKeySize", uatAlgoKeySize);
				uatEncPrefrencesJson.put("hybAlgoIVLength", uatAlgoIVLength);

				JSONObject payloadfieldJson = new JSONObject();
				payloadfieldJson.put("encryptedPayloadFieldName", uatEncryptedPayloadFieldName);
				payloadfieldJson.put("encryptedPayloadIV", uatEncryptedPayloadIV);
				payloadfieldJson.put("encryptedPayloadSecret", uatEncryptedPayloadSecret);
				uatEncPrefrencesJson.put("payloadFields", payloadfieldJson);
			} else {
				LOGGER.info("uatEncType is not valid " + uatEncType);
			}

			// CheckSum Preferences details mongoDB
			JSONObject uatCheckSumPrefJson = new JSONObject();
			boolean uatChecksumRequiredBoolean = Boolean.parseBoolean(uatChecksumRequired);
			uatCheckSumPrefJson.put("enabled", uatChecksumRequiredBoolean);
			uatCheckSumPrefJson.put("algo", uatCheckSumAlgo);
			uatCheckSumPrefJson.put("secret", uatChecksumSecret);
			uatCheckSumPrefJson.put("checksumFieldName", "x-checksum");
			uatCheckSumPrefJson.put("checksumType", uatChecksumType);
			uatCheckSumPrefJson.put("checksumFieldLocation", uatChecksumValue);

			JSONObject uatAuthPrefJson = new JSONObject();
			boolean uatAuthenticationRequiredBoolean = Boolean.parseBoolean(uatAuthenticationRequired);
			uatAuthPrefJson.put("enabled", uatAuthenticationRequiredBoolean);
			String encValueUat = null;
			String uatAuthUserName = null;
			String uatAuthPassword = null;
			String uatAuthUserNameValue = null;
			String uatAuthPasswordValue = null;
			if (uatAPIAuthentication == "BASIC_AUTH" || uatAPIAuthentication.equals("BASIC_AUTH")) {
				JSONArray jsonArr = new JSONArray(uatAuthHeaders);
				for (int i = 0; i < jsonArr.length(); i++) {
					JSONObject jsonUsername = jsonArr.getJSONObject(i);
					if (jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("name").equals("username")) {
						uatAuthUserName = jsonUsername.getString("name");
						uatAuthUserNameValue = jsonUsername.getString("value");
					} else if (jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("name").equals("password")) {
						uatAuthPassword = jsonUsername.getString("name");
						uatAuthPasswordValue = jsonUsername.getString("value");
					} else {
						LOGGER.info("null");
					}
				}
				String authValue = uatAuthUserName + ":" + uatAuthPassword;
				encValueUat = Utility.encodeBase64(authValue);
			}

			if (uatAPIAuthentication == "CUSTOM_AUTH" || uatAPIAuthentication.equals("CUSTOM_AUTH")
					|| uatAPIAuthentication == "SOAP_AUTH" || uatAPIAuthentication.equals("SOAP_AUTH")) {
				JSONArray jsonArr = new JSONArray(uatAuthHeaders);
				for (int i = 0; i < jsonArr.length(); i++) {
					JSONObject jsonUsername = jsonArr.getJSONObject(i);
					if (jsonUsername.has("keyName") && jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("keyName").equals("username")) {
						uatAuthUserName = jsonUsername.getString("name");
						uatAuthUserNameValue = jsonUsername.getString("value");
					} else if (jsonUsername.has("keyName") && jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("keyName").equals("password")) {
						uatAuthPassword = jsonUsername.getString("name");
						uatAuthPasswordValue = jsonUsername.getString("value");
					} else {
						LOGGER.info("uatAuthHeaders null");
					}
				}
				encValueUat = "";
			}

			if (uatAPIAuthentication == "CREDS_PAYLOAD" || uatAPIAuthentication.equals("CREDS_PAYLOAD")) {
				encValueUat = "";
				uatAuthUserName = "";
				uatAuthUserNameValue = "";
				uatAuthPassword = "";
				uatAuthPasswordValue = "";
			}

			uatAuthPrefJson.put("authType", uatAPIAuthentication);
			uatAuthPrefJson.put("authHeaderName", "Authorization");
			uatAuthPrefJson.put("authHeaderValue", "Basic " + encValueUat);
			JSONArray uatCustomHeaders = new JSONArray();
			JSONObject uatUserNameJson = new JSONObject();
			uatUserNameJson.put("name", uatAuthUserName);
			uatUserNameJson.put("value", uatAuthUserNameValue);
			JSONObject uatPasswordJson = new JSONObject();
			uatPasswordJson.put("name", uatAuthPassword);
			uatPasswordJson.put("value", uatAuthPasswordValue);
			uatCustomHeaders.put(uatUserNameJson);
			uatCustomHeaders.put(uatPasswordJson);

			if (!uatCustomAddHeaders.contentEquals("[]")) {
				JSONArray jsonArr = new JSONArray(uatCustomAddHeaders);
				for (int i = 0; i < jsonArr.length(); i++) {
					JSONObject customAddHeaders = jsonArr.getJSONObject(i);
					uatCustomHeaders.put(customAddHeaders);
				}
			}
			uatAuthPrefJson.put("customHeaders", uatCustomHeaders);

			JSONObject uatSpecJson = new JSONObject();
			uatSpecJson.put("specType", uatWebService);
			uatSpecJson.put("specPath", "");

			uatSecurityJson.put("encryptionPrefs", uatEncPrefrencesJson);
			uatSecurityJson.put("checksumPrefs", uatCheckSumPrefJson);
			uatSecurityJson.put("authPrefs", uatAuthPrefJson);
			uatSecurityJson.put("spec", uatSpecJson);

			JSONObject uatRequestMapData = new JSONObject();
			JSONObject uatResponseMapData = new JSONObject();

			uatMainJson.put("technicalDetails", uatTechdetailsData);
			uatMainJson.put("security", uatSecurityJson);
			uatMainJson.put("requestObjectMapping", uatRequestMapData);
			uatMainJson.put("responseObjectMapping", uatResponseMapData);

			String uatMongoDb = uatMainJson.toString();
			JSONObject prodTechdetailsData = new JSONObject();
			prodTechdetailsData.put("domainName", prodDomainName);
			prodTechdetailsData.put("ipAddress", prodIP);
			prodTechdetailsData.put("serviceName", prodServiceName);
			prodTechdetailsData.put("serviceURL", prodServiceUrl);
			prodTechdetailsData.put("port", prodPort);
			prodTechdetailsData.put("typeOfWebService", typeOFWebServiceUat);
			prodTechdetailsData.put("httpMethodType", uatHttpMethod);

			// PROD Security Preferences details mongoDB
			JSONObject prodMainJson = new JSONObject();
			prodMainJson.put("verb", uatHttpMethod.toUpperCase());
			prodMainJson.put("pathSuffix", ""); // apiName
			if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				prodMainJson.put("apigeeEndpoint", "");
			} else {
				prodMainJson.put("apigeeEndpoint", genericDetails.getEndpoint());
			}
			prodMainJson.put("targetEndpoint", prodServiceUrl);
			prodMainJson.put("targetContentType", uatWebService);
			// Security Preferences details mongoDB

			JSONObject prodSecurityJson = new JSONObject();
			prodSecurityJson = new JSONObject();

			// Auth Preferences details mongoDB
			JSONObject prodAuthPrefJson = new JSONObject();
			prodAuthPrefJson.put("enabled", uatAuthenticationRequiredBoolean);
			String encValueProd = null;
			String prodAuthUserName = null;
			String prodAuthPassword = null;
			String prodAuthUserNameValue = null;
			String prodAuthPasswordValue = null;
			if (uatAPIAuthentication == "BASIC_AUTH" || uatAPIAuthentication.equals("BASIC_AUTH")) {
				JSONArray jsonArr = new JSONArray(prodAuthHeaders);
				for (int i = 0; i < jsonArr.length(); i++) {
					JSONObject jsonUsername = jsonArr.getJSONObject(i);
					if (jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("name").equals("username")) {
						prodAuthUserName = jsonUsername.getString("name");
						prodAuthUserNameValue = jsonUsername.getString("value");
					} else if (jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("name").equals("password")) {
						prodAuthPassword = jsonUsername.getString("name");
						prodAuthPasswordValue = jsonUsername.getString("value");
					} else {
						LOGGER.info("null");
					}
				}
				String authValue = prodAuthUserName + ":" + prodAuthPassword;
				encValueProd = Utility.encodeBase64(authValue);
			}

			if (uatAPIAuthentication == "CUSTOM_AUTH" || uatAPIAuthentication.equals("CUSTOM_AUTH")
					|| uatAPIAuthentication == "SOAP_AUTH" || uatAPIAuthentication.equals("SOAP_AUTH")) {
				JSONArray jsonArr = new JSONArray(prodAuthHeaders);
				for (int i = 0; i < jsonArr.length(); i++) {
					JSONObject jsonUsername = jsonArr.getJSONObject(i);
					if (jsonUsername.has("keyName") && jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("keyName").equals("username")) {
						prodAuthUserName = jsonUsername.getString("name");
						prodAuthUserNameValue = jsonUsername.getString("value");
					} else if (jsonUsername.has("keyName") && jsonUsername.has("name") && jsonUsername.has("value")
							&& jsonUsername.getString("keyName").equals("password")) {
						prodAuthPassword = jsonUsername.getString("name");
						prodAuthPasswordValue = jsonUsername.getString("value");
					} else {
						LOGGER.info("prodAuthHeaders null");
					}
				}
				encValueProd = "";
			}

			if (uatAPIAuthentication == "CREDS_PAYLOAD" || uatAPIAuthentication.equals("CREDS_PAYLOAD")) {
				encValueProd = "";
				prodAuthUserName = "";
				prodAuthUserNameValue = "";
				prodAuthPassword = "";
				prodAuthPasswordValue = "";
			}

			prodAuthPrefJson.put("authType", uatAPIAuthentication);
			prodAuthPrefJson.put("authHeaderName", "Authorization");
			prodAuthPrefJson.put("authHeaderValue", "Basic " + encValueProd);
			JSONArray prodCustomHeaders = new JSONArray();
			JSONObject prodUserNameJson = new JSONObject();
			prodUserNameJson.put("name", prodAuthUserName);
			prodUserNameJson.put("value", prodAuthUserNameValue);
			JSONObject prodPasswordJson = new JSONObject();
			prodPasswordJson.put("name", prodAuthPassword);
			prodPasswordJson.put("value", prodAuthPasswordValue);
			prodCustomHeaders.put(prodUserNameJson);
			prodCustomHeaders.put(prodPasswordJson);

			if (!prodCustomAddHeaders.contentEquals("[]")) {
				JSONArray jsonArr = new JSONArray(prodCustomAddHeaders);
				for (int i = 0; i < jsonArr.length(); i++) {
					JSONObject customAddHeaders = jsonArr.getJSONObject(i);
					prodCustomHeaders.put(customAddHeaders);
				}
			} else {
				prodCustomAddHeaders = "[]";
			}
			prodAuthPrefJson.put("customHeaders", prodCustomHeaders);

			JSONObject prodSpecJson = new JSONObject();
			prodSpecJson.put("specType", uatWebService);
			prodSpecJson.put("specPath", "");

			prodSecurityJson.put("encryptionPrefs", uatEncPrefrencesJson);
			prodSecurityJson.put("checksumPrefs", uatCheckSumPrefJson);
			prodSecurityJson.put("authPrefs", prodAuthPrefJson);
			prodSecurityJson.put("spec", prodSpecJson);

			JSONObject prodRequestMapData = new JSONObject();
			JSONObject prodResponseMapData = new JSONObject();

			prodMainJson.put("technicalDetails", prodTechdetailsData);
			prodMainJson.put("security", prodSecurityJson);
			prodMainJson.put("requestObjectMapping", prodRequestMapData);
			prodMainJson.put("responseObjectMapping", prodResponseMapData);

			String prodMongoDb = prodMainJson.toString();
			isSaved = diyStandardDao.saveOutBoundTechnicalDetails(userID, jiraID, apiProduct, apiParent, apiName, apiID,
					apiType, uatDomainName, uatIP, uatServiceName, uatServiceUrl, uatTLSServiceUrl, uatPort,
					uatWebService, uatHttpMethod, uatAuthenticationRequired, uatAPIAuthentication, uatAuthHeaders,
					uatAuthUserName, uatAuthUserNameValue, uatAuthPassword, uatAuthPasswordValue, prodAuthHeaders,
					prodAuthUserName, prodAuthUserNameValue, prodAuthPassword, prodAuthPasswordValue,
					uatCustomAddHeaders, prodCustomAddHeaders, uatEncryptionRequired, uatEncMode, uatEncType,
					uatAlgorithm, uatAlgoMode, uatAlgoPadding, uatAlgoKeySize, uatAlgoIVLength, uatHybAlgorithm,
					uatHybAlgoMode, uatHybAlgoPadding, uatHybAlgoKeySize, uatHybAlgoIVLength,
					uatEncryptedPayloadFieldName, uatEncryptedPayloadIV, uatEncryptedPayloadSecret, uatChecksumRequired,
					uatCheckSumAlgo, uatDelimiter, uatStandardFunction, uatChecksumValue, uatChecksumType,
					uatChecksumSecret, prodDomainName, prodIP, prodServiceName, prodServiceUrl, prodTLSServiceUrl,
					prodPort, uatPublicKeyPath, prodPublicKeyPath, uatAPISpecDoc1Path, uatAPISpecDoc2Path, mongoJSON,
					statusJSON, isRevert, uatTLS1FilePath, uatTLS2FilePath, prodTLS1FilePath, prodTLS2FilePath,
					loopValue, uatMongoDb, prodMongoDb, uatSymmetricKey, uatStaticIV, prodChecksumSecret);
			LOGGER.info("Outbound Technical Details Saved : " + isSaved);
			if (!isSaved) {
				LOGGER.info("Details not inserted into Oracle DB : " + apiName);
				responseModel.setMessage("Details not inserted into DB : " + apiName);
				responseModel.setStatus(isSaved);
				responseModel.setData(jiraID);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			} else {
				diyStandardDao.saveStatusJSON(statusJSON, jiraID);
				responseModel.setMessage("Onboarding Request Submitted Successfully");
				responseModel.setStatus(isSaved);
				responseModel.setData(jiraID);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setMessage("Somthing went wrong, Please contact with the system administrator.");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
	}

	@POST
	@Path("/updateProdTechDetails")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public Response updateProdTechDetails(@FormDataParam("userID") String userID,
			@FormDataParam("apiProduct") String apiProduct, @FormDataParam("apiParent") String apiParent,
			@FormDataParam("apiName") String apiName, @FormDataParam("apiID") String apiID,
			@FormDataParam("apiType") String apiType, @FormDataParam("jiraID") String jiraID,
			@FormDataParam("file") File file, @FormDataParam("file") FormDataContentDisposition file1Detail,
			@FormDataParam("payloadAPIData") String payloadAPIData) {
		ResponseModel responseModel = new ResponseModel();
		String filePath = null;
		String fileFileName = null;
		String fileCertificate = null;
		boolean isSaved = false;
		boolean fileDone = false;
		JSONObject filePaths = null;
		Response clientResponse1 = null;
		boolean isFileUploadedJira = false;
		int loopValue = 0;
		JSONObject payloadJSON = null;
		JSONObject apiDataJSON = null;
		DIYStandardModel apiUserDataModel = null;
		String prodAuthUserName = null;
		String prodAuthPassword = null;
		String prodAuthUserNameValue = null;
		String prodAuthPasswordValue = null;
		String prodAuthHeaders = null;
		String prodChecksumSecret = null;
		try {
			String jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
			String attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
					+ "/attachments";
			if (apiProduct.equalsIgnoreCase("Collections")
					|| apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("OUTBOUND")) {
				String[] apiNameSplit = apiName.split(",");
				int apiNameCount = apiNameSplit.length;
				LOGGER.info("apiNameCount : " + apiNameCount);
				String[] apiIDSplit = apiID.split(",");
				if (apiNameCount == apiIDSplit.length) {
					for (int i = 0; i < apiNameCount; i++) {
						apiUserDataModel = diyStandardDao.getApiNameData(apiNameSplit[i], jiraID);
						loopValue = i;
						LOGGER.info("loopValue : " + loopValue);
						payloadJSON = new JSONObject(payloadAPIData);
						apiDataJSON = payloadJSON.getJSONObject(apiNameSplit[i]);

						String uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
						String prodDomainName = apiDataJSON.getString("prodDomainName");
						String prodIP = apiDataJSON.getString("prodIP");
						String prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
						String prodPort = apiDataJSON.getString("prodPort");

						String uatChecksumRequired = null;
						if (apiDataJSON.has("uatChecksumRequired")) {
							uatChecksumRequired = apiDataJSON.getString("uatChecksumRequired");
						}
						if (uatChecksumRequired.equalsIgnoreCase("true")) {
							if (apiDataJSON.has("prodChecksumSecret")) {
								prodChecksumSecret = apiDataJSON.getString("prodChecksumSecret");
							}
						}
						String uatAuthenticationRequired = null;
						if (apiDataJSON.has("uatAuthenticationRequired")) {
							uatAuthenticationRequired = apiDataJSON.getString("uatAuthenticationRequired");
						}
						if (uatAuthenticationRequired.equalsIgnoreCase("true")) {
							String uatAPIAuthentication = null;
							if (apiDataJSON.has("uatAPIAuthentication")) {
								uatAPIAuthentication = apiDataJSON.getString("uatAPIAuthentication");
							}
							if (apiDataJSON.has("prodAuthHeaders")) {
								prodAuthHeaders = apiDataJSON.getString("prodAuthHeaders");

								if (uatAPIAuthentication.equals("BASIC_AUTH")) {
									JSONArray jsonArr = new JSONArray(prodAuthHeaders);
									for (int j = 0; j < jsonArr.length(); j++) {
										JSONObject jsonUsername = jsonArr.getJSONObject(j);
										if (jsonUsername.has("name") && jsonUsername.has("value")
												&& jsonUsername.getString("name").equals("username")) {
											prodAuthUserName = jsonUsername.getString("name");
											prodAuthUserNameValue = jsonUsername.getString("value");
										} else if (jsonUsername.has("name") && jsonUsername.has("value")
												&& jsonUsername.getString("name").equals("password")) {
											prodAuthPassword = jsonUsername.getString("name");
											prodAuthPasswordValue = jsonUsername.getString("value");
										} else {
											LOGGER.info("null");
										}
									}
								} else if (uatAPIAuthentication.equals("CUSTOM_AUTH")
										|| uatAPIAuthentication.equals("SOAP_AUTH")) {
									JSONArray jsonArr = new JSONArray(prodAuthHeaders);
									for (int k = 0; k < jsonArr.length(); k++) {
										JSONObject jsonUsername = jsonArr.getJSONObject(k);
										if (jsonUsername.has("keyName") && jsonUsername.has("name")
												&& jsonUsername.has("value")
												&& jsonUsername.getString("keyName").equals("username")) {
											prodAuthUserName = jsonUsername.getString("name");
											prodAuthUserNameValue = jsonUsername.getString("value");
										} else if (jsonUsername.has("keyName") && jsonUsername.has("name")
												&& jsonUsername.has("value")
												&& jsonUsername.getString("keyName").equals("password")) {
											prodAuthPassword = jsonUsername.getString("name");
											prodAuthPasswordValue = jsonUsername.getString("value");
										} else {
											LOGGER.info("prodAuthHeaders null");
										}
									}
								}
							}
						}

						filePaths = diyStandardDao.getFilePaths1(jiraID, apiNameSplit[i]);
						LOGGER.info("filePaths : " + filePaths.toString());
						if (uatEncryptionRequired.equals("true")) {
							if (apiUserDataModel.getUatAlgorithm().equalsIgnoreCase("RSA")
									|| apiUserDataModel.getUatHybAlgorithm().equalsIgnoreCase("RSA")) {
								if (file.length() > 0) {
									fileFileName = "PROD_" + file1Detail.getFileName().replaceAll(" ", "_");
									String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
									filePath = jiraDirPath + "/" + timeStamp + "_" + fileFileName;
									fileCertificate = checkCertificateMethod(file);
									LOGGER.info("fileCertificate : " + fileCertificate);
									if (fileCertificate == "FILE NOT FOUND") {
										responseModel.setMessage("Uploaded certicate contains invalid content");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									} else {
										clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, file,
												fileFileName);
										if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
											fileDone = true;
										} else {
											fileDone = true;
										}
										serverFileUpload(filePath, jiraDirPath, file);
									}
								} else {
									fileDone = true;
									filePath = filePaths.getString("PROD_PUBLIC_KEY");
									LOGGER.info("filePath : " + filePath);
									fileCertificate = checkCertificatePath(filePath);
									LOGGER.info("fileCertificate : " + fileCertificate);
									if (fileCertificate == "FILE NOT FOUND") {
										responseModel.setMessage("Uploaded Certificate contains invalid content");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}
								}
								if (fileDone == true) {
									isFileUploadedJira = true;
								}
							} else {
								isFileUploadedJira = true;
							}
						} else {
							isFileUploadedJira = true;
						}
						LOGGER.info("isFileUploadedJira : " + isFileUploadedJira);
						if (isFileUploadedJira == true) {
							JSONObject fields = new JSONObject();
							JSONObject issue = new JSONObject();
							fields.put("customfield_15629", uatChecksumRequired);
							fields.put("customfield_15631", prodDomainName);
							fields.put("customfield_15632", prodIP);
							fields.put("customfield_15635", prodServiceUrl);
							fields.put("customfield_15636", prodPort);
							fields.put("customfield_15645", uatChecksumRequired);
							fields.put("customfield_16600", uatEncryptionRequired);
							fields.put("customfield_16601", uatAuthenticationRequired);
							fields.put("customfield_16602", uatEncryptionRequired);
							fields.put("customfield_16603", uatAuthenticationRequired);
							issue.put("fields", fields);
							try {
								LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
								boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
								if (fieldsUpdated == true) {
									LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
								}
							} catch (JSONException e) {
								LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
							}
							isSaved = diyStandardDao.updateProdOutBoundTechnical(userID, jiraID, apiProduct, apiParent,
									apiNameSplit[i], apiIDSplit[i], apiType, prodDomainName, prodIP, prodServiceUrl,
									prodPort, filePath, fileCertificate, loopValue, prodChecksumSecret,
									prodAuthUserName, prodAuthUserNameValue, prodAuthPassword, prodAuthPasswordValue,
									prodAuthHeaders);
							if (!isSaved) {
								LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
								responseModel.setMessage("Details not inserted into DB : " + apiParent);
								responseModel.setStatus(isSaved);
								responseModel.setData(jiraID);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								responseModel.setMessage("Onboarding Request Submitted Successfully");
								responseModel.setStatus(isSaved);
								responseModel.setData(jiraID);
								responseModel.setStatus_code(200);
							}
						} else {
							responseModel.setMessage("file upload failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
					return Response.ok(responseModel).build();
				} else {
					LOGGER.info("API_ID & API_NAME COUNT MISMATCHED");
				}
			} else if (apiProduct.equalsIgnoreCase("Payments") && apiType.equalsIgnoreCase("INBOUND")) {
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
				if (apiParent.equals("Transac Pro API") || apiParent.equals("CIB Payment API")
						|| apiParent.equals("Account Service API") || apiParent.equals("Composite Payment API")
						|| apiParent.equals("Composite Validation API") || apiParent.equals("Dealer Collection API")
						|| apiParent.equals("Fixed Deposit API")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String uatEncryptionRequired = null;
					String prodIP = null;
					if (apiDataJSON.has("uatEncryptionRequired")) {
						uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
					} else {
						uatEncryptionRequired = "";
					}
					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					} else {
						prodIP = "";
					}
					if (uatEncryptionRequired.equals("true")) {
						if (file.length() > 0) {
							fileFileName = "PROD_" + file1Detail.getFileName().replaceAll(" ", "_");
							String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
							filePath = jiraDirPath + "/" + timeStamp + "_" + fileFileName;
							fileCertificate = checkCertificateMethod(file);
							LOGGER.info("file1Certificate : " + fileCertificate);
							if (fileCertificate == "FILE NOT FOUND") {
								responseModel.setMessage("Uploaded certicate contains invalid content");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, file,
										fileFileName);
								if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
									fileDone = true;
								}
								serverFileUpload(filePath, jiraDirPath, file);
							}
						} else {
							fileCertificate = checkCertificatePath(apiUserDataModel.getProdPublicKey());
							LOGGER.info("file1Certificate : " + fileCertificate);
							filePath = apiUserDataModel.getProdPublicKey();
						}
					}

					JSONObject fields = new JSONObject();
					JSONObject issue = new JSONObject();
					fields.put("customfield_15632", prodIP);
					fields.put("customfield_15796", filePath);
//					fields.put("customfield_16600", uatEncryptionRequired);
					issue.put("fields", fields);
					try {
						LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
						boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
						if (fieldsUpdated == true) {
							LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
						}
					} catch (JSONException e) {
						LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
					}

					isSaved = diyStandardDao.updateProdPaymentsTechnical(jiraID, userID, prodIP, filePath);
					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Onboarding Request Submitted Successfully");
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else if (apiParent.equals("UPI Collect API") || apiParent.equals("UPI Mandate API")
						|| apiParent.equals("UPI QR/ Intent API")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String uatEncryptionRequired = null;
					String prodIP = null;
					String prodServiceUrl = null;
					if (apiDataJSON.has("uatEncryptionRequired")) {
						uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
					} else {
						uatEncryptionRequired = "";
					}
					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					} else {
						prodIP = "";
					}
					if (apiDataJSON.has("prodServiceUrl")) {
						prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
					} else {
						prodServiceUrl = "";
					}
					if (uatEncryptionRequired.equals("true")) {
						if (file.length() > 0) {
							fileFileName = "PROD_" + file1Detail.getFileName().replaceAll(" ", "_");
							String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
							filePath = jiraDirPath + "/" + timeStamp + "_" + fileFileName;
							fileCertificate = checkCertificateMethod(file);
							LOGGER.info("file1Certificate : " + fileCertificate);
							if (fileCertificate == "FILE NOT FOUND") {
								responseModel.setMessage("Uploaded certicate contains invalid content");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, file,
										fileFileName);
								if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
									fileDone = true;
								}
								serverFileUpload(filePath, jiraDirPath, file);
							}
						} else {
							fileCertificate = checkCertificatePath(apiUserDataModel.getProdPublicKey());
							LOGGER.info("file1Certificate : " + fileCertificate);
							filePath = apiUserDataModel.getProdPublicKey();
						}
					}
					JSONObject fields = new JSONObject();
					JSONObject issue = new JSONObject();
					fields.put("customfield_15632", prodIP);
					fields.put("customfield_15635", prodServiceUrl);
					fields.put("customfield_15796", filePath);
//					fields.put("customfield_16600", uatEncryptionRequired);
					issue.put("fields", fields);
					try {
						LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
						boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
						if (fieldsUpdated == true) {
							LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
						}
					} catch (JSONException e) {
						LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
					}

					isSaved = diyStandardDao.updateProdUPITechnical(jiraID, userID, prodIP, filePath, prodServiceUrl);
					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Onboarding Request Submitted Successfully");
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else if (apiParent.equals("Payment Model I")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String prodIP = null;
					String prodServiceUrl = null;
					String prodPort = null;

					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					} else {
						prodIP = "";
					}
					if (apiDataJSON.has("prodPort")) {
						prodPort = apiDataJSON.getString("prodPort");
					} else {
						prodPort = "";
					}
					if (apiDataJSON.has("prodServiceUrl")) {
						prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
					} else {
						prodServiceUrl = "";
					}
					JSONObject fields = new JSONObject();
					JSONObject issue = new JSONObject();
					fields.put("customfield_15632", prodIP);
					fields.put("customfield_15635", prodServiceUrl);
					fields.put("customfield_15636", prodPort);
//					fields.put("customfield_16600", uatEncryptionRequired);
					issue.put("fields", fields);
					try {
						LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
						boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
						if (fieldsUpdated == true) {
							LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
						}
					} catch (JSONException e) {
						LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
					}

					isSaved = diyStandardDao.updateProdBulkPaymentsTechnical(jiraID, userID, prodIP, prodServiceUrl,
							prodPort);

					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Onboarding Request Submitted Successfully");
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("INBOUND")) {
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
				payloadJSON = new JSONObject(payloadAPIData);
				apiDataJSON = payloadJSON.getJSONObject(apiParent);
				String prodIP = apiDataJSON.getString("prodIP");

				JSONObject fields = new JSONObject();
				JSONObject issue = new JSONObject();
				fields.put("customfield_15632", prodIP);
				issue.put("fields", fields);
				try {
					LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
					boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
					if (fieldsUpdated == true) {
						LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
					}
				} catch (JSONException e) {
					LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
				}
				isSaved = diyStandardDao.updateProdTradeTechnical(jiraID, userID, prodIP);
				LOGGER.info("Trade APIs Technical Details Saved : " + isSaved);
				if (!isSaved) {
					LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
					responseModel.setMessage("Details not inserted into DB : " + apiParent);
					responseModel.setStatus(isSaved);
					responseModel.setData(jiraID);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				} else {
					responseModel.setMessage("Onboarding Request Submitted Successfully");
					responseModel.setStatus(isSaved);
					responseModel.setData(jiraID);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	public String jiraRequestAccess(String description) {
		JSONObject jsonObject = null;
		String jiraID = null;
		try {
			JSONObject project = new JSONObject();
			project.put("id", "10396");
			JSONObject issuetype = new JSONObject();
			issuetype.put("id", "13500");
			JSONObject fields = new JSONObject();
			fields.put("project", project);
			fields.put("summary", "Developer Portal Trade API Access");
			fields.put("issuetype", issuetype);
			JSONObject json = new JSONObject();
			json.put("fields", fields);
			LOGGER.info("JIRA Create Payload : " + json.toString());

			String str = null;
			String payloadStr = null;
			String clientStr1 = null;
			try {
				str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
				payloadStr = json.toString();
				clientStr1 = HttpClient.restCreateJira(str, payloadStr);
				LOGGER.info("JIRA Create Response : " + clientStr1);
			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error(ex.toString());
			}
			jsonObject = new JSONObject(clientStr1);
			jiraID = (String) jsonObject.get("key");
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return jiraID;
	}

	public String jiraCreateDIY(String apiType, String fieldMappingRequired, String apiProduct, String applicationName,
			String natureOfApi) {
		JSONObject jsonObject = null;
		String jiraID = null;
		try {
			JSONObject project = new JSONObject();
			project.put("id", "10396");
			JSONObject assignee = new JSONObject();
			assignee.put("name", "APIBANKING");
			JSONObject issuetype = new JSONObject();
			issuetype.put("id", "13600");
			JSONObject fields = new JSONObject();
			fields.put("project", project);
			fields.put("summary", "Developer Portal DIY Onboarding");
			fields.put("issuetype", issuetype);
			JSONObject apiTypeJSON = new JSONObject();
			if (apiType.equalsIgnoreCase("INBOUND")) {
				String inboundID = "18819";
				apiTypeJSON.put("id", inboundID);
			} else {
				String outboundID = "18818";
				apiTypeJSON.put("id", outboundID);
			}
			fields.put("customfield_15826", apiTypeJSON);
			JSONObject fieldMappingRequiredJSON = new JSONObject();
			if (fieldMappingRequired.equalsIgnoreCase("Yes")) {
				String fieldMappingID = "18823";
				fieldMappingRequiredJSON.put("id", fieldMappingID);
			} else {
				String fieldMappingID = "18824";
				fieldMappingRequiredJSON.put("id", fieldMappingID);
			}
			fields.put("customfield_15828", fieldMappingRequiredJSON);
			JSONObject apiProductJSON = new JSONObject();
			if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				apiProductJSON.put("id", "18825");
			} else if (apiProduct.equalsIgnoreCase("Payments")) {
				apiProductJSON.put("id", "18826");
			} else if (apiProduct.equalsIgnoreCase("Collections")) {
				apiProductJSON.put("id", "18827");
			}
			fields.put("customfield_11327", apiProductJSON);
			if (apiType.equalsIgnoreCase("INBOUND")) {
				JSONObject callbackJSON = new JSONObject();
				String noID = "19801"; // no-19801 ,yes-19800
				callbackJSON.put("id", noID);
			} else if (apiType.equalsIgnoreCase("OUTBOUND")) {
				JSONObject callbackJSON = new JSONObject();
				String noID = "19800"; // no-19801 ,yes-19800
				callbackJSON.put("id", noID);
			}
//			fields.put("customfield_16202", callbackJSON);
			JSONObject json = new JSONObject();
			json.put("fields", fields);
			LOGGER.info("JIRA Create Payload : " + json.toString());
			String str = null;
			String payloadStr = null;
			String clientStr1 = null;
			try {
				str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
				payloadStr = json.toString();
				clientStr1 = HttpClient.restCreateJira(str, payloadStr);
			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error(ex.toString());
			}
			jsonObject = new JSONObject(clientStr1);
			jiraID = (String) jsonObject.get("key");
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			jiraID = null;
			LOGGER.error("JIRA creation Failed");
		}
		return jiraID;
	}

	public String jiraChangeExistingDIY(String parentJira, String apiProduct, String apiType) {
		JSONObject jsonObject = null;
		String jiraID = null;
		try {
			JSONObject project = new JSONObject();
			project.put("id", "10396");
			JSONObject parent = new JSONObject();
			parent.put("id", parentJira);
			JSONObject issuetype = new JSONObject();
			issuetype.put("id", "13800");
			JSONObject fields = new JSONObject();
			fields.put("parent", parent);
			fields.put("project", project);
			fields.put("summary", "Developer Portal Change in Existing DIY Onboarding");
			fields.put("issuetype", issuetype);
			JSONObject apiProductJSON = new JSONObject();
			if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				apiProductJSON.put("id", "19902");
			} else if (apiProduct.equalsIgnoreCase("Payments")) {
				apiProductJSON.put("id", "19904");
			} else if (apiProduct.equalsIgnoreCase("Collections")) {
				apiProductJSON.put("id", "19903");
			}
			fields.put("customfield_16304", apiProductJSON);
			JSONObject apiTypeJSON = new JSONObject();
			if (apiType.equalsIgnoreCase("INBOUND")) {
				apiTypeJSON.put("id", "18819");
			} else if (apiType.equalsIgnoreCase("OUTBOUND")) {
				apiTypeJSON.put("id", "18818");
			}
			fields.put("customfield_15826", apiTypeJSON);
			JSONObject json = new JSONObject();
			json.put("fields", fields);
			LOGGER.info("JIRA Create Payload : " + json.toString());
			String str = null;
			String payloadStr = null;
			String clientStr1 = null;
			try {
				str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
				payloadStr = json.toString();
				clientStr1 = HttpClient.restCreateJira(str, payloadStr);
			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error(ex.toString());
			}
			jsonObject = new JSONObject(clientStr1);
			jiraID = (String) jsonObject.get("key");
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			jiraID = null;
			LOGGER.error("JIRA creation Failed");
		}
		return jiraID;
	}

	public static String jiraAddProductDIY(String parentJira, String apiProduct, String apiType) {
		JSONObject jsonObject = null;
		String jiraID = null;
		try {
			JSONObject project = new JSONObject();
			project.put("id", "10396");
			JSONObject parent = new JSONObject();
			parent.put("id", parentJira);
			JSONObject issuetype = new JSONObject();
			issuetype.put("id", "13900");
			JSONObject fields = new JSONObject();
			fields.put("parent", parent);
			fields.put("project", project);
			fields.put("summary", "Developer Portal Add Product DIY Onboarding");
			fields.put("issuetype", issuetype);
			JSONObject apiProductJSON = new JSONObject();
			if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				apiProductJSON.put("id", "18825");
			} else if (apiProduct.equalsIgnoreCase("Payments")) {
				apiProductJSON.put("id", "18826");
			} else if (apiProduct.equalsIgnoreCase("Collections")) {
				apiProductJSON.put("id", "18827");
			}
			fields.put("customfield_11327", apiProductJSON);
			JSONObject apiTypeJSON = new JSONObject();
			if (apiType.equalsIgnoreCase("INBOUND")) {
				apiTypeJSON.put("id", "18819");
			} else if (apiType.equalsIgnoreCase("OUTBOUND")) {
				apiTypeJSON.put("id", "18818");
			}
			fields.put("customfield_15826", apiTypeJSON);
			JSONObject json = new JSONObject();
			json.put("fields", fields);
			LOGGER.info("JIRA Create Payload : " + json.toString());
			String str = null;
			String payloadStr = null;
			String clientStr1 = null;
			try {
				str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
				payloadStr = json.toString();
				clientStr1 = HttpClient.restCreateJira(str, payloadStr);
			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error(ex.toString());
			}
			jsonObject = new JSONObject(clientStr1);
			jiraID = (String) jsonObject.get("key");
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			jiraID = null;
			LOGGER.error("JIRA creation Failed");
		}
		return jiraID;
	}

	public boolean jiraTransition(String tid, String jiraID) {
		boolean isSaved = false;
		try {
			JSONObject tjo = new JSONObject();
			JSONObject tIdjo = new JSONObject();
			tIdjo.put("id", tid);
			tjo.put("transition", tIdjo);
			isSaved = restJiraPost(tjo.toString(), "T", jiraID);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex);
			return false;
		}
		return isSaved;
	}

	public void jiraComment(String comment, String jiraID) {
		try {
			JSONObject cjo = new JSONObject();
			cjo.put("body", comment);
			restJiraPost(cjo.toString(), "C", jiraID);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex);
		}
	}

	public String decodeKey(String str) {
		byte[] decoded = Base64.getDecoder().decode(str.getBytes());
		return new String(decoded);
	}

	public String encodeKey(String str) {
		byte[] encoded = Base64.getEncoder().encode(str.getBytes());
		return new String(encoded);
	}

	public boolean restJiraPost(String issuePacket, String type, String jiraId) {
		StringBuffer response = null;
		int responseCode = 0;
		URL verifyUrl = null;
		boolean isSaved = false;
		try {
			if (type == "C") {
				verifyUrl = new URL(GwConstants.JIRA_URL_V2_DNS + "issue/" + jiraId + "/comment");
			} else if (type == "T") {
				verifyUrl = new URL(GwConstants.JIRA_URL_V2_DNS + "issue/" + jiraId + "/transitions");
			}
			String jiraToken = "Basic " + JIRAConfigUtil.get("jira.v2.auth.token");
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", jiraToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = issuePacket.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Transition Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED
					|| responseCode == HttpURLConnection.HTTP_NO_CONTENT) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				isSaved = true;
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("JIRA errResponse :" + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isSaved;
	}

	public static boolean isYAML(File filepath) {
		try {
			FileInputStream fis = new FileInputStream(filepath);
			Yaml yaml = new Yaml();
			yaml.load(fis);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean publicKeyCheckByAES(String publicKey) {

		boolean flag = false;
		try {
			byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(publicKey);
			X509EncodedKeySpec spec_PublicKey = new X509EncodedKeySpec(pkcs8EncodedBytes);
			KeyFactory kf_PublicKey = KeyFactory.getInstance("RSA");
			RSAPublicKey pubKey = (RSAPublicKey) kf_PublicKey.generatePublic(spec_PublicKey);
			flag = true;
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
			flag = false;
		}
		return flag;
	}

	public boolean updateCustomFieldsJira(String bodyData, String jiraID) {

		boolean isSaved = false;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			String jiraToken = "Basic " + JIRAConfigUtil.get("jira.v2.auth.token");
			verifyUrl = new URL(GwConstants.JIRA_URL_V2_DNS + "issue/" + jiraID);
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setRequestProperty("Authorization", jiraToken);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("PUT");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("PUT Response Code for JIRAID : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED
					|| responseCode == HttpURLConnection.HTTP_NO_CONTENT) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				isSaved = true;
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				// print result
				String errResponse = response.toString();
				LOGGER.info("errResponse :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isSaved;
	}

	@POST
	@Path("/apiNameList")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response apiNameList(@FormParam("apiName") String apiName) {
		Gson finalJson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
		List<RequestedApiDetail> apiList = null;
		try {
			apiList = diyStandardDao.getApiNamesList(apiName);
			return Response.status(200).entity(finalJson.toJson(apiList)).build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		return Response.ok(null).build();
	}

	public String certificateToKeyFile(File certificateFile) {
		String publicKeyStr = null;
		try {
			FileInputStream fin = new FileInputStream(certificateFile);
			CertificateFactory f = CertificateFactory.getInstance("X.509");
			X509Certificate certificate = (X509Certificate) f.generateCertificate(fin);
			PublicKey pk = certificate.getPublicKey();
			Base64.Encoder encoder = Base64.getEncoder();
			publicKeyStr = encoder.encodeToString(pk.getEncoded());
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		// LOGGER.info(publicKeyStr);
		return publicKeyStr;
	}

	public boolean tlsFileChecker(File tlsProofDoc, String tlsProofDocFileName) {
		boolean isValid = false;
		if (tlsProofDoc.length() > 0) {
			String fileExtension = null;
			String[] fileNameSplit = tlsProofDocFileName.split("\\.");
			LOGGER.info("fileNameSplit : " + fileNameSplit.length);
			if (fileNameSplit.length == 2) {
				fileExtension = fileNameSplit[1];
			} else if (fileNameSplit.length > 2 || fileNameSplit.length < 2) {
				LOGGER.info("Please upload a correct TLS file to process the request");
				isValid = false;
			}
			if (fileExtension.equalsIgnoreCase("pdf")) {
				boolean pdfResult = apiDataDao.validatePDF(tlsProofDoc.getPath());
				if (pdfResult) {
					LOGGER.info("=============== TLS PDF file is valid =================");
					isValid = true;
				} else {
					LOGGER.info("=============== TLS PDF file is not valid ==============");
					isValid = false;
				}
			}
		}
		return isValid;
	}

	public boolean yamlFileChecker(File apiSpecDoc, String webService) {
		String contentType = null;
		boolean isValid = false;
		if (apiSpecDoc.length() > 0) {
			Tika tika = new Tika();
			try {
				contentType = tika.detect(apiSpecDoc);
			} catch (IOException e1) {
				LOGGER.error(e1);
			}
			if (contentType.equals("text/x-yaml") && webService == "application/json"
					|| webService.equalsIgnoreCase("application/json") || webService == "application/xml"
					|| webService.equalsIgnoreCase("application/xml")) {
				boolean isValidYaml = isYAML(apiSpecDoc);
				if (isValidYaml == false) {
					LOGGER.info("=============== Invalid YAML Document ==============");
					isValid = false;
				} else {
					isValid = true;
					LOGGER.info("file is valid ");
				}
			} else if (contentType.equals("application/wsdl+xml") && webService == "application/soap+xml"
					|| webService.equals("application/soap+xml")) {
				isValid = false;
			} else {
				LOGGER.info("=============== file is not valid ==============");
				isValid = false;
			}
		}
		return isValid;
	}

	public String checkCertificateMethod(File publicKeyFile) {
		String contentType = null;
		boolean isCertificate = false;
		String publicCertificate = null;
		try {
			if (publicKeyFile.length() > 0) {
				Tika tika = new Tika();
				try {
					contentType = tika.detect(publicKeyFile);
				} catch (IOException e1) {
					LOGGER.error(e1);
					LOGGER.info("=============================");
				}
				LOGGER.info("contentType : " + contentType);
				if (contentType.equals("application/vnd.apple.keynote")
						|| contentType.equals("application/x-x509-ca-cert")
						|| contentType.equals("application/x-x509-cert; format=pem")
						|| contentType.equals("application/x-x509-cert")
						|| contentType.equals("application/x-x509-key; format=pem")
						|| contentType.equals("application/x-x509-user-cert")
						|| contentType.equals("application/pkix-cert") || contentType.equals("text/plain")) {
					BufferedReader bufferedReader = null;
					try {
						bufferedReader = new BufferedReader(new FileReader(publicKeyFile));
						String curLine = null;
						boolean beginPublic = false;
						boolean endPublic = false;
						int count = 1;

						String pubKeyGen = null;
						StringBuilder builder1 = new StringBuilder();

						while ((curLine = bufferedReader.readLine()) != null) {
							if (curLine.equals("-----BEGIN PUBLIC KEY-----")) {
								beginPublic = true;
								count = 1;
							} else if (curLine.equals("-----END PUBLIC KEY-----")) {
								endPublic = true;
							}
							if (beginPublic == true && endPublic == false && count == 1) {
								count++;
							} else if (beginPublic == true && endPublic == false && count == 2) {
								builder1.append(curLine);
							} else if (beginPublic == true && endPublic == true) {
								break;
							}
						}
						LOGGER.info("Public Begin key : " + beginPublic + " --> Public  End Key : " + endPublic);
						bufferedReader.close();

						if (builder1.length() <= 0) {
							LOGGER.info("PUBLIC KEY Not found!, checking for Certificate");
							BufferedReader bufferedReader2 = null;
							bufferedReader2 = new BufferedReader(new FileReader(publicKeyFile));
							curLine = null;
							beginPublic = false;
							endPublic = false;
							count = 1;
							while ((curLine = bufferedReader2.readLine()) != null) {
								if (curLine.equals("-----BEGIN CERTIFICATE-----")) {
									beginPublic = true;
									count = 1;
								} else if (curLine.equals("-----END CERTIFICATE-----")) {
									endPublic = true;
								}
								if (beginPublic == true && endPublic == false && count == 1) {
									count++;
								} else if (beginPublic == true && endPublic == false && count == 2) {
									builder1.append(curLine);
								} else if (beginPublic == true && endPublic == true) {
									break;
								}
							}

							LOGGER.info("Cert Begin : " + beginPublic + " -- > Cert End : " + endPublic);
							bufferedReader2.close();
							if (beginPublic && endPublic) {
								isCertificate = true;
								pubKeyGen = certificateToKeyFile(publicKeyFile);
							} else {
								LOGGER.info("=============== file is not valid ==============");
								publicCertificate = "FILE NOT FOUND";
							}
						}

						boolean isPublicKey = false;
						if (isCertificate) {
							isPublicKey = publicKeyCheckByAES(pubKeyGen);
							if (isPublicKey == true) {
								publicCertificate = pubKeyGen;
							}
						} else {
							isPublicKey = publicKeyCheckByAES(builder1.toString());
							if (isPublicKey == true) {
								publicCertificate = builder1.toString();
							}
						}
						if (isPublicKey) {
							LOGGER.info("Public Key is Valid !");
						} else {
							LOGGER.info("=============== file is not valid ==============");
							publicCertificate = "FILE NOT FOUND";
						}

						if (beginPublic && endPublic) {
							;
						} else {
							LOGGER.info("=============== file is not valid ==============");
							publicCertificate = "FILE NOT FOUND";
						}
					} catch (IOException e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.info("Exception:" + ex.toString());
						publicCertificate = "FILE NOT FOUND";
					}
				} else {
					LOGGER.info("=============== file is not valid ==============");
					publicCertificate = "FILE NOT FOUND";
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			publicCertificate = "FILE NOT FOUND";
		}
		return publicCertificate;
	}

	public String checkCertificatePath(String path) {
		String contentType = null;
		boolean isCertificate = false;
		String certificate = "";
		File publicKey = new File(path);
		String publicCertificate = null;
		try {
			if (publicKey.length() > 0) {
				Tika tika = new Tika();
				try {
					contentType = tika.detect(publicKey);
				} catch (IOException e1) {
					LOGGER.error(e1);
					e1.printStackTrace();
				}
				if (contentType.equals("application/vnd.apple.keynote")
						|| contentType.equals("application/x-x509-ca-cert")
						|| contentType.equals("application/x-x509-cert; format=pem")
						|| contentType.equals("application/x-x509-cert")
						|| contentType.equals("application/x-x509-key; format=pem")
						|| contentType.equals("application/x-x509-user-cert")
						|| contentType.equals("application/pkix-cert") || contentType.equals("text/plain")) {
					BufferedReader bufferedReader = null;
					try {
						bufferedReader = new BufferedReader(new FileReader(publicKey));
						String curLine = null;
						boolean beginPublic = false;
						boolean endPublic = false;
						int count = 1;

						String pubKeyGen = null;
						StringBuilder builder1 = new StringBuilder();

						while ((curLine = bufferedReader.readLine()) != null) {
							if (curLine.equals("-----BEGIN PUBLIC KEY-----")) {
								beginPublic = true;
								count = 1;
							} else if (curLine.equals("-----END PUBLIC KEY-----")) {
								endPublic = true;
							}

							if (beginPublic == true && endPublic == false && count == 1) {
								count++;
							} else if (beginPublic == true && endPublic == false && count == 2) {
								builder1.append(curLine);
							} else if (beginPublic == true && endPublic == true) {
								break;
							}
						}
						LOGGER.info("Public Begin key ::  " + beginPublic + "Public  End Key ::" + endPublic);
						bufferedReader.close();

						if (builder1.length() <= 0) {
							LOGGER.info("PUBLIC KEY Not found!, checking for Certificate");
							BufferedReader bufferedReader2 = null;
							bufferedReader2 = new BufferedReader(new FileReader(publicKey));
							curLine = null;
							beginPublic = false;
							endPublic = false;
							count = 1;
							while ((curLine = bufferedReader2.readLine()) != null) {
								if (curLine.equals("-----BEGIN CERTIFICATE-----")) {
									beginPublic = true;
									count = 1;
								} else if (curLine.equals("-----END CERTIFICATE-----")) {
									endPublic = true;
								}
								if (beginPublic == true && endPublic == false && count == 1) {
									count++;
								} else if (beginPublic == true && endPublic == false && count == 2) {
									builder1.append(curLine);
								} else if (beginPublic == true && endPublic == true) {
									break;
								}
							}

							LOGGER.info(
									"Certificate Begin key : " + beginPublic + "  Certificate End Key : " + endPublic);
							bufferedReader2.close();
							if (beginPublic && endPublic) {
								certificate = builder1.toString();
								isCertificate = true;
								pubKeyGen = certificateToKeyFile(publicKey);
							} else {
								LOGGER.info("=============== file is not valid ==============");
								publicCertificate = "FILE NOT FOUND";
							}
						}

						boolean isPublicKey = false;
						if (isCertificate) {
							isPublicKey = publicKeyCheckByAES(pubKeyGen);
							if (isPublicKey == true) {
								publicCertificate = pubKeyGen;
							}
						} else {
							isPublicKey = publicKeyCheckByAES(certificate);
							if (isPublicKey == true) {
								publicCertificate = certificate;
							}
						}
						LOGGER.info("uatPublicCertificate : " + publicCertificate);
						if (isPublicKey) {
							LOGGER.info("Public Key is Valid !");
						} else {
							LOGGER.info("=============== file is not valid ==============");
							publicCertificate = "FILE NOT FOUND";
						}

						if (!beginPublic && !endPublic) {
							publicCertificate = "FILE NOT FOUND";
							LOGGER.info("=============== file is not valid ==============");
						}
					} catch (IOException e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.info("Exception:" + ex.toString());
						publicCertificate = "FILE NOT FOUND";
						LOGGER.info("=============== file is not valid ==============");
					}
				} else {
					LOGGER.info("=============== file is not valid ==============");
					publicCertificate = "FILE NOT FOUND";
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			publicCertificate = "FILE NOT FOUND";
			LOGGER.info("=============== file is not valid ==============");
		}
		return publicCertificate;
	}

	public String IXCJiraCreation(String description) {
		JSONObject jsonObject = null;
		String jiraKey = "";
		try {
			JSONObject project = new JSONObject();
			project.put("id", "10396");
			JSONObject assignee = new JSONObject();
			assignee.put("name", "APIBANKING");
			JSONObject issuetype = new JSONObject();
			issuetype.put("id", GwConstants.OUTBOUND_ISSUETYPE_JIRA);
			JSONArray labels = new JSONArray();
			labels.put("DP");
			JSONObject fields = new JSONObject();
			fields.put("project", project);
			fields.put("summary", "Developer Portal OutBound IXC Onboarding : ");
			fields.put("description", description);
			fields.put("assignee", assignee);
			fields.put("issuetype", issuetype);
			fields.put("labels", labels);
			JSONObject json = new JSONObject();
			json.put("fields", fields);
			LOGGER.info("JIRA Create Payload : " + json.toString());

			String str = null;
			String payloadStr = null;
			String clientStr1 = null;
			try {
				str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
				payloadStr = json.toString();
				clientStr1 = HttpClient.restCreateJira(str, payloadStr);
				LOGGER.info("JIRA Create Response : " + clientStr1);
			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error(ex.toString());
				return "";
			}
			jsonObject = new JSONObject(clientStr1);
			jiraKey = (String) jsonObject.get("key");
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
			return "";
		}
		return jiraKey;
	}

	public boolean createPrefsMongoDB(String bodyData, String bankAccNo, String operationName, String paymentModes,
			String jiraStatus, String jiraID) {

		boolean isSaved = false;
		URL verifyUrl = null;
		try {
			if (bankAccNo == null) {
				return false;
			}
			LOGGER.info("operationName : " + operationName);
			LOGGER.info("bankAccNo : " + bankAccNo);
			LOGGER.info("paymentModes : " + paymentModes);
			if (operationName == "intimation/MODEL-5" || operationName.equalsIgnoreCase("intimation/MODEL-5")
					|| operationName == "intimation/MODEL-7" || operationName.equalsIgnoreCase("intimation/MODEL-7")
					|| operationName == "credit_confirmation/MODEL-7"
					|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
				String[] paymentModeArr = paymentModes.split(",");
				for (Object str : paymentModeArr) {
					String paymentMode = str.toString();
					if (jiraStatus.equalsIgnoreCase("Go Live")) {
						verifyUrl = new URL(GwConstants.DIY_MONGO_PROD_MH + bankAccNo + "/" + operationName + "/"
								+ paymentMode + "/preferences");
					} else {
						verifyUrl = new URL(GwConstants.DIY_MONGO_UAT_MH + bankAccNo + "/" + operationName + "/"
								+ paymentMode + "/preferences");
					}
					isSaved = createPOST(bodyData, verifyUrl, jiraID);
				}
			} else if (operationName.equalsIgnoreCase("send-alert") || operationName == "send-alert") {
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences");
				}
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			} else if (operationName.equalsIgnoreCase("validation") || operationName.equalsIgnoreCase("receipt")) {
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences");
				}
				JSONObject json = new JSONObject(bodyData);
				json.put("prefix", bankAccNo);
				bodyData = json.toString();
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			} else {
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences");
				}
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isSaved;
	}

	public String getPrefsMongoDB(String bankAccNo, String operationName, String paymentModes) {

		String strresponse = null;
		URL verifyUrl = null;
		LOGGER.info("paymentModes : " + paymentModes);
		LOGGER.info("bankAccNo : " + bankAccNo);
		LOGGER.info("operationName : " + operationName);
		try {
			if (operationName == "intimation/MODEL-5" || operationName.equalsIgnoreCase("intimation/MODEL-5")
					|| operationName == "intimation/MODEL-7" || operationName.equalsIgnoreCase("intimation/MODEL-7")
					|| operationName == "credit_confirmation/MODEL-7"
					|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
				verifyUrl = new URL(GwConstants.DIY_MONGO_UAT_MH + bankAccNo + "/" + operationName + "/" + paymentModes
						+ "/preferences");
				strresponse = createGET(verifyUrl);
			} else if (operationName.equalsIgnoreCase("send-alert") || operationName == "send-alert") {
				verifyUrl = new URL(
						GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName + "/preferences");
				strresponse = createGET(verifyUrl);
			} else {
				verifyUrl = new URL(
						GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName + "/preferences");
				strresponse = createGET(verifyUrl);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public boolean createBasicDetailsMongo(String bodyData, String bankAccNo, String operationName, String paymentModes,
			String jiraStatus, String jiraID) {

		boolean isSaved = false;
		URL verifyUrl = null;
		try {
			if (bankAccNo == null) {
				return false;
			}
			LOGGER.info("bankAccNo/ClientCode : " + bankAccNo);
			if (operationName == "intimation/MODEL-5" || operationName.equalsIgnoreCase("intimation/MODEL-5")
					|| operationName == "intimation/MODEL-7" || operationName.equalsIgnoreCase("intimation/MODEL-7")
					|| operationName == "credit_confirmation/MODEL-7"
					|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
				LOGGER.info("paymentModes : " + paymentModes);
				String[] paymentModeArr = paymentModes.split(",");
				for (Object str : paymentModeArr) {
					String paymentMode = str.toString();
					if (jiraStatus.equalsIgnoreCase("Go Live")) {
						verifyUrl = new URL(GwConstants.DIY_MONGO_PROD_MH + bankAccNo + "/" + operationName + "/"
								+ paymentMode + "/preferences/basicdetails");
					} else {
						verifyUrl = new URL(GwConstants.DIY_MONGO_UAT_MH + bankAccNo + "/" + operationName + "/"
								+ paymentMode + "/preferences/basicdetails");
					}
					isSaved = createPOST(bodyData, verifyUrl, jiraID);
				}
			} else if (operationName.equalsIgnoreCase("send-alert") || operationName == "send-alert") {
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences/basicdetails");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences/basicdetails");
				}
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			} else {
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences/basicdetails");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
							+ "/preferences/basicdetails");
				}
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isSaved;
	}

	public String getBasicDetailsMongo(String bankAccNo, String operationName, String paymentModes) {

		String strresponse = null;
		URL verifyUrl = null;
		String paymentMode = null;
		try {
			LOGGER.info("bankAccNo/ClientCode : " + bankAccNo);
			if (operationName == "intimation/MODEL-5" || operationName.equalsIgnoreCase("intimation/MODEL-5")
					|| operationName == "intimation/MODEL-7" || operationName.equalsIgnoreCase("intimation/MODEL-7")
					|| operationName == "credit_confirmation/MODEL-7"
					|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
				String[] paymentModeArr = paymentModes.split(",");
				for (Object str : paymentModeArr) {
					paymentMode = str.toString();
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT_MH + bankAccNo + "/" + operationName + "/"
							+ paymentMode + "/preferences/basicdetails");
					strresponse = createGET(verifyUrl);
				}
			} else if (operationName.equalsIgnoreCase("send-alert") || operationName == "send-alert") {
				verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
						+ "/preferences/basicdetails");
				strresponse = createGET(verifyUrl);
			} else {
				verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + bankAccNo + "/" + operationName
						+ "/preferences/basicdetails");
				strresponse = createGET(verifyUrl);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public boolean createPrefsTrade(String bodyData, String operationName, String jiraStatus, String jiraID,
			String custID) {
		boolean isSaved = false;
		URL verifyUrl = null;
		try {
			if (custID == null) {
				return false;
			}
			LOGGER.info("operationName : " + operationName);
			LOGGER.info("custID : " + custID);
			String[] custIDArr = custID.split(",");
			for (Object str : custIDArr) {
				String customerID = str.toString();
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + customerID + "/" + operationName
							+ "/preferences");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/" + operationName
							+ "/preferences");
				}
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isSaved;
	}

	public String getPrefsTrade(String custID, String operationName) {
		String strresponse = null;
		URL verifyUrl = null;
		LOGGER.info("custID : " + custID);
		LOGGER.info("operationName : " + operationName);
		try {
			String[] custIDArr = custID.split(",");
			for (Object str : custIDArr) {
				String customerID = str.toString();
				verifyUrl = new URL(
						GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/" + operationName + "/preferences");
				strresponse = createGET(verifyUrl);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public boolean createBasicDetailsTrade(String bodyData, String operationName, String jiraStatus, String jiraID,
			String custID) {
		boolean isSaved = false;
		URL verifyUrl = null;
		try {
			if (custID == null) {
				return false;
			}
			String[] custIDArr = custID.split(",");
			for (Object str : custIDArr) {
				String customerID = str.toString();
				if (jiraStatus.equalsIgnoreCase("Go Live")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + customerID + "/" + operationName
							+ "/preferences/basicdetails");
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/" + operationName
							+ "/preferences/basicdetails");
				}
				isSaved = createPOST(bodyData, verifyUrl, jiraID);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isSaved;
	}

	public String getBasicDetailsTrade(String operationName, String custID) {
		String strresponse = null;
		URL verifyUrl = null;
		try {
			String[] custIDArr = custID.split(",");
			for (Object str : custIDArr) {
				String customerID = str.toString();
				verifyUrl = new URL(GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/" + operationName
						+ "/preferences/basicdetails");
				strresponse = createGET(verifyUrl);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return strresponse;
	}

	@POST
	@Path("/fieldMappingData")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fieldMappingData(@FormParam("username") String username, @FormParam("jiraID") String jiraID,
			@FormParam("apiName") String apiName) {

		String apiDocPath = null;
		String uatWebService = null;
		DIYStandardModel apiUserData = null;
		try {
			apiUserData = diyStandardDao.getApiNameData(apiName, jiraID);
			apiDocPath = apiUserData.getUatApiSpecDoc();
			uatWebService = apiUserData.getUatWebService();
			LOGGER.info("uatWebService : " + uatWebService);

			if (uatWebService == "application/json" || uatWebService.equalsIgnoreCase("application/json")
					|| uatWebService == "application/xml" || uatWebService.equalsIgnoreCase("application/xml")) {
				ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());
				Object obj = yamlReader.readValue(new File(apiDocPath), Object.class);
				ObjectMapper jsonWriter = new ObjectMapper();
				String json = jsonWriter.writeValueAsString(obj);
				return Response.ok(json).build();
			} else if (uatWebService == "application/soap+xml"
					|| uatWebService.equalsIgnoreCase("application/soap+xml")) {
				LOGGER.info("need to update SOAP ");
			} else {
				return Response.ok("{}").build();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		return Response.ok("{}").build();
	}

	@POST
	@Path("/fieldMappingUpdateData")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fieldMappingUpdateData(@FormParam("username") String username, @FormParam("jiraID") String jiraID,
			@FormParam("apiProduct") String apiProduct, @FormParam("apiParent") String apiParent,
			@FormParam("apiName") String apiName, @FormParam("requestMappingData") String requestMappingData,
			@FormParam("responseMappingData") String responseMappingData,
			@FormParam("customRequestFunctionsData") String customRequestFunctionsData,
			@FormParam("fieldsToEncrypt") String fieldsToEncrypt,
			@FormParam("customResponseFunctionsData") String customResponseFunctionsData,
			@FormParam("reqTagNames") String reqTagNames, @FormParam("resTagNames") String resTagNames,
			@FormParam("statusJSON") String statusJSON, @FormParam("requestPdfData") String requestPdfData,
			@FormParam("responsePdfData") String responsePdfData) {

		ResponseModel responseModel = new ResponseModel();
		JSONObject mongoUpdateData = null;
		boolean isUATUpdated = false;
		boolean isSaved = false;
		String uatMongo = null;
		String operationName = null;
		DIYGenericStandardModel genericDetails = null;
		DIYStandardModel apiUserData = null;
		DIYStandardModel apiJiraData = null;
		try {
			LOGGER.info("username : " + username);
			LOGGER.info("jiraID : " + jiraID);
			apiJiraData = diyStandardDao.getJIRAData(jiraID);
			apiProduct = apiJiraData.getApiProduct();
			if (apiProduct.equalsIgnoreCase("Collections")) {
				apiUserData = diyStandardDao.getApiNameData(apiName, jiraID);
				genericDetails = diyStandardDao.getGenericDetails(apiName);
				String jiraStatus = apiUserData.getJiraStatus();
				String bankAccNo = apiUserData.getBankAccNo();
				String clientCode = apiUserData.getClientCode();
				String paymentMode = apiUserData.getPaymentModes();

				JSONObject customRequestFunctionsJson = new JSONObject(customRequestFunctionsData);
				JSONObject customResponseFunctionsJson = new JSONObject(customResponseFunctionsData);
				JSONObject reqMappingData = new JSONObject(requestMappingData);
				JSONObject resMappingData = new JSONObject(responseMappingData);

				operationName = genericDetails.getOperationName();
				LOGGER.info("OPERATION NAME : " + operationName);

				if (apiName == "intimation/MODEL-5" || apiName.equalsIgnoreCase("intimation/MODEL-5")
						|| apiName == "intimation/MODEL-7" || apiName.equalsIgnoreCase("intimation/MODEL-7")
						|| apiName == "credit_confirmation/MODEL-7"
						|| apiName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
					LOGGER.info("Field Mapping : " + apiProduct + " : " + operationName + " : " + clientCode);
					String[] paymentModeArr = paymentMode.split(",");
					for (Object str : paymentModeArr) {
						String pMode = str.toString();
						uatMongo = getPrefsMongoDB(clientCode, operationName, pMode);
						JSONObject mongoDBData = new JSONObject(uatMongo);
						mongoUpdateData = mongoDBData;
						mongoUpdateData.put("requestObjectMapping", reqMappingData);
						mongoUpdateData.put("responseObjectMapping", resMappingData);
						mongoUpdateData.put("customRequestFunctions", customRequestFunctionsJson);
						mongoUpdateData.put("customResponseFunctions", customResponseFunctionsJson);
						JSONObject securityJson = mongoUpdateData.getJSONObject("security");
						JSONObject encryptionPrefsJson = securityJson.getJSONObject("encryptionPrefs");
						if (encryptionPrefsJson.has("fieldsToEncrypt")) {
							JSONArray fieldsToEncryptArr = new JSONArray(fieldsToEncrypt);
							encryptionPrefsJson.put("fieldsToEncrypt", fieldsToEncryptArr);
						}
						String updateMongoDB = mongoUpdateData.toString();

						isUATUpdated = createPrefsMongoDB(updateMongoDB, clientCode, operationName, paymentMode,
								jiraStatus, jiraID);

						if (isUATUpdated == true) {
							isSaved = diyStandardDao.updateMappingIXCOutBound(jiraID, requestMappingData,
									responseMappingData, updateMongoDB, updateMongoDB, apiName, reqTagNames,
									resTagNames, requestPdfData, responsePdfData);
							if (isSaved == true) {
								diyStandardDao.saveStatusJSON(statusJSON, jiraID);
								responseModel.setMessage("Mapping data saved successfully");
								responseModel.setStatus(true);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								responseModel.setMessage("Data not saved into DB");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							responseModel.setMessage("Mapping data saving failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				} else if (apiName.equalsIgnoreCase("Insta Alert")) {
					LOGGER.info("Field Mapping : " + apiName + " : " + operationName);
					LOGGER.info("bankAccNo : " + bankAccNo);
					uatMongo = getPrefsMongoDB(bankAccNo, operationName, paymentMode);
					JSONObject mongoDBData = new JSONObject(uatMongo);
					if (mongoDBData.has("/" + operationName)) {
						mongoUpdateData = mongoDBData.getJSONObject("/" + operationName);
						mongoUpdateData.put("requestObjectMapping", reqMappingData);
						mongoUpdateData.put("responseObjectMapping", resMappingData);
						mongoUpdateData.put("customRequestFunctions", customRequestFunctionsJson);
						mongoUpdateData.put("customResponseFunctions", customResponseFunctionsJson);
						JSONObject securityJson = mongoUpdateData.getJSONObject("security");
						JSONObject encryptionPrefsJson = securityJson.getJSONObject("encryptionPrefs");
						if (encryptionPrefsJson.has("fieldsToEncrypt")) {
							JSONArray fieldsToEncryptArr = new JSONArray(fieldsToEncrypt);
							encryptionPrefsJson.put("fieldsToEncrypt", fieldsToEncryptArr);
						}
						String updateMongoDB = mongoUpdateData.toString();

						isUATUpdated = createPrefsMongoDB(updateMongoDB, bankAccNo, operationName, paymentMode,
								jiraStatus, jiraID);

						if (isUATUpdated == true) {
							isSaved = diyStandardDao.updateMappingIXCOutBound(jiraID, requestMappingData,
									responseMappingData, updateMongoDB, updateMongoDB, apiName, reqTagNames,
									resTagNames, requestPdfData, responsePdfData);
							if (isSaved == true) {
								diyStandardDao.saveStatusJSON(statusJSON, jiraID);
								responseModel.setMessage("Mapping data saved successfully");
								responseModel.setStatus(true);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								responseModel.setMessage("Data not saved into DB");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							responseModel.setMessage("Mapping data saving failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					} else {
						LOGGER.info("GET MONGO OPERATION NOT FOUND : " + jiraID);
						responseModel.setMessage("GET MONGO OPERATION NOT FOUND FIELD MAPPING");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else {
					String apigeeEndPoint = null;
					if (apiName.equalsIgnoreCase("validation") || apiName.equalsIgnoreCase("receipt")
							|| operationName.equalsIgnoreCase("validation")
							|| operationName.equalsIgnoreCase("receipt")) {
						if (apiName.equals("validation")) {
							apigeeEndPoint = "https://uat-onprem-dmz-hybrid.icicibankltd.com/api/iSurePay/" + clientCode
									+ "/validation";
						} else if (apiName.equals("receipt")) {
							apigeeEndPoint = "https://uat-onprem-dmz-hybrid.icicibankltd.com/api/iSurePay/" + clientCode
									+ "/receipt";
						}
					}
					LOGGER.info("Field Mapping : " + operationName + " : " + apiName);
					uatMongo = getPrefsMongoDB(clientCode, operationName, paymentMode);
					JSONObject mongoDBData = new JSONObject(uatMongo);
					if (apiName.equalsIgnoreCase("validation") || apiName.equalsIgnoreCase("receipt")
							|| operationName.equalsIgnoreCase("validation")
							|| operationName.equalsIgnoreCase("receipt")) {
						if (mongoDBData.has("/" + clientCode + "/" + operationName)) {
							mongoUpdateData = mongoDBData.getJSONObject("/" + clientCode + "/" + operationName);
							mongoUpdateData.put("requestObjectMapping", reqMappingData);
							mongoUpdateData.put("responseObjectMapping", resMappingData);
							mongoUpdateData.put("customRequestFunctions", customRequestFunctionsJson);
							mongoUpdateData.put("customResponseFunctions", customResponseFunctionsJson);
							mongoUpdateData.put("apigeeEndpoint", apigeeEndPoint);
							LOGGER.info("prefix operationName : " + operationName);
							if (operationName.equals("validation") || operationName.equals("receipt")) {
								mongoUpdateData.put("prefix", clientCode);
								LOGGER.info("prefix DONE");
							}
							JSONObject securityJson = mongoUpdateData.getJSONObject("security");
							JSONObject encryptionPrefsJson = securityJson.getJSONObject("encryptionPrefs");
							if (encryptionPrefsJson.has("fieldsToEncrypt")) {
								JSONArray fieldsToEncryptArr = new JSONArray(fieldsToEncrypt);
								encryptionPrefsJson.put("fieldsToEncrypt", fieldsToEncryptArr);
							}

							String updateMongoDB = mongoUpdateData.toString();

							isUATUpdated = createPrefsMongoDB(updateMongoDB, clientCode, operationName, paymentMode,
									jiraStatus, jiraID);

							if (isUATUpdated == true) {
								isSaved = diyStandardDao.updateMappingIXCOutBound(jiraID, requestMappingData,
										responseMappingData, updateMongoDB, updateMongoDB, apiName, reqTagNames,
										resTagNames, requestPdfData, responsePdfData);
								if (isSaved == true) {
									diyStandardDao.saveStatusJSON(statusJSON, jiraID);
									responseModel.setMessage("Mapping data saved successfully");
									responseModel.setStatus(true);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									responseModel.setMessage("Data not saved into DB");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								}
							} else {
								responseModel.setMessage("Mapping data saving failed");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							LOGGER.info("GET MONGO OPERATION NOT FOUND : " + jiraID);
							responseModel.setMessage("GET MONGO OPERATION NOT FOUND FIELD MAPPING");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					} else {
						if (mongoDBData.has("/" + operationName)) {
							mongoUpdateData = mongoDBData.getJSONObject("/" + operationName);
							mongoUpdateData.put("requestObjectMapping", reqMappingData);
							mongoUpdateData.put("responseObjectMapping", resMappingData);
							mongoUpdateData.put("customRequestFunctions", customRequestFunctionsJson);
							mongoUpdateData.put("customResponseFunctions", customResponseFunctionsJson);
							mongoUpdateData.put("apigeeEndpoint", genericDetails.getEndpoint());
							JSONObject securityJson = mongoUpdateData.getJSONObject("security");
							JSONObject encryptionPrefsJson = securityJson.getJSONObject("encryptionPrefs");
							if (encryptionPrefsJson.has("fieldsToEncrypt")) {
								JSONArray fieldsToEncryptArr = new JSONArray(fieldsToEncrypt);
								encryptionPrefsJson.put("fieldsToEncrypt", fieldsToEncryptArr);
							}

							String updateMongoDB = mongoUpdateData.toString();

							isUATUpdated = createPrefsMongoDB(updateMongoDB, clientCode, operationName, paymentMode,
									jiraStatus, jiraID);

							if (isUATUpdated == true) {
								isSaved = diyStandardDao.updateMappingIXCOutBound(jiraID, requestMappingData,
										responseMappingData, updateMongoDB, updateMongoDB, apiName, reqTagNames,
										resTagNames, requestPdfData, responsePdfData);
								if (isSaved == true) {
									diyStandardDao.saveStatusJSON(statusJSON, jiraID);
									responseModel.setMessage("Mapping data saved successfully");
									responseModel.setStatus(true);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									responseModel.setMessage("Data not saved into DB");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								}
							} else {
								responseModel.setMessage("Mapping data saving failed");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							LOGGER.info("GET MONGO OPERATION NOT FOUND : " + jiraID);
							responseModel.setMessage("GET MONGO OPERATION NOT FOUND FIELD MAPPING");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				}
			} else if (apiProduct.equalsIgnoreCase("Payments")) {
				URL verifyUrl = null;
				boolean isKVMDone = false;
				String accessToken = null;
				String env = null;
				LOGGER.info("apiProduct : " + apiProduct);
				LOGGER.info("apiJiraData.getApiParent() : " + apiJiraData.getApiParent());
				LOGGER.info("apiJiraData.getJiraStatus() : " + apiJiraData.getJiraStatus());
				if (apiJiraData.getApiParent().equalsIgnoreCase("Transac Pro API")) {
					if (apiJiraData.getJiraStatus().equalsIgnoreCase("GO LIVE")) {
						env = "PROD";
						if (apiJiraData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
							accessToken = prodProxyApigeeToken();
							LOGGER.info(env + " ACCESS TOKEN --->  " + apiJiraData.getApplicationName() + " --> "
									+ accessToken);
						} else if (apiJiraData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
							accessToken = ixcAccessToken(env);
							LOGGER.info(env + " ACCESS TOKEN --->  " + apiJiraData.getApplicationName() + " --> "
									+ accessToken);
						}
					} else {
						env = "UAT";
						if (apiJiraData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
							accessToken = uatProxyApigeeToken();
							LOGGER.info(env + " ACCESS TOKEN --->  " + apiJiraData.getApplicationName() + " --> "
									+ accessToken);
						} else if (apiJiraData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
							accessToken = ixcAccessToken(env);
							LOGGER.info(env + " ACCESS TOKEN --->  " + apiJiraData.getApplicationName() + " --> "
									+ accessToken);
						}
					}
					LOGGER.info("apiJiraData.getIsReverted() : " + apiJiraData.getIsReverted());
					try {
						if (apiJiraData.getIsReverted() == false) {
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries");
							}
							JSONObject object1 = new JSONObject();
							LOGGER.info("TRANSACT PRO KVM Creation ENTRY-2");
							object1.put("name", apiJiraData.getClientCode() + "_Mapping_1");
							String requestTransformed = null;
							String responseTransformed = null;
							ObjectMapper mapper = new ObjectMapper();
							try {
								ObjectNode rootRequest = (ObjectNode) mapper.readTree(requestMappingData);
								updateEmptyValuesWithKeys(rootRequest);
								requestTransformed = mapper.writerWithDefaultPrettyPrinter()
										.writeValueAsString(rootRequest);
//								requestTransformed.replaceAll("\\\\n", "").replaceAll(arg0, arg1);
								LOGGER.info("requestTransformed : " + requestTransformed);
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("REQUEST Exception:" + ex.toString());
							}
							try {
								ObjectNode rootResponse = (ObjectNode) mapper.readTree(responseMappingData);
								updateEmptyValuesWithKeys(rootResponse);
								responseTransformed = mapper.writerWithDefaultPrettyPrinter()
										.writeValueAsString(rootResponse);
								LOGGER.info("responseTransformed : " + responseTransformed);
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("RESPONSE Exception:" + ex.toString());
							}

							JSONObject mongoData = new JSONObject();
							mongoData.put("requestObjectMapping", requestTransformed);
							mongoData.put("responseObjectMapping", responseTransformed);
							object1.put("value", mongoData.toString());
							LOGGER.info("ENTRY-2 KVM Creation REQUEST SAAS : " + object1.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object1.toString(), env, accessToken);
								LOGGER.info("ENTRY-2 Response INBOUND SAAS : " + kvmResponse);
								LOGGER.info("kvmResponse SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								LOGGER.info("kvmStatus SAAS : " + kvmStatus);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								isKVMDone = true;
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								isKVMDone = false;
							}
							LOGGER.info("FIELD MAPPING ENTRY 2 KVM DONE : " + isKVMDone);
							if (isKVMDone == true) {
								isSaved = diyStandardDao.updateMappingInBound(jiraID, requestMappingData,
										responseMappingData);
								if (isSaved == true) {
									boolean isReverted = jiraTransition("301", jiraID);
									jiraComment("JIRA Status Moved to UAT TESTING", jiraID);
									if (isReverted == true) {
										diyStandardDao.saveStatusJSON(statusJSON, jiraID);
										responseModel.setMessage("Mapping data saved successfully");
										responseModel.setStatus(true);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									} else {
										responseModel.setMessage("Jira Transition failed");
										responseModel.setStatus(false);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}
								} else {
									responseModel.setMessage("Mapping data saving failed");
									responseModel.setStatus(true);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								}
							} else {
								responseModel.setMessage("KVM ENTRY 2 Mapping failed");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries/"
												+ apiJiraData.getClientCode() + "_Mapping_1");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries/"
												+ apiJiraData.getClientCode() + "_Mapping_1");
							}
							JSONObject object1 = new JSONObject();
							LOGGER.info("TRANSACT PRO KVM Updation ENTRY-2");
							object1.put("name", apiJiraData.getClientCode() + "_Mapping_1");
							object1.put("name", apiJiraData.getClientCode() + "_Mapping_1");
							String requestTransformed = null;
							String responseTransformed = null;
							ObjectMapper mapper = new ObjectMapper();
							try {
								ObjectNode rootRequest = (ObjectNode) mapper.readTree(requestMappingData);
								updateEmptyValuesWithKeys(rootRequest);
								requestTransformed = mapper.writeValueAsString(rootRequest).replaceAll("\\\\", "")
										.replaceAll("[\\n\\r\\t]", "").replaceAll(" +", "")
										.replaceAll("(?<=[\\{,])\\s*n\\s*(?=\\\"|\\w)", "")
										.replaceAll("\"n}\"", "\"}\"");
								LOGGER.info("requestTransformed : " + requestTransformed);
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("REQUEST Exception:" + ex.toString());
							}
							try {
								ObjectNode rootResponse = (ObjectNode) mapper.readTree(responseMappingData);
								updateEmptyValuesWithKeys(rootResponse);
								responseTransformed = mapper.writeValueAsString(rootResponse).replaceAll("\\\\", "")
										.replaceAll("[\\n\\r\\t]", "").replaceAll(" +", "")
										.replaceAll("(?<=[\\{,])\\s*n\\s*(?=\\\"|\\w)", "")
										.replaceAll("\"n}\"", "\"}\"");
								LOGGER.info("responseTransformed : " + responseTransformed);
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("RESPONSE Exception:" + ex.toString());
							}
							JSONObject mongoData = new JSONObject();
							mongoData.put("requestObjectMapping", requestTransformed);
							mongoData.put("responseObjectMapping", responseTransformed);
							object1.put("value", mongoData.toString());
							LOGGER.info("ENTRY-2 KVM Updation REQUEST SAAS : " + object1.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object1.toString(), env, accessToken);
								LOGGER.info("ENTRY-2 Updation INBOUND SAAS : " + kvmResponse);
								LOGGER.info("kvmResponse SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								LOGGER.info("kvmStatus SAAS : " + kvmStatus);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								isKVMDone = true;
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								isKVMDone = false;
							}
							LOGGER.info("FIELD MAPPING ENTRY 2 KVM DONE : " + isKVMDone);
							if (isKVMDone == true) {
								isSaved = diyStandardDao.updateMappingInBound(jiraID, requestMappingData,
										responseMappingData);
								if (isSaved == true) {
									boolean isReverted = jiraTransition("301", jiraID);
									jiraComment("JIRA Status Moved to UAT TESTING", jiraID);
									if (isReverted == true) {
										diyStandardDao.saveStatusJSON(statusJSON, jiraID);
										responseModel.setMessage("Mapping data saved successfully");
										responseModel.setStatus(true);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									} else {
										responseModel.setMessage("Jira Transition failed");
										responseModel.setStatus(false);
										responseModel.setStatus_code(200);
										responseModel.setData(jiraID);
										return Response.ok(responseModel).build();
									}
								} else {
									responseModel.setMessage("Mapping data saving failed");
									responseModel.setStatus(true);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								}
							} else {
								responseModel.setMessage("KVM ENTRY 2 Mapping failed");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.info("Exception:" + ex.toString());
						responseModel.setMessage("KVM ENTRY 2 Mapping failed");
						responseModel.setStatus(true);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				apiUserData = diyStandardDao.getApiNameData(apiName, jiraID);
				genericDetails = diyStandardDao.getGenericDetails(apiName);
				String jiraStatus = apiUserData.getJiraStatus();
				String custID = apiUserData.getCustID();

				JSONObject customRequestFunctionsJson = new JSONObject(customRequestFunctionsData);
				JSONObject customResponseFunctionsJson = new JSONObject(customResponseFunctionsData);
				JSONObject resMappingData = new JSONObject(responseMappingData);
				operationName = genericDetails.getOperationName();
				LOGGER.info("OPERATION NAME : " + operationName);
				LOGGER.info("Field Mapping : " + apiName + " : " + operationName);
				uatMongo = getPrefsTrade(custID, operationName);
				LOGGER.info("TRADE UAT MONGO GET DATA : " + uatMongo);
				JSONObject mongoDBData = new JSONObject(uatMongo);
				try {
					if (mongoDBData.has("/" + operationName)) {
						mongoUpdateData = mongoDBData.getJSONObject("/" + operationName);
						String samplePacketDB = genericDetails.getMappingPacket();
						LOGGER.info("samplePacketDB : " + samplePacketDB);
						LOGGER.info("requestMappingData : " + requestMappingData);
						String finalReqMappingData = nestedJson(samplePacketDB, requestMappingData);
						JSONObject finalReqMappingJSON = new JSONObject(finalReqMappingData);
						LOGGER.info("finalReqMappingJSON : " + finalReqMappingJSON);
						mongoUpdateData.put("requestObjectMapping", finalReqMappingJSON);
						mongoUpdateData.put("responseObjectMapping", resMappingData);
						mongoUpdateData.put("customRequestFunctions", customRequestFunctionsJson);
						mongoUpdateData.put("customResponseFunctions", customResponseFunctionsJson);
						mongoUpdateData.put("apigeeEndpoint", genericDetails.getEndpoint());
						JSONObject securityJson = mongoUpdateData.getJSONObject("security");
						JSONObject encryptionPrefsJson = securityJson.getJSONObject("encryptionPrefs");
						if (encryptionPrefsJson.has("fieldsToEncrypt")) {
							JSONArray fieldsToEncryptArr = new JSONArray(fieldsToEncrypt);
							encryptionPrefsJson.put("fieldsToEncrypt", fieldsToEncryptArr);
						}
						String updateMongoDB = mongoUpdateData.toString();

						isUATUpdated = createPrefsTrade(updateMongoDB, operationName, jiraStatus, jiraID, custID);

						if (isUATUpdated == true) {
							isSaved = diyStandardDao.updateMappingIXCOutBound(jiraID, requestMappingData,
									responseMappingData, updateMongoDB, updateMongoDB, apiName, reqTagNames,
									resTagNames, requestPdfData, responsePdfData);
							if (isSaved == true) {
								diyStandardDao.saveStatusJSON(statusJSON, jiraID);
								responseModel.setMessage("Mapping data saved successfully");
								responseModel.setStatus(true);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								responseModel.setMessage("Data not saved into DB");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							responseModel.setMessage("Mapping data saving failed");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					} else {
						LOGGER.info("GET MONGO OPERATION NOT FOUND : " + jiraID);
						responseModel.setMessage("GET MONGO OPERATION NOT FOUND FIELD MAPPING");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} catch (Exception e) {
					StringWriter ex = new StringWriter();
					e.printStackTrace(new PrintWriter(ex));
					LOGGER.error("Exception:" + ex.toString());
				}
			} else {
				LOGGER.info("API PRODUCT NOT MATCHED : " + apiProduct);
				responseModel.setMessage("API PRODUCT NOT MATCHED FIELD MAPPING");
				responseModel.setStatus(false);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
			responseModel.setMessage("Something went wrong.Please contact admin");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	private String nestedJson(String packet1, String packet2) {
		String output = null;
		ObjectMapper mapper = new ObjectMapper();
		Map<String, String> result = null;
		try {
			JsonNode packet1Json = mapper.readTree(packet1);
			Map<String, String> packet2Map = mapper.readValue(packet2, new TypeReference<Map<String, String>>() {
			});

			// Step 1: Flatten PACKET1 by field name -> full path
			Map<String, String> fieldToPathMap = new HashMap<>();
			flattenJson(packet1Json, "", fieldToPathMap);

			// Step 2: Build result based on matching keys
			result = new LinkedHashMap<>();
			for (String alias : packet2Map.keySet()) {
				String fieldName = packet2Map.get(alias);
				if (fieldToPathMap.containsKey(fieldName)) {
					result.put(fieldToPathMap.get(fieldName), fieldName);
				}
			}
			// Print result
			output = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result);
			LOGGER.info("Flatten output : " + output);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return output;
	}

	// Flatten and filter based on updated nested JSON output
	private void flattenJson(JsonNode node, String currentPath, Map<String, String> map) {
		try {
			if (node.isObject()) {
				Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
				while (fields.hasNext()) {
					Map.Entry<String, JsonNode> entry = fields.next();
					String fieldName = entry.getKey();
					String newPath = currentPath.isEmpty() ? fieldName : fieldName;// currentPath + "#" + fieldName;
					map.put(fieldName, newPath); // map field name to its path
					flattenJson(entry.getValue(), newPath, map);
				}
			} else if (node.isArray()) {
				for (JsonNode item : node) {
					flattenJson(item, currentPath, map);
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
	}

//	   public static String nestedJson(String dbPacket, String newPacket) {
//	        String output = null;
//	        ObjectMapper mapper = new ObjectMapper();
//	        try {
//	            JsonNode dbPacketJson = mapper.readTree(dbPacket);
//	            JsonNode newPacketJson = mapper.readTree(newPacket);
//
//	            Map<String, String> dbFlatMap = new LinkedHashMap<>();
//	            Map<String, String> newFlatMap = new LinkedHashMap<>();
//
//	            flattenJson(dbPacketJson, "", dbFlatMap);
//	            flattenJson(newPacketJson, "", newFlatMap);
//
//	            Map<String, String> result = new LinkedHashMap<>();
//
//	            for (Map.Entry<String, String> newEntry : newFlatMap.entrySet()) {
//	                String newKey = newEntry.getKey();
//	                String newVal = newEntry.getValue();
//
//	                for (Map.Entry<String, String> dbEntry : dbFlatMap.entrySet()) {
//	                    if (newVal.equals(dbEntry.getValue())) {
//	                        String dbKey = dbEntry.getKey();
//	                        if (dbKey.startsWith("payload#")) {
//	                            dbKey = dbKey.substring("payload#".length());
//	                        }
//	                        result.put(newKey, dbKey);
//	                        break;
//	                    }
//	                }
//	            }
//	            output = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result);
//	        } catch (Exception e) {
//	            StringWriter ex = new StringWriter();
//	            e.printStackTrace(new PrintWriter(ex));
//	            System.err.println("Exception: " + ex.toString());
//	        }
//	        return output;
//	    }
//
//	    public static void flattenJson(JsonNode node, String currentPath, Map<String, String> map) {
//	        if (node.isObject()) {
//	            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
//	            while (fields.hasNext()) {
//	                Map.Entry<String, JsonNode> entry = fields.next();
//	                String fieldName = entry.getKey();
//	                String newPath = currentPath.isEmpty() ? fieldName : currentPath + "#" + fieldName;
//	                flattenJson(entry.getValue(), newPath, map);
//	            }
//	        } else if (node.isArray()) {
//	            int index = 0;
//	            for (JsonNode item : node) {
//	                String arrayPath = currentPath + "#" + index;
//	                flattenJson(item, arrayPath, map);
//	                index++;
//	            }
//	        } else {
//	            map.put(currentPath, node.asText());
//	        }
//	    }

	private void updateEmptyValuesWithKeys(ObjectNode node) {
		Iterator<Entry<String, com.fasterxml.jackson.databind.JsonNode>> fields = node.fields();
		while (fields.hasNext()) {
			Entry<String, com.fasterxml.jackson.databind.JsonNode> entry = fields.next();
			String key = entry.getKey();
			com.fasterxml.jackson.databind.JsonNode value = entry.getValue();

			if (value.isNull() || (value.isTextual() && value.asText().trim().isEmpty())) {
				node.put(key, key);
			}
		}
	}

	public void serverFileUpload(String filePath, String jiraDirPath, File file) {
		File fileUploadServer = null;
		try {
			FileOutputStream out = null;
			File newDirectory = new File(jiraDirPath);
			boolean isCreated = newDirectory.mkdirs();
			if (isCreated) {
			} else if (newDirectory.exists()) {
			} else {
//				LOGGER.info("1. Unable to create directory");
			}
			fileUploadServer = new File(filePath);
			isCreated = fileUploadServer.createNewFile();
			if (isCreated) {
			} else {
//				LOGGER.info("Unable to create new file");
			}
			int read = 0;
			byte[] bytes = new byte[1024];
			InputStream is = new FileInputStream(file);
			out = new FileOutputStream(new File(fileUploadServer.getCanonicalPath()));
			while ((read = is.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.flush();
			out.close();
			is.close();
			LOGGER.info("jiraDirPath : " + jiraDirPath);
			LOGGER.info("Jira File upload success : " + filePath);
		} catch (IOException e) {
			LOGGER.error("File uploading failed ..");
		}
	}

	@POST
	@Path("/fetchSITTestingData")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchSITTestingData(@FormParam("userName") String userName, @FormParam("jiraID") String jiraID,
			@FormParam("apiName") String apiName) {
		JSONArray productsList = null;
		try {
			productsList = diyStandardDao.fetchSITTestingDataList(jiraID, apiName);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return Response.ok(productsList.toString()).build();
	}

	@POST
	@Path("/fetchUATTestingData")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchUATTestingData(@FormParam("userName") String userName, @FormParam("jiraID") String jiraID,
			@FormParam("apiName") String apiName) {
		JSONArray productsList = null;
		try {
			productsList = diyStandardDao.fetchUATTestingDataList(jiraID, apiName);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return Response.ok(productsList.toString()).build();
	}

	@POST
	@Path("/fetchSITStatus")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchSITStatus(@FormParam("userName") String userName, @FormParam("jiraID") String jiraID) {

		JSONArray productsList = null;
		try {
			productsList = diyStandardDao.fetchSITStatusList(jiraID, userName);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return Response.ok(productsList.toString()).build();
	}

	@POST
	@Path("/fetchUATStatus")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchUATStatus(@FormParam("userName") String userName, @FormParam("jiraID") String jiraID) {

		JSONObject productsList = null;
		try {
			productsList = diyStandardDao.fetchUATStatusList(jiraID, userName);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return Response.ok(productsList.toString()).build();
	}

	@POST
	@Path("/ixcAccessToken")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String ixcAccessToken(@FormParam("environment") String environment) {

		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String bodyData = null;
		String jwtToken = null;
		String accessToken = null;
		try {
			if (environment.equals("UAT")) {
				jwtToken = IXCJWTToken.IXCToken();
			} else if (environment.equals("PROD")) {
				jwtToken = IXCJWTToken.IXCTokenProd();
			}
			try {

				bodyData = "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=" + jwtToken;
				verifyUrl = new URL("https://oauth2.googleapis.com/token");

				Proxy webProxy = new Proxy(Proxy.Type.HTTP,
						new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
				HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
				webProxyConnection.setDoOutput(true);
				webProxyConnection.setInstanceFollowRedirects(false);
				webProxyConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
				webProxyConnection.setRequestProperty("Accept", "application/json");
				webProxyConnection.setRequestMethod("POST");

				try (OutputStream os = webProxyConnection.getOutputStream()) {
					byte[] input = bodyData.getBytes("utf-8");
					os.write(input, 0, input.length);
				}

				int responseCode = webProxyConnection.getResponseCode();
				LOGGER.info("Access Token Response Code :: " + responseCode);
				if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
					BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
					String inputLine;
					response = new StringBuffer();
					while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
					}
					in.close();
					strresponse = response.toString();
					JSONObject jsonObject = new JSONObject(strresponse);
					if (jsonObject.has("access_token")) {
						accessToken = (String) jsonObject.get("access_token");
					}
				} else {
					LOGGER.info("GET request not worked");
				}

			} catch (Exception e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.error("Exception:" + ex.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return accessToken;
	}

	@POST
	@Path("/apigeeToken")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String apigeeToken(@FormParam("environment") String environment) {

		String accessToken = null;
		try {
			if (environment.equals("UAT") || environment == "UAT") {
				accessToken = uatProxyApigeeToken();
			} else {
				accessToken = prodProxyApigeeToken();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return accessToken;
	}

	@POST
	@Path("/onboardCustomerNTS")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public boolean onboardCustomerNTS(@FormParam("jiraID") String jiraID) {

		DIYStandardModel diyData = null;
		boolean isOnboarded = false;
		try {
			diyData = diyStandardDao.getJIRAData(jiraID);
			String custID = diyData.getCustID();
			String[] custIDArr = custID.split(",");
			for (int i = 0; i < custIDArr.length; i++) {
				JSONObject json = new JSONObject();
				json.put("CUSTID", custIDArr[i]);
				json.put("ISACTIVE_FLAG", "Y");
				json.put("CUSTNAME", diyData.getOrganizationName());
				String productType = null;
				if (diyData.getApiName().equalsIgnoreCase("StandBy/Letter of credit (eLC)")) {
					productType = "";
				} else if (diyData.getApiName().equalsIgnoreCase("LC ReverseFeed")) {
					productType = "lc-reverse-feed";
				} else if (diyData.getApiName().equalsIgnoreCase("Bank Guarantee ReverseFeed")) {
					productType = "bg-reverse-feed";
				} else if (diyData.getApiName().equalsIgnoreCase("Outward Remittance ReverseFeed")) {
					productType = "orm-reverse-feed";
				} else if (diyData.getApiName().equalsIgnoreCase("Bill Presentation Intimation")) {
					productType = "bill-presentation";
				} else if (diyData.getApiName().equalsIgnoreCase("Bill Payment ReverseFeed")) {
					productType = "bill-payment";
				} else if (diyData.getApiName().equalsIgnoreCase("Bill Acceptance ReverseFeed")) {
					productType = "bill-acceptance";
				}

//				LC ReverseFeed - lc-reverse-feed
//				Bank Guarantee ReverseFeed - bg-reverse-feed
//				Outward Remittance ReverseFeed - orm-reverse-feed
//				Bill Presentation Intimation - bill-presentation
//				Bill Payment ReverseFeed - bill-payment
//				Bill Acceptance ReverseFeed - bill-acceptance
				json.put("PRODUCT_TYPE", productType);
				LOGGER.info("UAT NTS REQUEST : " + json.toString());
				String ntsResponse = uatNTSCheck(json.toString());
				LOGGER.info("UAT NTS RESPONSE : " + ntsResponse);
				if (ntsResponse != null) {
					JSONObject responseJSON = new JSONObject(ntsResponse);
					if (responseJSON.has("STATUS")) {
						if (responseJSON.getString("STATUS").equalsIgnoreCase("Record inserted sucessfully")
								|| responseJSON.getString("STATUS").equalsIgnoreCase("Record updated sucessfully")) {
							isOnboarded = true;
						}
					}
				} else {
					LOGGER.info("UAT NTS RESPONSE NULL : " + ntsResponse);
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return isOnboarded;
	}

	public String uatNTSCheck(String bodyData) {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			verifyUrl = new URL("https://uat-onprem-dmz-hybrid.icicibankltd.com/trade/v1/customeronboarding");
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setInstanceFollowRedirects(false);
			webProxyConnection.setRequestProperty("apikey", "sKSDGHqwUTlG1i8dbTf4oTGxf7BC3vfwehwA1M7QJ2vGgFaM");
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("UAT NTS CHECK RESPONSE CODE : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception : " + ex.toString());
		}
		return strresponse;
	}

	public String prodNTSCheck(String bodyData) {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			verifyUrl = new URL("https://igateway.icicibankltd.com/trade/v1/customeronboarding");
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setInstanceFollowRedirects(false);
			webProxyConnection.setRequestProperty("apikey", "sKSDGHqwUTlG1i8dbTf4oTGxf7BC3vfwehwA1M7QJ2vGgFaM");
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("UAT NTS CHECK RESPONSE CODE : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception : " + ex.toString());
		}
		return strresponse;
	}

	public String uatProxyApigeeToken() {
		String strresponse = null;
		StringBuffer response = null;
		String apigeeToken = null;
		URL verifyUrl = null;
		String bodyData = null;
		try {
			String username = GwConstants.APIGEE_MACHINE_USERNAME;
			String password = GwConstants.APIGEE_MACHINE_PASSWORD;
			bodyData = "grant_type=password&response_type=token&username=" + username + "&password=" + password;
			verifyUrl = new URL("https://icici-bank-azure-test.login.apigee.com/oauth/token");
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setInstanceFollowRedirects(false);
			webProxyConnection.setRequestProperty("Authorization", "Basic ZWRnZWNsaTplZGdlY2xpc2VjcmV0");
			webProxyConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("UAT APIGEE Token : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
				JSONObject jsonObject = new JSONObject(strresponse);
				if (jsonObject.has("token_type")) {
//					String t1 = (String) jsonObject.get("token_type");
					String t2 = (String) jsonObject.get("access_token");
//					apigeeToken = t1 + " " + t2;
					apigeeToken = t2;
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception : " + ex.toString());
		}
		return apigeeToken;
	}

	public String prodProxyApigeeToken() {
		String strresponse = null;
		StringBuffer response = null;
		String apigeeToken = null;
		URL verifyUrl = null;
		String bodyData = null;
		try {
			String username = GwConstants.APIGEE_PROD_MACHINE_USERNAME;
			String password = GwConstants.APIGEE_PROD_MACHINE_PASSWORD;
			bodyData = "grant_type=password&response_type=token&username=" + username + "&password=" + password;
			verifyUrl = new URL("https://icici-bank-azure-prod.login.apigee.com/oauth/token");
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setInstanceFollowRedirects(false);
			webProxyConnection.setRequestProperty("Authorization", "Basic ZWRnZWNsaTplZGdlY2xpc2VjcmV0");
			webProxyConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("PROD APIGEE Token : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
				JSONObject jsonObject = new JSONObject(strresponse);
				if (jsonObject.has("token_type")) {
//					String t1 = (String) jsonObject.get("token_type");
					String t2 = (String) jsonObject.get("access_token");
//					apigeeToken = t1 + " " + t2;
					apigeeToken = t2;
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception : " + ex.toString());
		}
		return apigeeToken;
	}

	public String nginxUATToken() {
		String strresponse = null;
		StringBuffer response = null;
		String apigeeToken = null;
		URL verifyUrl = null;
		String bodyData = null;
		try {
			bodyData = "grant_type=client_credentials&client_id=" + GwConstants.NGINX_UAT_CLIENT_ID + "&client_secret="
					+ GwConstants.NGINX_UAT_CLIENT_SECRET;
			verifyUrl = new URL("https://apibankingonesandbox.icicibank.com/clientcredentials/GenerateAccessToken");
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setInstanceFollowRedirects(false);
			webProxyConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("NGINX Access Token UAT Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
				JSONObject jsonObject = new JSONObject(strresponse);
				if (jsonObject.has("access_token")) {
					apigeeToken = (String) jsonObject.get("access_token");
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return apigeeToken;
	}

	public String nginxPRODToken() {
		String strresponse = null;
		StringBuffer response = null;
		String apigeeToken = null;
		URL verifyUrl = null;
		String bodyData = null;
		try {
			bodyData = "grant_type=client_credentials&client_id=" + GwConstants.NGINX_PROD_CLIENT_ID + "&client_secret="
					+ GwConstants.NGINX_PROD_CLIENT_SECRET;
			verifyUrl = new URL("https://apicici.icicibankltd.com:8443/GenerateAccessToken");
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setInstanceFollowRedirects(false);
			webProxyConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("NGINX Access Token PROD Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
				JSONObject jsonObject = new JSONObject(strresponse);
				if (jsonObject.has("access_token")) {
					apigeeToken = (String) jsonObject.get("access_token");
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return apigeeToken;
	}

	public String prodProxyAPPCreation(URL verifyUrl, String bodyData) throws AppNameConflictException {

		String strresponse = null;
		StringBuffer response = null;

		try {
			String apigeeToken = prodProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("PROD APIGEE APP : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == HttpURLConnection.HTTP_CONFLICT) {
				LOGGER.info("POST request CONFLICT not worked");
				throw new AppNameConflictException("App Already exists in Apigee");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String uatProxyAPPCreation(URL verifyUrl, String bodyData) throws AppNameConflictException {
		String strresponse = null;
		StringBuffer response = null;
		try {
			String apigeeToken = uatProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("UAT APIGEE APP : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == HttpURLConnection.HTTP_CONFLICT) {
				LOGGER.info("POST request CONFLICT not worked");
				throw new AppNameConflictException("App Already exists in Apigee");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String createPRODProxyKVM(URL verifyUrl, String bodyData) {
		String strresponse = null;
		StringBuffer response = null;
		try {
			String apigeeToken = prodProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("PROD APIGEE KVM CREATE : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	public String createUATProxyKVM(URL verifyUrl, String bodyData) {
		String strresponse = null;
		StringBuffer response = null;
		try {
			String apigeeToken = uatProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("UAT APIGEE KVM CREATE : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	public String updateUATProxyKVM(String bodyData, URL verifyUrl) {
		String strresponse = null;
		StringBuffer response = null;
		try {
			String apigeeToken = uatProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("updateKVMAppDetailsRevamp26 UAT Response Code :: " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();

				// print result
				strresponse = response.toString();
				// LOGGER.info(response.toString());
			} else {
//			LOGGER.info("POST request not worked::"+responseCode);
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();

				// print result
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}

		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String updatePRODProxyKVM(String bodyData, URL verifyUrl) {
		String strresponse = null;
		StringBuffer response = null;
		try {
			String apigeeToken = prodProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("updateKVMAppDetailsRevamp26 PROD Response Code :: " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String getAPIGEEMerchantAppDetail(String email, String appName, String env) {
		String strresponse = null;
		URL verifyUrl = null;
		try {
			if (env.equals("UAT") || env == "UAT") {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/developers/"
						+ email + "/apps/" + appName);
				strresponse = getUATAppDetails(verifyUrl);
				LOGGER.info("UAT APP DETAIL verifyUrl : " + verifyUrl);
				LOGGER.info("UAT APP DETAIL  strresponse : " + strresponse);
			} else if (env.equals("PROD") || env == "PROD") {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-prod/developers/" + email
						+ "/apps/" + appName);
				strresponse = getPRODAppDetails(verifyUrl);
				LOGGER.info("PROD APP DETAIL verifyUrl : " + verifyUrl);
				LOGGER.info("PROD APP DETAIL  strresponse : " + strresponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String getUATAppDetails(URL verifyUrl) {
		StringBuffer response1 = null;
		String strresponse = null;
		try {
			String apigeeToken = uatProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setRequestMethod("GET");
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET UAT APP DETAILS APIGEE : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response1 = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response1.append(inputLine);
				}
				in.close();
				strresponse = response1.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response1 = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response1.append(inputLine);
				}
				in.close();
				String errResponse = response1.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			return null;
		}
		return strresponse;
	}

	public String getPRODAppDetails(URL verifyUrl) {
		StringBuffer response1 = null;
		String strresponse = null;
		try {
			String apigeeToken = prodProxyApigeeToken();
			Proxy webProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(GwConstants.UAT_PROXY_IP, 80));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setRequestMethod("GET");
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + apigeeToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET PROD APP DETAILS APIGEE : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response1 = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response1.append(inputLine);
				}
				in.close();
				strresponse = response1.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response1 = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response1.append(inputLine);
				}
				in.close();
				String errResponse = response1.toString();
				LOGGER.info("errresponse : " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			return null;
		}
		return strresponse;
	}

	public boolean outboundMongoDBCreation(DIYStandardModel diyModel) {
		boolean isAppCreationDone = false;
		String operationName = null;
		boolean isBasicSaved = false;
		boolean isPrefsSaved = false;
		boolean isFileSaved = false;
		DIYGenericStandardModel genericDetails = null;
		try {
			String apiProduct = diyModel.getApiProduct();
			String apiName = diyModel.getApiName();
			String jiraStatus = diyModel.getJiraStatus();
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			operationName = genericDetails.getOperationName();
			LOGGER.info("OPERATION NAME : " + operationName);
			if (operationName != null) {
				if (jiraStatus.equalsIgnoreCase("Field Mapping")) {
					JSONObject json = new JSONObject(diyModel.getMongoJSON());
					if (apiProduct.equalsIgnoreCase("Collections")) {
						LOGGER.info("Collections");
						if (apiName.equalsIgnoreCase("Insta Alert")) {
							LOGGER.info("ALERTS");
							if (diyModel.getIsReverted() == false) {
								if (json.getBoolean("isMongoBasicUATCreated") == false) {
									try {
										boolean isMongoBasicSaved = createBasicDetailsMongo(
												diyModel.getBasicDetailsMongo(), diyModel.getBankAccNo(), operationName,
												diyModel.getPaymentModes(), jiraStatus, diyModel.getJiraID());
										if (isMongoBasicSaved == true) {
											isBasicSaved = true;
											json.put("isMongoBasicUATCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.info("Exception:" + ex.toString());
									}
								} else {
									isBasicSaved = true;
								}
								if (json.getBoolean("isMongoPrefsUATCreated") == false) {
									try {
										boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getUatMongoDB(),
												diyModel.getBankAccNo(), operationName, diyModel.getPaymentModes(),
												jiraStatus, diyModel.getJiraID());
										if (isMongoUATSaved == true) {
											isPrefsSaved = true;
											json.put("isMongoPrefsUATCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													operationName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isPrefsSaved = true;
								}

								if (json.getBoolean("isMongoFileUATCreated") == false) {
									File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
									String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
									try {
										String url = null;
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD + "customers/" + diyModel.getBankAccNo()
													+ "/" + operationName + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT + "customers/" + diyModel.getBankAccNo()
													+ "/" + operationName + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFileUATCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isFileSaved = true;
								}
								LOGGER.info("BASIC MONGO CREATED UAT : " + isBasicSaved);
								LOGGER.info("PREFS MONGO CREATED UAT : " + isPrefsSaved);
								LOGGER.info("FILE MONGO CREATED UAT : " + isFileSaved);
								if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
									json.put("isAppCreationUATDone", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
									isAppCreationDone = true;
								}
							} else {
								if (json.getBoolean("isMongoPrefsUATUpdated") == false) {
									try {
										boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getUatMongoDB(),
												diyModel.getBankAccNo(), operationName, diyModel.getPaymentModes(),
												jiraStatus, diyModel.getJiraID());
										if (isMongoUATSaved == true) {
											isPrefsSaved = true;
											json.put("isMongoPrefsUATUpdated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													operationName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isPrefsSaved = true;
								}

								if (json.getBoolean("isMongoFileUATUpdated") == false) {
									File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
									String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
									try {
										String url = null;
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD + "customers/" + diyModel.getBankAccNo()
													+ "/" + operationName + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT + "customers/" + diyModel.getBankAccNo()
													+ "/" + operationName + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFileUATUpdated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isFileSaved = true;
								}

								LOGGER.info("PREFS MONGO UPDATED UAT : " + isPrefsSaved);
								LOGGER.info("FILE MONGO UPDATED UAT : " + isFileSaved);
								if (isPrefsSaved == true && isFileSaved == true) {
									json.put("isAppCreationUATDone", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
									isAppCreationDone = true;
								}
							}
						} else {
							LOGGER.info("OTHER THAN ALERTS");
							if (diyModel.getIsReverted() == false) {
								if (json.getBoolean("isMongoBasicUATCreated") == false) {
									try {
										boolean isMongoBasicSaved = createBasicDetailsMongo(
												diyModel.getBasicDetailsMongo(), diyModel.getClientCode(),
												operationName, diyModel.getPaymentModes(), jiraStatus,
												diyModel.getJiraID());
										if (isMongoBasicSaved == true) {
											isBasicSaved = true;
											json.put("isMongoBasicUATCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.info("Exception:" + ex.toString());
									}
								} else {
									isBasicSaved = true;
								}
								if (json.getBoolean("isMongoPrefsUATCreated") == false) {
									try {
										boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getUatMongoDB(),
												diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
												jiraStatus, diyModel.getJiraID());
										if (isMongoUATSaved == true) {
											isPrefsSaved = true;
											json.put("isMongoPrefsUATCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isPrefsSaved = true;
								}

								if (json.getBoolean("isMongoFileUATCreated") == false) {
									File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
									String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
									try {
										String url = null;
										if (apiName.equalsIgnoreCase("intimation/MODEL-5")
												|| apiName.equalsIgnoreCase("intimation/MODEL-7")
												|| apiName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
											String[] paymentModeArr = diyModel.getPaymentModes().split(",");
											for (Object str : paymentModeArr) {
												String paymentModeMH = str.toString();
												if (jiraStatus.equalsIgnoreCase("Go Live")) {
													url = GwConstants.DIY_MONGO_PROD_MH + diyModel.getClientCode() + "/"
															+ operationName + "/" + paymentModeMH
															+ "/preferences/specs";
												} else {
													url = GwConstants.DIY_MONGO_UAT_MH + diyModel.getClientCode() + "/"
															+ operationName + "/" + paymentModeMH
															+ "/preferences/specs";
												}
												boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
														uatApiSpecDocFile, uatAPISpecDocFileName,
														diyModel.getUatWebService());
												if (isMongoFileSaved == true) {
													isFileSaved = true;
													json.put("isMongoFileUATCreated", true);
													diyStandardDao.saveMongoDBStatus(json.toString(),
															diyModel.getJiraID(), apiName);
												}
											}
										} else {
											if (jiraStatus.equalsIgnoreCase("Go Live")) {
												url = GwConstants.DIY_MONGO_PROD + "customers/"
														+ diyModel.getClientCode() + "/" + operationName
														+ "/preferences/specs";
											} else {
												url = GwConstants.DIY_MONGO_UAT + "customers/"
														+ diyModel.getClientCode() + "/" + operationName
														+ "/preferences/specs";
											}
											boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
													uatApiSpecDocFile, uatAPISpecDocFileName,
													diyModel.getUatWebService());
											if (isMongoFileSaved == true) {
												isFileSaved = true;
												json.put("isMongoFileUATCreated", true);
												diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
														apiName);
											}
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isFileSaved = true;
								}
								LOGGER.info("BASIC MONGO CREATED UAT : " + isBasicSaved);
								LOGGER.info("PREFS MONGO CREATED UAT : " + isPrefsSaved);
								LOGGER.info("FILE MONGO CREATED UAT : " + isFileSaved);
								if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
									json.put("isAppCreationUATDone", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
									isAppCreationDone = true;
								}
							} else {
								if (json.getBoolean("isMongoPrefsUATUpdated") == false) {
									try {
										boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getUatMongoDB(),
												diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
												jiraStatus, diyModel.getJiraID());
										if (isMongoUATSaved == true) {
											isPrefsSaved = true;
											json.put("isMongoPrefsUATUpdated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isPrefsSaved = true;
								}

								if (json.getBoolean("isMongoFileUATUpdated") == false) {
									File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
									String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
									try {
										String url = null;
										if (apiName.equalsIgnoreCase("intimation/MODEL-5")
												|| apiName.equalsIgnoreCase("intimation/MODEL-7")
												|| apiName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
											String[] paymentModeArr = diyModel.getPaymentModes().split(",");
											for (Object str : paymentModeArr) {
												String paymentModeMH = str.toString();
												if (jiraStatus.equalsIgnoreCase("Go Live")) {
													url = GwConstants.DIY_MONGO_PROD_MH + diyModel.getClientCode() + "/"
															+ operationName + "/" + paymentModeMH
															+ "/preferences/specs";
												} else {
													url = GwConstants.DIY_MONGO_UAT_MH + diyModel.getClientCode() + "/"
															+ operationName + "/" + paymentModeMH
															+ "/preferences/specs";
												}
												boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
														uatApiSpecDocFile, uatAPISpecDocFileName,
														diyModel.getUatWebService());
												if (isMongoFileSaved == true) {
													isFileSaved = true;
													json.put("isMongoFileUATUpdated", true);
													diyStandardDao.saveMongoDBStatus(json.toString(),
															diyModel.getJiraID(), apiName);
												}
											}
										} else {
											if (jiraStatus.equalsIgnoreCase("Go Live")) {
												url = GwConstants.DIY_MONGO_PROD + "customers/"
														+ diyModel.getClientCode() + "/" + operationName
														+ "/preferences/specs";
											} else {
												url = GwConstants.DIY_MONGO_UAT + "customers/"
														+ diyModel.getClientCode() + "/" + operationName
														+ "/preferences/specs";
											}
											boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
													uatApiSpecDocFile, uatAPISpecDocFileName,
													diyModel.getUatWebService());
											if (isMongoFileSaved == true) {
												isFileSaved = true;
												json.put("isMongoFileUATUpdated", true);
												diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
														apiName);
											}
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								} else {
									isFileSaved = true;
								}
								LOGGER.info("PREFS MONGO UPDATED UAT : " + isPrefsSaved);
								LOGGER.info("FILE MONGO UPDATED UAT : " + isFileSaved);
								if (isPrefsSaved == true && isFileSaved == true) {
									json.put("isAppCreationUATDone", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
									isAppCreationDone = true;
								}
							}
						}
					} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
						LOGGER.info("Trade APIs");
						if (diyModel.getIsReverted() == false) {
							if (json.getBoolean("isMongoBasicUATCreated") == false) {
								try {
									boolean isMongoBasicSaved = createBasicDetailsTrade(diyModel.getBasicDetailsMongo(),
											operationName, jiraStatus, diyModel.getJiraID(), diyModel.getCustID());

									if (isMongoBasicSaved == true) {
										isBasicSaved = true;
										json.put("isMongoBasicUATCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.info("Exception:" + ex.toString());
								}
							} else {
								isBasicSaved = true;
							}
							if (json.getBoolean("isMongoPrefsUATCreated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsTrade(diyModel.getUatMongoDB(), operationName,
											jiraStatus, diyModel.getJiraID(), diyModel.getCustID());
//									String bodyData, String operationName, String jiraStatus, String jiraID,
//									String custID
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsUATCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}

							if (json.getBoolean("isMongoFileUATCreated") == false) {
								File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
								String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
								String custID = diyModel.getCustID();
								String[] custIDArr = custID.split(",");
								for (String customerID : custIDArr) {
									try {
										String url = null;
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD + "customers/" + customerID + "/"
													+ operationName + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/"
													+ operationName + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFileUATCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								}
							} else {
								isFileSaved = true;
							}
							LOGGER.info("BASIC MONGO CREATED UAT : " + isBasicSaved);
							LOGGER.info("PREFS MONGO CREATED UAT : " + isPrefsSaved);
							LOGGER.info("FILE MONGO CREATED UAT : " + isFileSaved);
							if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
								json.put("isAppCreationUATDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						} else {
							if (json.getBoolean("isMongoPrefsUATUpdated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsTrade(diyModel.getUatMongoDB(), operationName,
											jiraStatus, diyModel.getJiraID(), diyModel.getCustID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsUATUpdated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}

							if (json.getBoolean("isMongoFileUATUpdated") == false) {
								File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
								String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
								String custID = diyModel.getCustID();
								String[] custIDArr = custID.split(",");
								for (String customerID : custIDArr) {
									try {
										String url = null;
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD + "customers/" + customerID + "/"
													+ operationName + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/"
													+ operationName + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFileUATUpdated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								}
							} else {
								isFileSaved = true;
							}
							LOGGER.info("PREFS MONGO UPDATED UAT : " + isPrefsSaved);
							LOGGER.info("FILE MONGO UPDATED UAT : " + isFileSaved);
							if (isPrefsSaved == true && isFileSaved == true) {
								json.put("isAppCreationUATDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						}
					} else {
						LOGGER.info("PRODUCT NOT MATCHED : " + apiProduct);
					}
				} else if (jiraStatus.equalsIgnoreCase("GO LIVE")) {
					LOGGER.info("jiraStatus : " + jiraStatus);
					LOGGER.info("Client Code : " + diyModel.getClientCode());
					JSONObject json = new JSONObject(diyModel.getMongoJSON());
					if (apiProduct.equalsIgnoreCase("Collections")) {
						LOGGER.info("Collections");
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							if (json.getBoolean("isMongoBasicPRODCreated") == false) {
								try {
									boolean isMongoBasicSaved = createBasicDetailsMongo(diyModel.getBasicDetailsMongo(),
											diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
											jiraStatus, diyModel.getJiraID());
									if (isMongoBasicSaved == true) {
										isBasicSaved = true;
										json.put("isMongoBasicPRODCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.info("Exception:" + ex.toString());
								}
							} else {
								isBasicSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							if (json.getBoolean("isMongoPrefsPRODCreated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getProdMongoDB(),
											diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
											jiraStatus, diyModel.getJiraID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsPRODCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}
						}

						if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							if (json.getBoolean("isMongoPrefsPRODUpdated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getProdMongoDB(),
											diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
											jiraStatus, diyModel.getJiraID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsPRODUpdated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							if (json.getBoolean("isMongoFilePRODCreated") == false) {
								File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
								String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
								try {
									if (diyModel.getClientCode() == null) {
										return false;
									}
									String url = null;
									if (apiName.equalsIgnoreCase("intimation/MODEL-5")
											|| apiName.equalsIgnoreCase("intimation/MODEL-7")
											|| apiName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
										String[] paymentModeArr = diyModel.getPaymentModes().split(",");
										for (Object str : paymentModeArr) {
											String paymentModeMH = str.toString();
											if (jiraStatus.equalsIgnoreCase("Go Live")) {
												url = GwConstants.DIY_MONGO_PROD_MH + diyModel.getClientCode() + "/"
														+ operationName + "/" + paymentModeMH + "/preferences/specs";
											} else {
												url = GwConstants.DIY_MONGO_UAT_MH + diyModel.getClientCode() + "/"
														+ operationName + "/" + paymentModeMH + "/preferences/specs";
											}
											boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
													uatApiSpecDocFile, uatAPISpecDocFileName,
													diyModel.getUatWebService());
											if (isMongoFileSaved == true) {
												isFileSaved = true;
												json.put("isMongoFilePRODCreated", true);
												diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
														apiName);
											}
										}
									} else {
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD + "customers/" + diyModel.getClientCode()
													+ "/" + operationName + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT + "customers/" + diyModel.getClientCode()
													+ "/" + operationName + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFilePRODCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isFileSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							LOGGER.info("BASIC MONGO CREATED GO LIVE : " + isBasicSaved);
							LOGGER.info("PREFS MONGO CREATED GO LIVE : " + isPrefsSaved);
							LOGGER.info("FILE MONGO CREATED GO LIVE : " + isFileSaved);
							if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						} else if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							LOGGER.info("CHANGE EXISTING PREFS MONGO UPDATED GO LIVE : " + isPrefsSaved);
							if (isPrefsSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						}
					} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
						LOGGER.info("Trade APIs");
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							if (json.getBoolean("isMongoBasicPRODCreated") == false) {
								try {
									boolean isMongoBasicSaved = createBasicDetailsTrade(diyModel.getBasicDetailsMongo(),
											operationName, jiraStatus, diyModel.getJiraID(), diyModel.getCustID());

									if (isMongoBasicSaved == true) {
										isBasicSaved = true;
										json.put("isMongoBasicPRODCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.info("Exception:" + ex.toString());
								}
							} else {
								isBasicSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							if (json.getBoolean("isMongoPrefsPRODCreated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsTrade(diyModel.getProdMongoDB(), operationName,
											jiraStatus, diyModel.getJiraID(), diyModel.getCustID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsPRODCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							if (json.getBoolean("isMongoPrefsPRODUpdated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsTrade(diyModel.getProdMongoDB(), operationName,
											jiraStatus, diyModel.getJiraID(), diyModel.getCustID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsPRODUpdated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							if (json.getBoolean("isMongoFilePRODCreated") == false) {
								File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
								String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
								String custID = diyModel.getCustID();
								String[] custIDArr = custID.split(",");
								for (String customerID : custIDArr) {
									try {
										String url = null;
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD + "customers/" + customerID + "/"
													+ operationName + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/"
													+ operationName + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFilePRODCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									} catch (Exception e) {
										StringWriter ex = new StringWriter();
										e.printStackTrace(new PrintWriter(ex));
										LOGGER.error("Exception:" + ex.toString());
									}
								}
							} else {
								isFileSaved = true;
							}
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							LOGGER.info("BASIC MONGO CREATED UAT : " + isBasicSaved);
							LOGGER.info("PREFS MONGO CREATED UAT : " + isPrefsSaved);
							LOGGER.info("FILE MONGO CREATED UAT : " + isFileSaved);
							if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						} else if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							LOGGER.info("CHANGE EXISTING PREFS MONGO UPDATED GO LIVE : " + isPrefsSaved);
							if (isPrefsSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						}
					} else {
						LOGGER.info("PRODUCT NOT MATCHED : " + apiProduct);
					}
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isAppCreationDone;
	}

	public boolean changeExistingMongoDBPROD(DIYStandardModel diyModel) {
		boolean isAppCreationDone = false;
		String operationName = null;
		boolean isBasicSaved = false;
		boolean isPrefsSaved = false;
		boolean isFileSaved = false;
		DIYGenericStandardModel genericDetails = null;
		try {
			String apiProduct = diyModel.getApiProduct();
			String apiName = diyModel.getApiName();
			String jiraStatus = diyModel.getJiraStatus();
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			operationName = genericDetails.getOperationName();
			LOGGER.info("OPERATION NAME : " + operationName);
			if (operationName != null) {
				if (jiraStatus.equalsIgnoreCase("GO LIVE")) {
					LOGGER.info("jiraStatus : " + jiraStatus);
					JSONObject json = new JSONObject(diyModel.getMongoJSON());
					if (apiProduct.equalsIgnoreCase("Collections")) {
						LOGGER.info("Collections");
						if (json.getBoolean("isMongoBasicPRODCreated") == false) {
							try {
								boolean isMongoBasicSaved = createBasicDetailsMongo(diyModel.getBasicDetailsMongo(),
										diyModel.getClientCode(), operationName, diyModel.getPaymentModes(), jiraStatus,
										diyModel.getJiraID());
								if (isMongoBasicSaved == true) {
									isBasicSaved = true;
									json.put("isMongoBasicPRODCreated", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.info("Exception:" + ex.toString());
							}
						} else {
							isBasicSaved = true;
						}
						if (json.getBoolean("isMongoPrefsPRODCreated") == false) {
							try {
								boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getProdMongoDB(),
										diyModel.getClientCode(), operationName, diyModel.getPaymentModes(), jiraStatus,
										diyModel.getJiraID());
								if (isMongoUATSaved == true) {
									isPrefsSaved = true;
									json.put("isMongoPrefsPRODCreated", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("Exception:" + ex.toString());
							}
						} else {
							isPrefsSaved = true;
						}

						if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							if (json.getBoolean("isMongoPrefsPRODUpdated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getProdMongoDB(),
											diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
											jiraStatus, diyModel.getJiraID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsPRODUpdated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}
						}

						if (json.getBoolean("isMongoFilePRODCreated") == false) {
							File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
							String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
							try {
								String url = null;
								if (apiName.equalsIgnoreCase("intimation/MODEL-5")
										|| apiName.equalsIgnoreCase("intimation/MODEL-7")
										|| apiName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
									String[] paymentModeArr = diyModel.getPaymentModes().split(",");
									for (Object str : paymentModeArr) {
										String paymentModeMH = str.toString();
										if (jiraStatus.equalsIgnoreCase("Go Live")) {
											url = GwConstants.DIY_MONGO_PROD_MH + diyModel.getClientCode() + "/"
													+ operationName + "/" + paymentModeMH + "/preferences/specs";
										} else {
											url = GwConstants.DIY_MONGO_UAT_MH + diyModel.getClientCode() + "/"
													+ operationName + "/" + paymentModeMH + "/preferences/specs";
										}
										boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url,
												uatApiSpecDocFile, uatAPISpecDocFileName, diyModel.getUatWebService());
										if (isMongoFileSaved == true) {
											isFileSaved = true;
											json.put("isMongoFilePRODCreated", true);
											diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
													apiName);
										}
									}
								} else {
									if (jiraStatus.equalsIgnoreCase("Go Live")) {
										url = GwConstants.DIY_MONGO_PROD + "customers/" + diyModel.getClientCode() + "/"
												+ operationName + "/preferences/specs";
									} else {
										url = GwConstants.DIY_MONGO_UAT + "customers/" + diyModel.getClientCode() + "/"
												+ operationName + "/preferences/specs";
									}
									boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url, uatApiSpecDocFile,
											uatAPISpecDocFileName, diyModel.getUatWebService());
									if (isMongoFileSaved == true) {
										isFileSaved = true;
										json.put("isMongoFilePRODCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("Exception:" + ex.toString());
							}
						} else {
							isFileSaved = true;
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							LOGGER.info("BASIC MONGO CREATED GO LIVE : " + isBasicSaved);
							LOGGER.info("PREFS MONGO CREATED GO LIVE : " + isPrefsSaved);
							LOGGER.info("FILE MONGO CREATED GO LIVE : " + isFileSaved);
							if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						} else if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							LOGGER.info("CHANGE EXISTING PREFS MONGO UPDATED GO LIVE : " + isPrefsSaved);
							if (isPrefsSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						}
					} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
						LOGGER.info("Trade APIs");
						if (json.getBoolean("isMongoBasicPRODCreated") == false) {
							try {
								boolean isMongoBasicSaved = createBasicDetailsTrade(diyModel.getBasicDetailsMongo(),
										operationName, jiraStatus, diyModel.getJiraID(), diyModel.getCustID());

								if (isMongoBasicSaved == true) {
									isBasicSaved = true;
									json.put("isMongoBasicPRODCreated", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.info("Exception:" + ex.toString());
							}
						} else {
							isBasicSaved = true;
						}
						if (json.getBoolean("isMongoPrefsPRODCreated") == false) {
							try {
								boolean isMongoUATSaved = createPrefsTrade(diyModel.getProdMongoDB(), operationName,
										jiraStatus, diyModel.getJiraID(), diyModel.getCustID());
								if (isMongoUATSaved == true) {
									isPrefsSaved = true;
									json.put("isMongoPrefsPRODCreated", true);
									diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error("Exception:" + ex.toString());
							}
						} else {
							isPrefsSaved = true;
						}

						if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							if (json.getBoolean("isMongoPrefsPRODUpdated") == false) {
								try {
									boolean isMongoUATSaved = createPrefsMongoDB(diyModel.getProdMongoDB(),
											diyModel.getClientCode(), operationName, diyModel.getPaymentModes(),
											jiraStatus, diyModel.getJiraID());
									if (isMongoUATSaved == true) {
										isPrefsSaved = true;
										json.put("isMongoPrefsPRODUpdated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							} else {
								isPrefsSaved = true;
							}
						}

						if (json.getBoolean("isMongoFilePRODCreated") == false) {
							File uatApiSpecDocFile = new File(diyModel.getUatApiSpecDoc());
							String uatAPISpecDocFileName = uatApiSpecDocFile.getName();
							String custID = diyModel.getCustID();
							String[] custIDArr = custID.split(",");
							for (String customerID : custIDArr) {
								try {
									String url = null;
									if (jiraStatus.equalsIgnoreCase("Go Live")) {
										url = GwConstants.DIY_MONGO_PROD + "customers/" + customerID + "/"
												+ operationName + "/preferences/specs";
									} else {
										url = GwConstants.DIY_MONGO_UAT + "customers/" + customerID + "/"
												+ operationName + "/preferences/specs";
									}
									boolean isMongoFileSaved = HttpClient.postFileUploadMongoDB(url, uatApiSpecDocFile,
											uatAPISpecDocFileName, diyModel.getUatWebService());
									if (isMongoFileSaved == true) {
										isFileSaved = true;
										json.put("isMongoFilePRODCreated", true);
										diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(),
												apiName);
									}
								} catch (Exception e) {
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error("Exception:" + ex.toString());
								}
							}
						} else {
							isFileSaved = true;
						}
						if (diyModel.getJiraCategory().equalsIgnoreCase("NEW")) {
							LOGGER.info("BASIC MONGO CREATED UAT : " + isBasicSaved);
							LOGGER.info("PREFS MONGO CREATED UAT : " + isPrefsSaved);
							LOGGER.info("FILE MONGO CREATED UAT : " + isFileSaved);
							if (isBasicSaved == true && isPrefsSaved == true && isFileSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						} else if (diyModel.getJiraCategory().equalsIgnoreCase("EXISTING")) {
							LOGGER.info("CHANGE EXISTING PREFS MONGO UPDATED GO LIVE : " + isPrefsSaved);
							if (isPrefsSaved == true) {
								json.put("isAppCreationPRODDone", true);
								diyStandardDao.saveMongoDBStatus(json.toString(), diyModel.getJiraID(), apiName);
								isAppCreationDone = true;
							}
						}
					} else {
						LOGGER.info("PRODUCT NOT MATCHED : " + apiProduct);
					}
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isAppCreationDone;
	}

	public boolean inboundAppCreationUAT(DIYStandardModel diyData) {
		boolean isAppCreationUATDone = false;
		boolean isDeveloperDone = false;
		boolean isAPPDone = false;
		boolean isKVMDone = false;
		String ipIdentifier = null;
		String accessToken = null;
		String env = null;
		String getAppResponse = null;
		JSONObject getAppResponseJSON = null;
		URL verifyUrl = null;
		String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
		try {
			LOGGER.info("APPLICATION NAME : " + diyData.getApplicationName());
			LOGGER.info("JIRA STATUS : " + diyData.getJiraStatus());
			if (diyData.getJiraStatus().equalsIgnoreCase("GO LIVE")) {
				env = "PROD";
				if (diyData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
					accessToken = prodProxyApigeeToken();
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
				} else if (diyData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
					accessToken = ixcAccessToken(env);
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
				}
			} else {
				env = "UAT";
				if (diyData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
					accessToken = uatProxyApigeeToken();
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
				} else if (diyData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
					accessToken = ixcAccessToken(env);
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
				}
			}
			JSONObject json = new JSONObject(diyData.getAppJSON());
			if (diyData.getApiProduct().equals("Payments") && diyData.getApiType().equalsIgnoreCase("INBOUND")) {
				if (diyData.getApiParent().equals("Transac Pro API")) {
					String appName = diyData.getOrganizationName() + "_" + diyData.getJiraID();
					String appID = null;
					if (diyData.getIsReverted() == false) {
						if (json.getBoolean("isDeveloperUATCreated") == false) {
							JSONObject devPayload = new JSONObject();
							devPayload.put("firstName", diyData.getUserID());
							devPayload.put("lastName", ".");
							devPayload.put("userName", diyData.getUserEmail());
							devPayload.put("email", diyData.getUserEmail());
							JSONArray attrArr = new JSONArray();
							JSONObject attrJSON1 = new JSONObject();
							attrJSON1.put("name", "MINT_BILLING_TYPE");
							attrJSON1.put("value", "POSTPAID");
							JSONObject attrJSON2 = new JSONObject();
							attrJSON2.put("name", "ADMIN_EMAIL");
							attrJSON2.put("value", diyData.getUserEmail());
							JSONObject attrJSON3 = new JSONObject();
							attrJSON3.put("name", "MINT_DEVELOPER_LEGAL_NAME");
							attrJSON3.put("value", diyData.getUserEmail());
							attrArr.put(attrJSON1);
							attrArr.put(attrJSON2);
							attrArr.put(attrJSON3);
							devPayload.put("attributes", attrArr);
							try {
								isDeveloperDone = createIXCDeveloperSAAS(devPayload.toString(), env, accessToken);
								if (isDeveloperDone == true) {
									json.put("isDeveloperUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isDeveloperDone = true;
								}
							} catch (IXCDeveloperCreateConflictException e1) {
								LOGGER.error("Developer Already exists Conflict");
								json.put("isDeveloperUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isDeveloperDone = true;
							} catch (Exception e) {
								LOGGER.error("Developer Exception INBOUND");
							}
						} else {
							isDeveloperDone = true;
						}
						if (json.getBoolean("isAppUATCreated") == false) {
							JSONObject jsonObject = new JSONObject();
							appName = appName.replaceAll(" ", "_");
							jsonObject.put("name", appName);

							JSONArray jsonArray = new JSONArray();
							jsonArray.put("Payment-Model-III");
							jsonObject.put("apiProducts", jsonArray);

							JSONArray attrArray = new JSONArray();
							JSONObject jo0 = new JSONObject();
							jo0.put("name", "AGGRID");
							jo0.put("value", diyData.getClientCode());
							attrArray.put(jo0);
							JSONObject jo1 = new JSONObject();
							jo1.put("name", "encryptionKey");
							jo1.put("value", appName + "_pub_key");
							attrArray.put(jo1);
							JSONObject jo2 = new JSONObject();
							jo2.put("name", "ipIdentifier");
							jo2.put("value", appName + "_IP");
							attrArray.put(jo2);
							JSONObject jo3 = new JSONObject();
							jo3.put("name", "decryptionKey");
							jo3.put("value", "ICICI_PRIVATE_KEY");
							attrArray.put(jo3);
							JSONObject jo4 = new JSONObject();
							jo4.put("name", "enableEncryption");
							jo4.put("value", "true");
							attrArray.put(jo4);
							JSONObject jo5 = new JSONObject();
							jo5.put("name", "mode");
							jo5.put("value", "hybrid_generic");
							attrArray.put(jo5);
							JSONObject jo6 = new JSONObject();
							jo6.put("name", "spikeArrestThreshold");
							jo6.put("value", "30ps");
							attrArray.put(jo6);
							JSONObject jo7 = new JSONObject();
							jo7.put("name", "jiraId");
							jo7.put("value", diyData.getJiraID());
							attrArray.put(jo7);
							JSONObject jo8 = new JSONObject();
							jo8.put("name", "requestResponseMapping");
							jo8.put("value", diyData.getClientCode().trim() + "_Mapping_1");
							attrArray.put(jo8);
							jsonObject.put("attributes", attrArray);

							LOGGER.info(diyData.getApiParent() + " APP creation Payload : " + jsonObject.toString());

							try {
								String strresponse = createIXCAppSAAS(jsonObject.toString(), diyData.getUserEmail(),
										env, accessToken);
								LOGGER.info(
										diyData.getApiParent() + " APP creation Response : " + strresponse.toString());
								if (strresponse != null) {
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(strresponse);
									appID = po1.getString("appId");
									if (po1.has("credentials")) {
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
										isAppCreationUATDone = true;
									} else {
										LOGGER.info("App Key not Inserted");
									}
								}
							} catch (IXCAPPCreateConflictException e) {
								LOGGER.info(diyData.getApiParent() + " - APP Create Conflict Exception");
								try {
									String strresponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken,
											appName);
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(strresponse);
									appID = po1.getString("appId");
									appName = po1.getString("name");
									if (po1.has("credentials")) {
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag == true) {
										isAppCreationUATDone = true;
									}
								} catch (IXCAPPNotExistException e1) {
									LOGGER.error("IXCAPPNotExistException");
								} catch (Exception e2) {
									LOGGER.error("something went wrong !");
								}
							} catch (Exception e2) {
								LOGGER.error("something went wrong APP Creation");
							}
						} else {
							isAPPDone = true;
						}

						if (json.getBoolean("isKVMUATCreated") == false) {
							JSONObject object = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries");
							}
							LOGGER.info("TRANSACT PRO KVM Creation ENTRY-1");
							object.put("name", appName + "_pub_key");
							String publicCertificate = checkCertificatePath(diyData.getUatPublicKey());
							object.put("value", publicCertificate);
							LOGGER.info("ENTRY-1 KVM Creation REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("ENTRY-1 Response INBOUND SAAS : " + kvmResponse);
								LOGGER.info("kvmResponse SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								LOGGER.info("kvmStatus SAAS : " + kvmStatus);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								json.put("isKVMUATCreated", false);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = false;
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getUatIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						LOGGER.info("DEVELOPER DONE : " + isDeveloperDone);
						LOGGER.info("APP CREATION DONE : " + isAPPDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isDeveloperDone == true && isAPPDone == true && isKVMDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					} else { // revert true
						if (json.getBoolean("isKVMUATUpdated") == false) {
							JSONObject object = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries/"
												+ appName + "_pub_key");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries/"
												+ appName + "_pub_key");
							}

							try {
								getAppResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken, appName);
								if (getAppResponse != null) {
									getAppResponseJSON = new JSONObject(getAppResponse);
									if (getAppResponseJSON.has("attributes")) {
										JSONArray attrArr = getAppResponseJSON.getJSONArray("attributes");
										for (int i = 0; i < attrArr.length(); i++) {
											if (attrArr.getJSONObject(i).getString("name")
													.equalsIgnoreCase("ipIdentifier")) {
												ipIdentifier = attrArr.getJSONObject(i).getString("value");
											}
										}
									}
								}
							} catch (IXCAPPNotExistException e) {
								LOGGER.info("IXC APP Not Exist Exception : " + appName);
							}

							LOGGER.info("TRANSACT PRO KVM Updation ENTRY-1");
							object.put("name", appName + "_pub_key");
							String publicCertificate = checkCertificatePath(diyData.getUatPublicKey());
							object.put("value", publicCertificate);
							LOGGER.info("ENTRY-1 KVM Updation REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("ENTRY-1 Response INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMUATUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								json.put("isKVMUATUpdated", false);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = false;
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getUatIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					}
				} else if (diyData.getApiParent().equals("UPI Collect API")
						|| diyData.getApiParent().equals("UPI Mandate API")
						|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
					String appName = diyData.getOrganizationName() + "_" + diyData.getJiraID();
					if (diyData.getIsReverted() == false) {
						if (json.getBoolean("isDeveloperUATCreated") == false) {
							JSONObject devPayload = new JSONObject();
							devPayload.put("firstName", diyData.getUserID());
							devPayload.put("lastName", ".");
							devPayload.put("userName", diyData.getUserEmail());
							devPayload.put("email", diyData.getUserEmail());
							JSONArray attrArr = new JSONArray();
							JSONObject attrJSON1 = new JSONObject();
							attrJSON1.put("name", "MINT_BILLING_TYPE");
							attrJSON1.put("value", "POSTPAID");
							JSONObject attrJSON2 = new JSONObject();
							attrJSON2.put("name", "ADMIN_EMAIL");
							attrJSON2.put("value", diyData.getUserEmail());
							JSONObject attrJSON3 = new JSONObject();
							attrJSON3.put("name", "MINT_DEVELOPER_LEGAL_NAME");
							attrJSON3.put("value", diyData.getUserEmail());
							attrArr.put(attrJSON1);
							attrArr.put(attrJSON2);
							attrArr.put(attrJSON3);
							devPayload.put("attributes", attrArr);
							try {
								isDeveloperDone = createIXCDeveloperSAAS(devPayload.toString(), env, accessToken);
								if (isDeveloperDone == true) {
									json.put("isDeveloperUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isDeveloperDone = true;
								}
							} catch (IXCDeveloperCreateConflictException e1) {
								LOGGER.error("Developer Already exists Conflict");
								json.put("isDeveloperUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isDeveloperDone = true;
							} catch (Exception e) {
								LOGGER.error("Developer Creation Exceptiont");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isDeveloperDone = true;
						}
						if (json.getBoolean("isAppUATCreated") == false) {
							JSONObject jsonObject = new JSONObject();
							jsonObject.put("name", appName);
							JSONArray jsonArray = new JSONArray();
							jsonArray.put("EazyPay");
							jsonObject.put("apiProducts", jsonArray);
							JSONArray attrArray = new JSONArray();
							JSONObject jo1 = new JSONObject();
							jo1.put("name", "merchantId");
							jo1.put("value", diyData.getClientCode());
							attrArray.put(jo1);
							JSONObject jo2 = new JSONObject();
							jo2.put("name", "isResCodeEnabled");
							jo2.put("value", "No");
							attrArray.put(jo2);
							JSONObject jo3 = new JSONObject();
							jo3.put("name", "deleteResponseCode");
							jo3.put("value", "No");
							attrArray.put(jo3);
							JSONObject jo4 = new JSONObject();
							jo4.put("name", "jiraId");
							jo4.put("value", diyData.getJiraID());
							attrArray.put(jo4);
							jsonObject.put("attributes", attrArray);
							LOGGER.info("EAZYPAY APP Request JSON SAAS : " + jsonObject.toString());
							try {
								String appResponse = createIXCAppSAAS(jsonObject.toString(), diyData.getUserEmail(),
										env, accessToken);
								LOGGER.info("EAZYPAY APP Response INBOUND SAAS : " + appResponse);
								if (appResponse != null) {
									String appID = null;
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								}
							} catch (IXCAPPCreateConflictException e) {
								try {
									String appID = null;
									String appResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken,
											appName);
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								} catch (IXCAPPNotExistException e1) {
									LOGGER.error("IXC APP Not Exist Exception");
								} catch (Exception e2) {
									LOGGER.error("something went wrong !");
								}
							} catch (Exception e2) {
								LOGGER.error("IXC App creation Error");
							}
						} else {
							isAPPDone = true;
						}

						if (json.getBoolean("isKVMUATCreated") == false) {
							if (diyData.getApiParent().equalsIgnoreCase("UPI Collect API")
									|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
								JSONObject object = new JSONObject();
								if (env.equals("PROD") || env == "PROD") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/EAZYPAY_MERCHANT_CONFIG/entries");
								} else if (env.equals("UAT") || env == "UAT") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/EAZYPAY_MERCHANT_CONFIG/entries");
								}
								LOGGER.info("EazyPay 1.0 KVM Creation");
								object.put("name", diyData.getClientCode());
								JSONObject valueObj = new JSONObject();
								valueObj.put("spikeArrestThreshold", "199ps");
								valueObj.put("deleteResponseCode", "No");
								valueObj.put("sslType", "oneway");
								valueObj.put("validIpList", diyData.getUatIP());
								String publicCertificate = checkCertificatePath(diyData.getUatPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("callbackRoutingType", "singleUrl");
								valueObj.put("merchantName", diyData.getOrganizationName());
								valueObj.put("mode", "asymmetric_generic");
								valueObj.put("merchantHeaderKeys", "");
								valueObj.put("merchantHeaderValues", "");
								valueObj.put("callbackUrl", diyData.getUatServiceUrl());
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("sendAdditionalHeaders", "No");
								valueObj.put("isResCodeEnabled", "No");

								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 1.0 KVM Creation REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMUATCreated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = false;
								} catch (Exception e) {
									LOGGER.error("KVM Exception INBOUND SAAS");
								}
							}

							if (diyData.getApiParent().equalsIgnoreCase("UPI Mandate API")) {
								JSONObject object = new JSONObject();
								if (env.equals("PROD") || env == "PROD") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/EAZYPAY2_MERCHANT_CONFIG/entries");
								} else if (env.equals("UAT") || env == "UAT") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/EAZYPAY2_MERCHANT_CONFIG/entries");
								}
								LOGGER.info("EazyPay 2.0 KVM Creation");
								object.put("name", diyData.getClientCode());
								JSONObject valueObj = new JSONObject();
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("validIpList", diyData.getUatIP());
								String publicCertificate = checkCertificatePath(diyData.getUatPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("mode", "asymmetric_generic");
								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 2.0 KVM Creation REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("kvmResponse INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMUATCreated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								} catch (Exception e) {
									LOGGER.error("KVM Creation Exception SAAS");
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error(ex.toString());
								}
							}
						} else {
							isKVMDone = true;
						}
						LOGGER.info("DEVELOPER DONE : " + isDeveloperDone);
						LOGGER.info("APP CREATION DONE : " + isAPPDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isDeveloperDone == true && isAPPDone == true && isKVMDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					} else { // revert true
						if (json.getBoolean("isKVMUATUpdated") == false) {
							JSONObject object = new JSONObject();
							if (diyData.getApiParent().equalsIgnoreCase("UPI Collect API")
									|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
								if (env.equals("PROD") || env == "PROD") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/EAZYPAY_MERCHANT_CONFIG/entries/"
													+ diyData.getClientCode().trim());
								} else if (env.equals("UAT") || env == "UAT") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/EAZYPAY_MERCHANT_CONFIG/entries/"
													+ diyData.getClientCode().trim());
								}
								LOGGER.info("EazyPay 1.0 KVM Creation");
								object.put("name", diyData.getClientCode());
								JSONObject valueObj = new JSONObject();
								valueObj.put("spikeArrestThreshold", "199ps");
								valueObj.put("deleteResponseCode", "No");
								valueObj.put("sslType", "oneway");
								valueObj.put("validIpList", diyData.getUatIP());
								String publicCertificate = checkCertificatePath(diyData.getUatPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("callbackRoutingType", "singleUrl");
								valueObj.put("merchantName", diyData.getOrganizationName());
								valueObj.put("mode", "asymmetric_generic");
								valueObj.put("merchantHeaderKeys", "");
								valueObj.put("merchantHeaderValues", "");
								valueObj.put("callbackUrl", diyData.getUatServiceUrl());
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("sendAdditionalHeaders", "No");
								valueObj.put("isResCodeEnabled", "No");

								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 1.0 KVM UPDATION REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM UPDATION Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMUATUpdated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMUATUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = false;
								} catch (Exception e) {
									LOGGER.error("KVM Exception INBOUND SAAS");
								}
							}

							if (diyData.getApiParent().equalsIgnoreCase("UPI Mandate API")) {
								if (env.equals("PROD") || env == "PROD") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/EAZYPAY2_MERCHANT_CONFIG/entries/"
													+ diyData.getClientCode().trim());
								} else if (env.equals("UAT") || env == "UAT") {
									verifyUrl = new URL(
											"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/EAZYPAY2_MERCHANT_CONFIG/entries/"
													+ diyData.getClientCode().trim());
								}
								LOGGER.info("EazyPay 2.0 KVM Creation");
								object.put("name", diyData.getClientCode());
								JSONObject valueObj = new JSONObject();
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("validIpList", diyData.getUatIP());
								String publicCertificate = checkCertificatePath(diyData.getUatPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("mode", "asymmetric_generic");
								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 2.0 KVM UPDATION REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM UPDATION Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMUATUpdated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMUATUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								} catch (Exception e) {
									LOGGER.error("KVM UPDATION Exception SAAS");
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error(ex.toString());
								}
							}
						} else {
							isKVMDone = true;
						}
						LOGGER.info("KVM UPDATION DONE : " + isKVMDone);
						if (isKVMDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					}
				} else if (diyData.getApiParent().equals("CIB Payment API")
						|| diyData.getApiParent().equals("Account Service API")
						|| diyData.getApiParent().equals("Fixed Deposit API")) {
					String appName = diyData.getOrganizationName() + "_" + diyData.getJiraID();
					if (diyData.getIsReverted() == false) {
						if (json.getBoolean("isDeveloperUATCreated") == false) {
							JSONObject devPayload = new JSONObject();
							devPayload.put("firstName", diyData.getUserID());
							devPayload.put("lastName", ".");
							devPayload.put("userName", diyData.getUserEmail());
							devPayload.put("email", diyData.getUserEmail());
							JSONArray attrArr = new JSONArray();
							JSONObject attrJSON1 = new JSONObject();
							attrJSON1.put("name", "MINT_BILLING_TYPE");
							attrJSON1.put("value", "POSTPAID");
							JSONObject attrJSON2 = new JSONObject();
							attrJSON2.put("name", "ADMIN_EMAIL");
							attrJSON2.put("value", diyData.getUserEmail());
							JSONObject attrJSON3 = new JSONObject();
							attrJSON3.put("name", "MINT_DEVELOPER_LEGAL_NAME");
							attrJSON3.put("value", diyData.getUserEmail());
							attrArr.put(attrJSON1);
							attrArr.put(attrJSON2);
							attrArr.put(attrJSON3);
							devPayload.put("attributes", attrArr);
							try {
								isDeveloperDone = createIXCDeveloperSAAS(devPayload.toString(), env, accessToken);
								if (isDeveloperDone == true) {
									json.put("isDeveloperUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isDeveloperDone = true;
								}
							} catch (IXCDeveloperCreateConflictException e1) {
								LOGGER.error("Developer Already exists Conflict");
								json.put("isDeveloperUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isDeveloperDone = true;
							} catch (Exception e) {
								LOGGER.error("Developer Creation Exception");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isDeveloperDone = true;
						}

						if (json.getBoolean("isAppUATCreated") == false) {
							JSONObject jsonObject = new JSONObject();
							LOGGER.info("CIB APP JSON started");
							appName = appName.replaceAll("  ", "_").replaceAll(" ", "_");
							jsonObject.put("name", appName);
							JSONArray jsonArray = new JSONArray();
							jsonArray.put("CIB");
							jsonObject.put("apiProducts", jsonArray);
							JSONArray attrArray = new JSONArray();
							JSONObject jo1 = new JSONObject();
							jo1.put("name", "AGGRID");
							jo1.put("value", diyData.getClientCode());
							attrArray.put(jo1);
							JSONObject jo2 = new JSONObject();
							jo2.put("name", "AGGRName");
							String aggrName = null;
							int length = diyData.getOrganizationName().replaceAll(" ", "_").toCharArray().length;
							LOGGER.info("length : " + length);
							if (length > 10) {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").substring(0, 10)
										.toUpperCase();
							} else {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").toUpperCase();
							}
							jo2.put("value", aggrName);
							attrArray.put(jo2);
							JSONObject jo3 = new JSONObject();
							jo3.put("name", "decryptionKey");
							jo3.put("value", "ICICI_CIB_PRIVATE_KEY_NEW");
							attrArray.put(jo3);
							JSONObject jo4 = new JSONObject();
							jo4.put("name", "enableEncryption");
							jo4.put("value", "true");
							attrArray.put(jo4);
							JSONObject jo5 = new JSONObject();
							jo5.put("name", "enableIpWhitelisting");
							jo5.put("value", "true");
							attrArray.put(jo5);
							JSONObject jo6 = new JSONObject();
							jo6.put("name", "ipIdentifier");
							jo6.put("value", appName);
							attrArray.put(jo6);
							JSONObject jo7 = new JSONObject();
							jo7.put("name", "mode");
							jo7.put("value", "hybrid_generic");
							attrArray.put(jo7);
							JSONObject jo8 = new JSONObject();
							jo8.put("name", "spikeArrestThreshold");
							jo8.put("value", "30ps");
							attrArray.put(jo8);
							JSONObject jo9 = new JSONObject();
							jo9.put("name", "jiraId");
							jo9.put("value", diyData.getJiraID());
							attrArray.put(jo9);
							jsonObject.put("attributes", attrArray);
							LOGGER.info("CIB APP Request JSON SAAS : " + jsonObject.toString());
							try {
								String appResponse = createIXCAppSAAS(jsonObject.toString(), diyData.getUserEmail(),
										env, accessToken);
								LOGGER.info("CIB APP Response INBOUND SAAS : " + appResponse);
								if (appResponse != null) {
									String appID = null;
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								}
							} catch (IXCAPPCreateConflictException e) {
								try {
									String appID = null;
									String appResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken,
											appName);
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								} catch (IXCAPPNotExistException e1) {
									LOGGER.error("IXC APP Not Exist Exception");
								} catch (Exception e2) {
									LOGGER.error("something went wrong !");
								}
							} catch (Exception e2) {
								LOGGER.error("IXC App creation Error");
							}
						} else {
							isAPPDone = true;
						}

						if (json.getBoolean("isKVMUATCreated") == false) {
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/CIB_MERCHANT_CONFIG/entries");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/CIB_MERCHANT_CONFIG/entries");
							}
							JSONObject object = new JSONObject();
							LOGGER.info("CIB KVM STARTED");
							object.put("name", diyData.getClientCode());
							JSONObject valueObj = new JSONObject();
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("CIB KVM Creation REQUEST SAAS : " + object.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("CIB KVM RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getUatIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("DEVELOPER DONE : " + isDeveloperDone);
						LOGGER.info("APP CREATION DONE : " + isAPPDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isDeveloperDone == true && isAPPDone == true && isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					} else { // revert true
						if (json.getBoolean("isKVMUATUpdated") == false) {
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
												+ diyData.getClientCode().trim());
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
												+ diyData.getClientCode().trim());
							}
							try {
								getAppResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken, appName);
								if (getAppResponse != null) {
									getAppResponseJSON = new JSONObject(getAppResponse);
									if (getAppResponseJSON.has("attributes")) {
										JSONArray attrArr = getAppResponseJSON.getJSONArray("attributes");
										for (int i = 0; i < attrArr.length(); i++) {
											if (attrArr.getJSONObject(i).getString("name")
													.equalsIgnoreCase("ipIdentifier")) {
												ipIdentifier = attrArr.getJSONObject(i).getString("value");
											}
										}
									}
								}
							} catch (IXCAPPNotExistException e) {
								LOGGER.info("IXC APP Not Exist Exception : " + appName);
							}
							JSONObject object = new JSONObject();
							LOGGER.info("CIB KVM UPDATE STARTED");
							object.put("name", diyData.getClientCode());
							JSONObject valueObj = new JSONObject();
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("CIB KVM Updation REQUEST SAAS : " + object.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("CIB KVM Updation RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMUATUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Updation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getUatIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					}
				} else if (diyData.getApiParent().equals("Composite Payment API")) {
					String appName = diyData.getOrganizationName() + "_" + diyData.getJiraID();
					if (diyData.getIsReverted() == false) {
						if (json.getBoolean("isDeveloperUATCreated") == false) {
							JSONObject devPayload = new JSONObject();
							devPayload.put("firstName", diyData.getUserID());
							devPayload.put("lastName", ".");
							devPayload.put("userName", diyData.getUserEmail());
							devPayload.put("email", diyData.getUserEmail());
							JSONArray attrArr = new JSONArray();
							JSONObject attrJSON1 = new JSONObject();
							attrJSON1.put("name", "MINT_BILLING_TYPE");
							attrJSON1.put("value", "POSTPAID");
							JSONObject attrJSON2 = new JSONObject();
							attrJSON2.put("name", "ADMIN_EMAIL");
							attrJSON2.put("value", diyData.getUserEmail());
							JSONObject attrJSON3 = new JSONObject();
							attrJSON3.put("name", "MINT_DEVELOPER_LEGAL_NAME");
							attrJSON3.put("value", diyData.getUserEmail());
							attrArr.put(attrJSON1);
							attrArr.put(attrJSON2);
							attrArr.put(attrJSON3);
							devPayload.put("attributes", attrArr);
							try {
								isDeveloperDone = createIXCDeveloperSAAS(devPayload.toString(), env, accessToken);
								if (isDeveloperDone == true) {
									json.put("isDeveloperUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isDeveloperDone = true;
								}
							} catch (IXCDeveloperCreateConflictException e1) {
								LOGGER.error("Developer Already exists Conflict");
								json.put("isDeveloperUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isDeveloperDone = true;
							} catch (Exception e) {
								LOGGER.error("Developer Creation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isDeveloperDone = true;
						}

						if (json.getBoolean("isAppUATCreated") == false) {
							JSONObject jsonObject = new JSONObject();
							LOGGER.info("COMPOSITE_CIB APP JSON started");
							appName = appName.replaceAll("  ", "_").replaceAll(" ", "_");
							jsonObject.put("name", appName);
							JSONArray jsonArray = new JSONArray();
							jsonArray.put("Composite");
							jsonArray.put("CIB");
							jsonObject.put("apiProducts", jsonArray);
							JSONArray attrArray = new JSONArray();
							JSONObject jo1 = new JSONObject();
							jo1.put("name", "AGGRID");
							jo1.put("value", diyData.getClientCode());
							attrArray.put(jo1);
							JSONObject jo2 = new JSONObject();
							jo2.put("name", "AGGRName");
							String aggrName = null;
							int length = diyData.getOrganizationName().replaceAll(" ", "_").toCharArray().length;
							LOGGER.info("length : " + length);
							if (length > 10) {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").substring(0, 10)
										.toUpperCase();
							} else {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").toUpperCase();
							}
							jo2.put("value", aggrName);
							attrArray.put(jo2);
							JSONObject jo3 = new JSONObject();
							jo3.put("name", "decryptionKey");
							jo3.put("value", "ICICI_PRIVATE_KEY");
							attrArray.put(jo3);
							JSONObject jo10 = new JSONObject();
							jo10.put("name", "CheckCustomerInduced");
							jo10.put("value", "true");
							attrArray.put(jo10);
							JSONObject jo4 = new JSONObject();
							jo4.put("name", "enableEncryption");
							jo4.put("value", "true");
							attrArray.put(jo4);
							JSONObject jo7 = new JSONObject();
							jo7.put("name", "mode");
							jo7.put("value", "hybrid_generic");
							attrArray.put(jo7);
							JSONObject jo5 = new JSONObject();
							jo5.put("name", "sendCallback");
							jo5.put("value", "true");
							attrArray.put(jo5);
							JSONObject jo6 = new JSONObject();
							jo6.put("name", "ipIdentifier");
							jo6.put("value", diyData.getClientCode().trim() + "_CIB_Composite_ips");
							attrArray.put(jo6);
							JSONObject jo8 = new JSONObject();
							jo8.put("name", "KVM_MERCHANT_CONFIG_KEY");
							jo8.put("value", aggrName + "_" + timeStamp + "_KVM_CONFIG");
							attrArray.put(jo8);
							JSONObject jo9 = new JSONObject();
							jo9.put("name", "jiraId");
							jo9.put("value", diyData.getJiraID());
							attrArray.put(jo9);
							jsonObject.put("attributes", attrArray);
							LOGGER.info("COMPOSITE_CIB APP Request JSON SAAS : " + jsonObject.toString());

							try {
								String appResponse = createIXCAppSAAS(jsonObject.toString(), diyData.getUserEmail(),
										env, accessToken);
								LOGGER.info("COMPOSITE_CIB APP Response INBOUND SAAS : " + appResponse);
								if (appResponse != null) {
									String appID = null;
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								}
							} catch (IXCAPPCreateConflictException e) {
								try {
									String appID = null;
									String appResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken,
											appName);
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								} catch (IXCAPPNotExistException e1) {
									LOGGER.error("IXC APP Not Exist Exception");
								} catch (Exception e2) {
									LOGGER.error("something went wrong !");
								}
							} catch (Exception e2) {
								LOGGER.error("IXC App creation Error");
							}
						} else {
							isAPPDone = true;
						}

						if (json.getBoolean("isKVMUATCreated") == false) {
							// COMPOSITE KVM
							JSONObject objectComp = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries");
							}
							String aggrName = null;
							int length = diyData.getOrganizationName().replaceAll(" ", "_").toCharArray().length;
							if (length > 10) {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").substring(0, 10)
										.toUpperCase();
							} else {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").toUpperCase();
							}
							objectComp.put("name", aggrName + "_" + timeStamp + "_KVM_CONFIG");
							JSONObject valueObjComp = new JSONObject();
							valueObjComp.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							valueObjComp.put("mode", "hybrid_generic");
							valueObjComp.put("enableEncryption", "true");
							valueObjComp.put("isNodal", "false");
							valueObjComp.put("validIpList", diyData.getUatIP());
							valueObjComp.put("authenticationType", "apikey_ip");
							String valueObjStrComp = valueObjComp.toString();
							valueObjStrComp = valueObjStrComp.replaceAll("\"", "\"");
							objectComp.put("value", valueObjStrComp);
							LOGGER.info("COMPOSITE KVM Creation REQUEST SAAS : " + objectComp.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectComp.toString(), env,
										accessToken);
								LOGGER.info("COMPOSITE RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND DMZ");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}

							// CIB KVM
							JSONObject objectCIB = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/CIB_MERCHANT_CONFIG/entries");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/CIB_MERCHANT_CONFIG/entries");
							}
							LOGGER.info("CIB KVM STARTED");
							objectCIB.put("name", diyData.getClientCode());
							JSONObject valueObjCIB = new JSONObject();
							valueObjCIB.put("mode", "hybrid_generic");
							valueObjCIB.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							String valueObjStrCIB = valueObjCIB.toString();
							valueObjStrCIB = valueObjStrCIB.replaceAll("\"", "\"");
							objectCIB.put("value", valueObjStrCIB);
							LOGGER.info("CIB KVM Creation REQUEST SAAS : " + objectCIB.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectCIB.toString(), env, accessToken);
								LOGGER.info("CIB KVM RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}

						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getUatIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("DEVELOPER DONE : " + isDeveloperDone);
						LOGGER.info("APP CREATION DONE : " + isAPPDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isDeveloperDone == true && isAPPDone == true && isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					} else { // revert true

						try {
							getAppResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken, appName);
							if (getAppResponse != null) {
								getAppResponseJSON = new JSONObject(getAppResponse);
								if (getAppResponseJSON.has("attributes")) {
									JSONArray attrArr = getAppResponseJSON.getJSONArray("attributes");
									for (int i = 0; i < attrArr.length(); i++) {
										if (attrArr.getJSONObject(i).getString("name")
												.equalsIgnoreCase("ipIdentifier")) {
											ipIdentifier = attrArr.getJSONObject(i).getString("value");
										}
									}
								}
							}
						} catch (IXCAPPNotExistException e) {
							LOGGER.info("IXC APP Not Exist Exception : " + appName);
						}

						if (json.getBoolean("isKVMUATUpdated") == false) {
							// COMPOSITE KVM
							String kvmNameValue = null;
							String apigeeData = getAPIGEEMerchantAppDetail(diyData.getUserEmail(), appName, env);
							if (apigeeData != null) {
								JSONObject apigeeDataJSON = new JSONObject(apigeeData);
								JSONArray attrArray = apigeeDataJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArray.length(); i++) {
									JSONObject arrJSON = attrArray.getJSONObject(i);
									if (arrJSON.has("name")
											&& arrJSON.getString("name").equalsIgnoreCase("KVM_MERCHANT_CONFIG_KEY")) {
										kvmNameValue = arrJSON.getString("value");
										LOGGER.info("kvmNameValue : " + kvmNameValue);
									}
								}
							}
							JSONObject objectComp = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
												+ kvmNameValue);
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
												+ kvmNameValue);
							}
							objectComp.put("name", kvmNameValue);
							JSONObject valueObjComp = new JSONObject();
							valueObjComp.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							valueObjComp.put("mode", "hybrid_generic");
							valueObjComp.put("enableEncryption", "true");
							valueObjComp.put("isNodal", "false");
							valueObjComp.put("validIpList", diyData.getUatIP());
							valueObjComp.put("authenticationType", "apikey_ip");
							String valueObjStrComp = valueObjComp.toString();
							valueObjStrComp = valueObjStrComp.replaceAll("\"", "\"");
							objectComp.put("value", valueObjStrComp);
							LOGGER.info("COMPOSITE KVM UPDATION REQUEST SAAS : " + objectComp.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectComp.toString(), env,
										accessToken);
								LOGGER.info("COMPOSITE KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMUATUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND DMZ");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}

							// CIB KVM
							JSONObject objectCIB = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
												+ diyData.getClientCode().trim());
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
												+ diyData.getClientCode().trim());
							}
							LOGGER.info("CIB UPDATE KVM STARTED");
							objectCIB.put("name", diyData.getClientCode());
							JSONObject valueObjCIB = new JSONObject();
							valueObjCIB.put("mode", diyData.getUatEncMode());
							valueObjCIB.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							String valueObjStrCIB = valueObjCIB.toString();
							valueObjStrCIB = valueObjStrCIB.replaceAll("\"", "\"");
							objectCIB.put("value", valueObjStrCIB);
							LOGGER.info("CIB KVM UPDATION REQUEST SAAS : " + objectCIB.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectCIB.toString(), env, accessToken);
								LOGGER.info("CIB KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMUATUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getUatIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					}
				} else if (diyData.getApiParent().equals("Composite Validation API")) {
					String appName = diyData.getOrganizationName() + "_" + diyData.getJiraID();

					if (diyData.getIsReverted() == false) {
						if (json.getBoolean("isDeveloperUATCreated") == false) {
							JSONObject devPayload = new JSONObject();
							devPayload.put("firstName", diyData.getUserID());
							devPayload.put("lastName", ".");
							devPayload.put("userName", diyData.getUserEmail());
							devPayload.put("email", diyData.getUserEmail());
							JSONArray attrArr = new JSONArray();
							JSONObject attrJSON1 = new JSONObject();
							attrJSON1.put("name", "MINT_BILLING_TYPE");
							attrJSON1.put("value", "POSTPAID");
							JSONObject attrJSON2 = new JSONObject();
							attrJSON2.put("name", "ADMIN_EMAIL");
							attrJSON2.put("value", diyData.getUserEmail());
							JSONObject attrJSON3 = new JSONObject();
							attrJSON3.put("name", "MINT_DEVELOPER_LEGAL_NAME");
							attrJSON3.put("value", diyData.getUserEmail());
							attrArr.put(attrJSON1);
							attrArr.put(attrJSON2);
							attrArr.put(attrJSON3);
							devPayload.put("attributes", attrArr);
							try {
								isDeveloperDone = createIXCDeveloperSAAS(devPayload.toString(), env, accessToken);
								if (isDeveloperDone == true) {
									json.put("isDeveloperUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isDeveloperDone = true;
								}
							} catch (IXCDeveloperCreateConflictException e1) {
								LOGGER.error("Developer Already exists Conflict");
								json.put("isDeveloperUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isDeveloperDone = true;
							} catch (Exception e) {
								LOGGER.error("Developer Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isDeveloperDone = true;
						}

						if (json.getBoolean("isAppUATCreated") == false) {
							JSONObject jsonObject = new JSONObject();
							LOGGER.info("Composite APP JSON started");
							appName = appName.replaceAll(" ", "_").replaceAll(" ", "_");
							jsonObject.put("name", appName);
							JSONArray jsonArray = new JSONArray();
							jsonArray.put("Composite");
							jsonObject.put("apiProducts", jsonArray);
							JSONArray attrArray = new JSONArray();
							JSONObject jo1 = new JSONObject();
							jo1.put("name", "KVM_MERCHANT_CONFIG_KEY");
							String aggrName = null;
							int length = diyData.getOrganizationName().replaceAll(" ", "_").toCharArray().length;
							if (length > 10) {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").substring(0, 10)
										.toUpperCase();
							} else {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").toUpperCase();
							}
							LOGGER.info("KVM_CONFIG_NAME : " + aggrName + "_" + timeStamp + "_KVM_CONFIG");
							jo1.put("value", aggrName + "_" + timeStamp + "_KVM_CONFIG");
							attrArray.put(jo1);
							JSONObject jo12 = new JSONObject();
							jo12.put("name", "jiraId");
							jo12.put("value", diyData.getJiraID());
							attrArray.put(jo12);
							jsonObject.put("attributes", attrArray);
							LOGGER.info("Composite APP Request JSON SAAS : " + jsonObject.toString());
							try {
								String appResponse = createIXCAppSAAS(jsonObject.toString(), diyData.getUserEmail(),
										env, accessToken);
								LOGGER.info("Composite APP Response INBOUND SAAS : " + appResponse);
								if (appResponse != null) {
									String appID = null;
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								}
							} catch (IXCAPPCreateConflictException e) {
								try {
									String appID = null;
									String appResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken,
											appName);
									String consumerKey = null;
									String consumerSecret = null;
									long issuedAt = 0;
									long expiresAt = 0;
									JSONObject po1 = new JSONObject(appResponse);
									if (po1.has("credentials")) {
										appID = po1.getString("appId");
										JSONArray jarr = po1.getJSONArray("credentials");
										JSONObject po2 = jarr.getJSONObject(0);
										if (po2.has("consumerKey")) {
											consumerKey = po2.getString("consumerKey");
										}
										if (po2.has("consumerSecret")) {
											consumerSecret = po2.getString("consumerSecret");
										}
										if (po2.has("issuedAt")) {
											issuedAt = po2.getLong("issuedAt");
										}
										if (po2.has("expiresAt")) {
											expiresAt = po2.getLong("expiresAt");
										}
									}
									json.put("isAppUATCreated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isAPPDone = true;
									boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
											diyData.getJiraID(), appName, issuedAt, expiresAt);
									if (flag) {
										LOGGER.info("App Key Inserted");
									} else {
										LOGGER.info("App Key not Inserted");
									}
								} catch (IXCAPPNotExistException e1) {
									LOGGER.error("IXC APP Not Exist Exception");
								} catch (Exception e2) {
									LOGGER.error("something went wrong !");
								}
							} catch (Exception e2) {
								LOGGER.error("IXC App creation Error");
							}
						} else {
							isAPPDone = true;
						}

						if (json.getBoolean("isKVMUATCreated") == false) {
							JSONObject object = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries");
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries");
							}
							String aggrName = null;
							int length = diyData.getOrganizationName().replaceAll(" ", "").toCharArray().length;
							if (length > 10) {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").substring(0, 10)
										.toUpperCase();
							} else {
								aggrName = diyData.getOrganizationName().replaceAll(" ", "_").toUpperCase();
							}
							LOGGER.info("KVM_CONFIG_NAME : " + aggrName + "_" + timeStamp + "_KVM_CONFIG");
							object.put("name", aggrName + "_" + timeStamp + "_KVM_CONFIG");
							JSONObject valueObj = new JSONObject();
							valueObj.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("enableEncryption", "true");
							valueObj.put("isNodal", "false");
							valueObj.put("validIpList", diyData.getUatIP());
							valueObj.put("authenticationType", "apikey_ip");
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("Composite KVM Creation REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("Composite RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
								}
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}

						LOGGER.info("DEVELOPER DONE : " + isDeveloperDone);
						LOGGER.info("APP CREATION DONE : " + isAPPDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isDeveloperDone == true && isAPPDone == true && isKVMDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					} else {
						if (json.getBoolean("isKVMUATUpdated") == false) {
							String kvmNameValue = null;
							String apigeeData = getAPIGEEMerchantAppDetail(diyData.getUserEmail(), appName, env);
							if (apigeeData != null) {
								JSONObject apigeeDataJSON = new JSONObject(apigeeData);
								JSONArray attrArray = apigeeDataJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArray.length(); i++) {
									JSONObject arrJSON = attrArray.getJSONObject(i);
									if (arrJSON.has("name")
											&& arrJSON.getString("name").equalsIgnoreCase("KVM_MERCHANT_CONFIG_KEY")) {
										kvmNameValue = arrJSON.getString("value");
										LOGGER.info("kvmNameValue : " + kvmNameValue);
									}
								}
							}
							JSONObject object = new JSONObject();
							if (env.equals("PROD") || env == "PROD") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
												+ kvmNameValue);
							} else if (env.equals("UAT") || env == "UAT") {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
												+ kvmNameValue);
							}
							object.put("name", kvmNameValue);
							JSONObject valueObj = new JSONObject();
							valueObj.put("publicKey", checkCertificatePath(diyData.getUatPublicKey()));
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("enableEncryption", "true");
							valueObj.put("isNodal", "false");
							valueObj.put("validIpList", diyData.getUatIP());
							valueObj.put("authenticationType", "apikey_ip");
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("Composite KVM UPDATION REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("Composite KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
								}
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Updation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}

						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isKVMDone == true) {
							json.put("isAppCreationUATDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationUATDone = true;
						}
					}
				}
			} else if (diyData.getApiProduct().equals("Trade APIs")
					&& diyData.getApiType().equalsIgnoreCase("INBOUND")) {
				String appName = diyData.getOrganizationName() + "_" + diyData.getJiraID();
				// APIGEE HYBRID DMZ
				if (diyData.getIsReverted() == false) {
					if (json.getBoolean("isDeveloperUATCreated") == false) {
						JSONObject devPayload = new JSONObject();
						devPayload.put("firstName", diyData.getUserID());
						devPayload.put("lastName", ".");
						devPayload.put("userName", diyData.getUserEmail());
						devPayload.put("email", diyData.getUserEmail());
						try {
							isDeveloperDone = createIXCDeveloperDMZ(devPayload.toString(), env, accessToken);
							if (isDeveloperDone == true) {
								json.put("isDeveloperUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isDeveloperDone = true;
							}
						} catch (IXCDeveloperCreateConflictException e1) {
							LOGGER.error("Developer Already exists Conflict");
							json.put("isDeveloperUATCreated", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isDeveloperDone = true;
						} catch (Exception e) {
							LOGGER.error("Developer Exception INBOUND");
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(ex.toString());
						}
					}

					if (json.getBoolean("isAppUATCreated") == false) {
						JSONObject payload = new JSONObject();
						JSONArray jsonArr = new JSONArray();
						jsonArr.put(diyData.getGatewayProduct().trim());
						payload.put("name", appName);
						payload.put("apiProducts", jsonArr);
						try {
							String appResponse = createIXCAppDMZ(payload.toString(), diyData.getUserEmail(), env,
									accessToken);
							LOGGER.info("appResponse INBOUND DMZ : " + appResponse);
							if (appResponse != null) {
								String appID = null;
								String consumerKey = null;
								String consumerSecret = null;
								long issuedAt = 0;
								long expiresAt = 0;
								JSONObject po1 = new JSONObject(appResponse);
								if (po1.has("credentials")) {
									appID = po1.getString("appId");
									JSONArray jarr = po1.getJSONArray("credentials");
									JSONObject po2 = jarr.getJSONObject(0);
									if (po2.has("consumerKey")) {
										consumerKey = po2.getString("consumerKey");
									}
									if (po2.has("consumerSecret")) {
										consumerSecret = po2.getString("consumerSecret");
									}
									if (po2.has("issuedAt")) {
										issuedAt = po2.getLong("issuedAt");
									}
									if (po2.has("expiresAt")) {
										expiresAt = po2.getLong("expiresAt");
									}
								}
								json.put("isAppUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isAPPDone = true;
								boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
										diyData.getJiraID(), appName, issuedAt, expiresAt);
								if (flag) {
									LOGGER.info("App Key Inserted");
								} else {
									LOGGER.info("App Key not Inserted");
								}
							}
						} catch (IXCAPPCreateConflictException e) {
							try {
								String appID = null;
								String appResponse = getIXCAppDMZ(diyData.getUserEmail(), env, accessToken, appName);
								String consumerKey = null;
								String consumerSecret = null;
								long issuedAt = 0;
								long expiresAt = 0;
								JSONObject po1 = new JSONObject(appResponse);
								if (po1.has("credentials")) {
									appID = po1.getString("appId");
									JSONArray jarr = po1.getJSONArray("credentials");
									JSONObject po2 = jarr.getJSONObject(0);
									if (po2.has("consumerKey")) {
										consumerKey = po2.getString("consumerKey");
									}
									if (po2.has("consumerSecret")) {
										consumerSecret = po2.getString("consumerSecret");
									}
									if (po2.has("issuedAt")) {
										issuedAt = po2.getLong("issuedAt");
									}
									if (po2.has("expiresAt")) {
										expiresAt = po2.getLong("expiresAt");
									}
								}
								json.put("isAppUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isAPPDone = true;
								boolean flag = diyStandardDao.saveApiKeyUAT(consumerKey, consumerSecret, appID,
										diyData.getJiraID(), appName, issuedAt, expiresAt);
								if (flag) {
									LOGGER.info("App Key Inserted");
								} else {
									LOGGER.info("App Key not Inserted");
								}
							} catch (IXCAPPNotExistException e1) {
								LOGGER.error("IXC APP Not Exist Exception");
							} catch (Exception e2) {
								LOGGER.error("something went wrong !");
							}
						} catch (Exception e2) {
							LOGGER.error("IXC App creation Error");
						}
					}

					if (json.getBoolean("isKVMUATCreated") == false) {
						JSONObject ips = new JSONObject();
						ips.put("name", appName);
						ips.put("value", diyData.getUatIP());
						LOGGER.info("TRADE KVM Creation Request INBOUND : " + ips.toString());
						try {
							String kvmResponse = createIXCKVMDMZ(ips.toString(), env, accessToken, diyData);
							LOGGER.info("TRADE KVM Creation Response INBOUND : " + kvmResponse);
							JSONObject kvmStatus = new JSONObject(kvmResponse);
							if (kvmStatus.has("name")) {
								LOGGER.info("KVM Success");
								json.put("isKVMUATCreated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							}
						} catch (IXCKVMEntryConflictException e) {
							LOGGER.error("TRADE KVM already exists INBOUND");
							json.put("isKVMUATCreated", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isKVMDone = true;
						} catch (Exception e) {
							LOGGER.error("TRADE KVM Exception INBOUND");
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(ex.toString());
						}
					}

					if (isDeveloperDone == true && isAPPDone == true && isKVMDone == true) {
						isAppCreationUATDone = true;
						json.put("isAppCreationUATDone", true);
						diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
						isAppCreationUATDone = true;
					}
				} else {
					if (json.getBoolean("isKVMUATUpdated") == false) {
						JSONObject ips = new JSONObject();
						ips.put("name", appName);
						ips.put("value", diyData.getUatIP());
						LOGGER.info("TRADE KVM Updation Request INBOUND : " + ips.toString());
						try {
							String kvmResponse = updateIXCKVMDMZ(ips.toString(), env, accessToken, diyData);
							LOGGER.info("TRADE KVM Updation Response INBOUND : " + kvmResponse);
							JSONObject kvmStatus = new JSONObject(kvmResponse);
							if (kvmStatus.has("name")) {
								LOGGER.info("KVM Success");
								json.put("isKVMUATUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							}
						} catch (IXCKVMEntryConflictException e) {
							LOGGER.error("TRADE KVM already exists INBOUND");
							json.put("isKVMUATUpdated", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isKVMDone = true;
						} catch (Exception e) {
							LOGGER.error("TRADE KVM Exception INBOUND");
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(ex.toString());
						}
					}

					if (isKVMDone == true) {
						isAppCreationUATDone = true;
						json.put("isAppCreationUATDone", true);
						diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
						isAppCreationUATDone = true;
					}
				}
			} else {
				LOGGER.info("PRODUCT NOT MATCHED : " + diyData.getApiProduct());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isAppCreationUATDone;
	}

	public boolean inboundKVMUpdationUAT(DIYStandardModel diyData) {
		boolean isAppCreationPRODDone = false;
		boolean isKVMDone = false;
		String accessToken = null;
		String env = null;
		URL verifyUrl = null;
		String appName = null;
		JSONObject getAppJSON = null;
		String appResponse = null;
		String pubKeyIdentifier = null;
		String merchnatID = null;
		String ipIdentifier = null;
		String kvmConfigName = null;
		String aggrID = null;
		try {
			LOGGER.info("APPLICATION NAME : " + diyData.getApplicationName());
			LOGGER.info("JIRA STATUS : " + diyData.getJiraStatus());
			if (diyData.getJiraStatus().equalsIgnoreCase("GO LIVE")) {
				env = "UAT";
				if (diyData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
					appName = diyData.getAppname();
					LOGGER.info(env + " APP NAME --->  " + diyData.getAppname());
//					accessToken = prodProxyApigeeToken();
					accessToken = uatProxyApigeeToken();
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
					try {
						appResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken, appName);
					} catch (IXCAPPNotExistException e) {
						LOGGER.info("IXC APP Not Exist Exception : " + appName);
						return isAppCreationPRODDone;
					}
				} else if (diyData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
					appName = diyData.getAppname();
					LOGGER.info(env + " APP NAME --->  " + diyData.getAppname());
					accessToken = ixcAccessToken(env);
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
					try {
						appResponse = getIXCAppDMZ(diyData.getUserEmail(), env, accessToken, appName);
					} catch (IXCAPPNotExistException e) {
						LOGGER.info("IXC APP Not Exist Exception : " + appName);
						return isAppCreationPRODDone;
					}
				}
				String consumerKey = null;
				String consumerSecret = null;
				String appID = null;
				long issuedAt = 0;
				long expiresAt = 0;
				getAppJSON = new JSONObject(appResponse);
				if (getAppJSON.has("credentials")) {
					appID = getAppJSON.getString("appId");
					JSONArray jarr = getAppJSON.getJSONArray("credentials");
					JSONObject po2 = jarr.getJSONObject(0);
					if (po2.has("consumerKey")) {
						consumerKey = po2.getString("consumerKey");
					}
					if (po2.has("consumerSecret")) {
						consumerSecret = po2.getString("consumerSecret");
					}
					if (po2.has("issuedAt")) {
						issuedAt = po2.getLong("issuedAt");
					}
					if (po2.has("expiresAt")) {
						expiresAt = po2.getLong("expiresAt");
					}
				}
				boolean flag = diyStandardDao.saveApiKeyPROD(consumerKey, consumerSecret, appID, diyData.getJiraID(),
						appName, issuedAt, expiresAt);
				if (flag) {
					LOGGER.info("App Key Inserted");
				} else {
					LOGGER.info("App Key not Inserted");
				}
			}
			JSONObject json = new JSONObject(diyData.getAppJSON());
			if (diyData.getJiraCategory().equalsIgnoreCase("EXISTING")) {
				if (diyData.getApiProduct().equals("Payments") && diyData.getApiType().equalsIgnoreCase("INBOUND")) {
					if (diyData.getApiParent().equals("Transac Pro API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							JSONObject object = new JSONObject();
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("encryptionKey")) {
										pubKeyIdentifier = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("ipIdentifier")) {
										ipIdentifier = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries/"
											+ pubKeyIdentifier);
							LOGGER.info("TRANSACT PRO KVM Updation ENTRY-1");
							object.put("name", pubKeyIdentifier);
							String publicCertificate = checkCertificatePath(diyData.getProdPublicKey());
							object.put("value", publicCertificate);
							LOGGER.info("ENTRY-1 KVM Updation REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("ENTRY-1 Response INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								json.put("isKVMPRODUpdated", false);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = false;
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getProdIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("UPI Collect API")
							|| diyData.getApiParent().equals("UPI Mandate API")
							|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							JSONObject object = new JSONObject();
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("merchantId")) {
										merchnatID = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							if (diyData.getApiParent().equalsIgnoreCase("UPI Collect API")
									|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/EAZYPAY_MERCHANT_CONFIG/entries/"
												+ merchnatID);
								LOGGER.info("EazyPay 1.0 KVM Creation");
								object.put("name", merchnatID);
								JSONObject valueObj = new JSONObject();
								valueObj.put("spikeArrestThreshold", "199ps");
								valueObj.put("deleteResponseCode", "No");
								valueObj.put("sslType", "oneway");
								valueObj.put("validIpList", diyData.getProdIP());
								String publicCertificate = checkCertificatePath(diyData.getProdPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("callbackRoutingType", "singleUrl");
								valueObj.put("merchantName", diyData.getOrganizationName());
								valueObj.put("mode", "asymmetric_generic");
								valueObj.put("merchantHeaderKeys", "");
								valueObj.put("merchantHeaderValues", "");
								valueObj.put("callbackUrl",
										Optional.ofNullable(diyData.getProdServiceUrl()).orElse(""));
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("sendAdditionalHeaders", "No");
								valueObj.put("isResCodeEnabled", "No");

								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 1.0 KVM UPDATION REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM UPDATION Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMPRODUpdated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = false;
								} catch (Exception e) {
									LOGGER.error("KVM Exception INBOUND SAAS");
								}
							}

							if (diyData.getApiParent().equalsIgnoreCase("UPI Mandate API")) {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/EAZYPAY2_MERCHANT_CONFIG/entries/"
												+ merchnatID);
								LOGGER.info("EazyPay 2.0 KVM Creation");
								object.put("name", merchnatID);
								JSONObject valueObj = new JSONObject();
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("validIpList", diyData.getProdIP());
								String publicCertificate = checkCertificatePath(diyData.getProdPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("mode", "asymmetric_generic");
								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 2.0 KVM UPDATION REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM UPDATION Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMPRODUpdated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								} catch (Exception e) {
									LOGGER.error("KVM UPDATION Exception SAAS");
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error(ex.toString());
								}
							}
						} else {
							isKVMDone = true;
						}
						LOGGER.info("KVM UPDATION DONE : " + isKVMDone);
						if (isKVMDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("CIB Payment API")
							|| diyData.getApiParent().equals("Account Service API")
							|| diyData.getApiParent().equals("Fixed Deposit API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							JSONObject object = new JSONObject();
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("AGGRID")) {
										aggrID = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("ipIdentifier")) {
										ipIdentifier = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
											+ aggrID);
							LOGGER.info("CIB KVM UPDATE STARTED");
							object.put("name", aggrID);
							JSONObject valueObj = new JSONObject();
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("CIB KVM Updation REQUEST SAAS : " + object.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("CIB KVM Updation RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Updation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getProdIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("Composite Payment API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {

							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("AGGRID")) {
										aggrID = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("ipIdentifier")) {
										ipIdentifier = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name")
											.equalsIgnoreCase("KVM_MERCHANT_CONFIG_KEY")) {
										kvmConfigName = attrArr.getJSONObject(i).getString("value");
									}
								}
							}

							// COMPOSITE KVM
							JSONObject objectComp = new JSONObject();
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
											+ kvmConfigName);
							objectComp.put("name", kvmConfigName);
							JSONObject valueObjComp = new JSONObject();
							valueObjComp.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							valueObjComp.put("mode", "hybrid_generic");
							valueObjComp.put("enableEncryption", "true");
							valueObjComp.put("isNodal", "false");
							valueObjComp.put("validIpList", diyData.getProdIP());
							valueObjComp.put("authenticationType", "apikey_ip");
							String valueObjStrComp = valueObjComp.toString();
							valueObjStrComp = valueObjStrComp.replaceAll("\"", "\"");
							objectComp.put("value", valueObjStrComp);
							LOGGER.info("COMPOSITE KVM UPDATION REQUEST SAAS : " + objectComp.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectComp.toString(), env,
										accessToken);
								LOGGER.info("COMPOSITE KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND DMZ");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}

							// CIB KVM
							JSONObject objectCIB = new JSONObject();
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
											+ aggrID);
							LOGGER.info("CIB UPDATE KVM STARTED");
							objectCIB.put("name", aggrID);
							JSONObject valueObjCIB = new JSONObject();
							valueObjCIB.put("mode", diyData.getUatEncMode());
							valueObjCIB.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							String valueObjStrCIB = valueObjCIB.toString();
							valueObjStrCIB = valueObjStrCIB.replaceAll("\"", "\"");
							objectCIB.put("value", valueObjStrCIB);
							LOGGER.info("CIB KVM UPDATION REQUEST SAAS : " + objectCIB.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectCIB.toString(), env, accessToken);
								LOGGER.info("CIB KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getProdIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("Composite Validation API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name")
											.equalsIgnoreCase("KVM_MERCHANT_CONFIG_KEY")) {
										kvmConfigName = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							JSONObject object = new JSONObject();
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
											+ kvmConfigName);
							object.put("name", kvmConfigName);
							JSONObject valueObj = new JSONObject();
							valueObj.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("enableEncryption", "true");
							valueObj.put("isNodal", "false");
							valueObj.put("validIpList", diyData.getProdIP());
							valueObj.put("authenticationType", "apikey_ip");
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("Composite KVM UPDATION REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("Composite KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
								}
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Updation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}

						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isKVMDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					}
				} else if (diyData.getApiProduct().equals("Trade APIs")
						&& diyData.getApiType().equalsIgnoreCase("INBOUND")) {
					// APIGEE HYBRID DMZ
					if (json.getBoolean("isKVMPRODUpdated") == false) {
						JSONObject ips = new JSONObject();
						ips.put("name", appName);
						ips.put("value", diyData.getProdIP());
						LOGGER.info("TRADE KVM Updation Request INBOUND : " + ips.toString());
						try {
							String kvmResponse = updateIXCKVMDMZ(ips.toString(), env, accessToken, diyData);
							LOGGER.info("TRADE KVM Updation Response INBOUND : " + kvmResponse);
							JSONObject kvmStatus = new JSONObject(kvmResponse);
							if (kvmStatus.has("name")) {
								LOGGER.info("KVM Success");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							}
						} catch (IXCKVMEntryConflictException e) {
							LOGGER.error("TRADE KVM already exists INBOUND");
							json.put("isKVMPRODUpdated", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isKVMDone = true;
						} catch (Exception e) {
							LOGGER.error("TRADE KVM Exception INBOUND");
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(ex.toString());
						}
					}

					if (isKVMDone == true) {
						isAppCreationPRODDone = true;
						json.put("isAppCreationPRODDone", true);
						diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
						isAppCreationPRODDone = true;
					}
				} else {
					LOGGER.info("PRODUCT NOT MATCHED : " + diyData.getApiProduct());
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isAppCreationPRODDone;
	}

	public boolean inboundKVMUpdationPROD(DIYStandardModel diyData) {
		boolean isAppCreationPRODDone = false;
		boolean isKVMDone = false;
		String accessToken = null;
		String env = null;
		URL verifyUrl = null;
		String appName = null;
		JSONObject getAppJSON = null;
		String appResponse = null;
		String pubKeyIdentifier = null;
		String merchnatID = null;
		String ipIdentifier = null;
		String kvmConfigName = null;
		String aggrID = null;
		try {
			LOGGER.info("APPLICATION NAME : " + diyData.getApplicationName());
			LOGGER.info("JIRA STATUS : " + diyData.getJiraStatus());
			if (diyData.getJiraStatus().equalsIgnoreCase("GO LIVE")) {
				env = "PROD";
				if (diyData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
					appName = diyData.getAppname();
					LOGGER.info(env + " APP NAME --->  " + diyData.getAppname());
					accessToken = prodProxyApigeeToken();
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
					try {
						appResponse = getIXCAppSAAS(diyData.getUserEmail(), env, accessToken, appName);
					} catch (IXCAPPNotExistException e) {
						LOGGER.info("IXC APP Not Exist Exception : " + appName);
						return isAppCreationPRODDone;
					}
				} else if (diyData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
					appName = diyData.getAppname();
					LOGGER.info(env + " APP NAME --->  " + diyData.getAppname());
					accessToken = ixcAccessToken(env);
					LOGGER.info(env + " ACCESS TOKEN --->  " + diyData.getApplicationName() + " --> " + accessToken);
					try {
						appResponse = getIXCAppDMZ(diyData.getUserEmail(), env, accessToken, appName);
					} catch (IXCAPPNotExistException e) {
						LOGGER.info("IXC APP Not Exist Exception : " + appName);
						return isAppCreationPRODDone;
					}
				}
				String consumerKey = null;
				String consumerSecret = null;
				String appID = null;
				long issuedAt = 0;
				long expiresAt = 0;
				getAppJSON = new JSONObject(appResponse);
				if (getAppJSON.has("credentials")) {
					appID = getAppJSON.getString("appId");
					JSONArray jarr = getAppJSON.getJSONArray("credentials");
					JSONObject po2 = jarr.getJSONObject(0);
					if (po2.has("consumerKey")) {
						consumerKey = po2.getString("consumerKey");
					}
					if (po2.has("consumerSecret")) {
						consumerSecret = po2.getString("consumerSecret");
					}
					if (po2.has("issuedAt")) {
						issuedAt = po2.getLong("issuedAt");
					}
					if (po2.has("expiresAt")) {
						expiresAt = po2.getLong("expiresAt");
					}
				}
				boolean flag = diyStandardDao.saveApiKeyPROD(consumerKey, consumerSecret, appID, diyData.getJiraID(),
						appName, issuedAt, expiresAt);
				if (flag) {
					LOGGER.info("App Key Inserted");
				} else {
					LOGGER.info("App Key not Inserted");
				}
			}
			JSONObject json = new JSONObject(diyData.getAppJSON());
			if (diyData.getJiraCategory().equalsIgnoreCase("EXISTING")) {
				if (diyData.getApiProduct().equals("Payments") && diyData.getApiType().equalsIgnoreCase("INBOUND")) {
					if (diyData.getApiParent().equals("Transac Pro API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							JSONObject object = new JSONObject();
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("encryptionKey")) {
										pubKeyIdentifier = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("ipIdentifier")) {
										ipIdentifier = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_CONFIG/entries/"
											+ pubKeyIdentifier);
							LOGGER.info("TRANSACT PRO KVM Updation ENTRY-1");
							object.put("name", pubKeyIdentifier);
							String publicCertificate = checkCertificatePath(diyData.getProdPublicKey());
							object.put("value", publicCertificate);
							LOGGER.info("ENTRY-1 KVM Updation REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("ENTRY-1 Response INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								json.put("isKVMPRODUpdated", false);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = false;
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getProdIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("UPI Collect API")
							|| diyData.getApiParent().equals("UPI Mandate API")
							|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							JSONObject object = new JSONObject();
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("merchantId")) {
										merchnatID = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							if (diyData.getApiParent().equalsIgnoreCase("UPI Collect API")
									|| diyData.getApiParent().equals("UPI QR/ Intent API")) {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/EAZYPAY_MERCHANT_CONFIG/entries/"
												+ merchnatID);
								LOGGER.info("EazyPay 1.0 KVM Creation");
								object.put("name", merchnatID);
								JSONObject valueObj = new JSONObject();
								valueObj.put("spikeArrestThreshold", "199ps");
								valueObj.put("deleteResponseCode", "No");
								valueObj.put("sslType", "oneway");
								valueObj.put("validIpList", diyData.getProdIP());
								String publicCertificate = checkCertificatePath(diyData.getProdPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("callbackRoutingType", "singleUrl");
								valueObj.put("merchantName", diyData.getOrganizationName());
								valueObj.put("mode", "asymmetric_generic");
								valueObj.put("merchantHeaderKeys", "");
								valueObj.put("merchantHeaderValues", "");
								valueObj.put("callbackUrl",
										Optional.ofNullable(diyData.getProdServiceUrl()).orElse(""));
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("sendAdditionalHeaders", "No");
								valueObj.put("isResCodeEnabled", "No");

								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 1.0 KVM UPDATION REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM UPDATION Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMPRODUpdated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = false;
								} catch (Exception e) {
									LOGGER.error("KVM Exception INBOUND SAAS");
								}
							}

							if (diyData.getApiParent().equalsIgnoreCase("UPI Mandate API")) {
								verifyUrl = new URL(
										"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/EAZYPAY2_MERCHANT_CONFIG/entries/"
												+ merchnatID);
								LOGGER.info("EazyPay 2.0 KVM Creation");
								object.put("name", merchnatID);
								JSONObject valueObj = new JSONObject();
								valueObj.put("authenticationType", "apikey_ip");
								valueObj.put("validIpList", diyData.getProdIP());
								String publicCertificate = checkCertificatePath(diyData.getProdPublicKey());
								LOGGER.info("publicCertificate : " + publicCertificate);
								valueObj.put("publicKey", publicCertificate);
								valueObj.put("mode", "asymmetric_generic");
								String valueObjStr = valueObj.toString();
								valueObjStr = valueObjStr.replaceAll("\"", "\"");
								object.put("value", valueObjStr);
								LOGGER.info("EAZYPAY 2.0 KVM UPDATION REQUEST : " + object.toString());
								try {
									String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env,
											accessToken);
									LOGGER.info("KVM UPDATION Response INBOUND SAAS : " + kvmResponse);
									JSONObject kvmStatus = new JSONObject(kvmResponse);
									if (kvmStatus.has("name")) {
										LOGGER.info("KVM Success");
										json.put("isKVMPRODUpdated", true);
										diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
										isKVMDone = true;
									}
								} catch (IXCKVMEntryConflictException e) {
									LOGGER.error("KVM already exists INBOUND SAAS");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								} catch (Exception e) {
									LOGGER.error("KVM UPDATION Exception SAAS");
									StringWriter ex = new StringWriter();
									e.printStackTrace(new PrintWriter(ex));
									LOGGER.error(ex.toString());
								}
							}
						} else {
							isKVMDone = true;
						}
						LOGGER.info("KVM UPDATION DONE : " + isKVMDone);
						if (isKVMDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("CIB Payment API")
							|| diyData.getApiParent().equals("Account Service API")
							|| diyData.getApiParent().equals("Fixed Deposit API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							JSONObject object = new JSONObject();
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("AGGRID")) {
										aggrID = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("ipIdentifier")) {
										ipIdentifier = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
											+ aggrID);
							LOGGER.info("CIB KVM UPDATE STARTED");
							object.put("name", aggrID);
							JSONObject valueObj = new JSONObject();
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("CIB KVM Updation REQUEST SAAS : " + object.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("CIB KVM Updation RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND SAAS");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Updation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getProdIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("Composite Payment API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {

							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("AGGRID")) {
										aggrID = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name").equalsIgnoreCase("ipIdentifier")) {
										ipIdentifier = attrArr.getJSONObject(i).getString("value");
									}
									if (attrArr.getJSONObject(i).getString("name")
											.equalsIgnoreCase("KVM_MERCHANT_CONFIG_KEY")) {
										kvmConfigName = attrArr.getJSONObject(i).getString("value");
									}
								}
							}

							// COMPOSITE KVM
							JSONObject objectComp = new JSONObject();
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
											+ kvmConfigName);
							objectComp.put("name", kvmConfigName);
							JSONObject valueObjComp = new JSONObject();
							valueObjComp.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							valueObjComp.put("mode", "hybrid_generic");
							valueObjComp.put("enableEncryption", "true");
							valueObjComp.put("isNodal", "false");
							valueObjComp.put("validIpList", diyData.getProdIP());
							valueObjComp.put("authenticationType", "apikey_ip");
							String valueObjStrComp = valueObjComp.toString();
							valueObjStrComp = valueObjStrComp.replaceAll("\"", "\"");
							objectComp.put("value", valueObjStrComp);
							LOGGER.info("COMPOSITE KVM UPDATION REQUEST SAAS : " + objectComp.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectComp.toString(), env,
										accessToken);
								LOGGER.info("COMPOSITE KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND DMZ");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}

							// CIB KVM
							JSONObject objectCIB = new JSONObject();
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/CIB_MERCHANT_CONFIG/entries/"
											+ aggrID);
							LOGGER.info("CIB UPDATE KVM STARTED");
							objectCIB.put("name", aggrID);
							JSONObject valueObjCIB = new JSONObject();
							valueObjCIB.put("mode", diyData.getUatEncMode());
							valueObjCIB.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							String valueObjStrCIB = valueObjCIB.toString();
							valueObjStrCIB = valueObjStrCIB.replaceAll("\"", "\"");
							objectCIB.put("value", valueObjStrCIB);
							LOGGER.info("CIB KVM UPDATION REQUEST SAAS : " + objectCIB.toString());

							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, objectCIB.toString(), env, accessToken);
								LOGGER.info("CIB KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("CIB KVM Success : " + diyData.getJiraID());
									json.put("isKVMPRODUpdated", true);
									diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
									isKVMDone = true;
								}
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}
						boolean isIPsDone = saasIPWhiteListing(diyData.getClientCode(), diyData.getProdIP(), env,
								appName, accessToken, diyData.getJiraID(), diyData.getClientCode(), diyData,
								ipIdentifier);
						LOGGER.info("KVM DONE : " + isKVMDone);
						LOGGER.info("IP WHITELIST DONE : " + isIPsDone);
						if (isKVMDone == true && isIPsDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					} else if (diyData.getApiParent().equals("Composite Validation API")) {
						if (json.getBoolean("isKVMPRODUpdated") == false) {
							if (getAppJSON.has("attributes")) {
								JSONArray attrArr = getAppJSON.getJSONArray("attributes");
								for (int i = 0; i < attrArr.length(); i++) {
									if (attrArr.getJSONObject(i).getString("name")
											.equalsIgnoreCase("KVM_MERCHANT_CONFIG_KEY")) {
										kvmConfigName = attrArr.getJSONObject(i).getString("value");
									}
								}
							}
							JSONObject object = new JSONObject();
							verifyUrl = new URL(
									"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/COMPOSITE_MERCHANT_CONFIG/entries/"
											+ kvmConfigName);
							object.put("name", kvmConfigName);
							JSONObject valueObj = new JSONObject();
							valueObj.put("publicKey", checkCertificatePath(diyData.getProdPublicKey()));
							valueObj.put("mode", "hybrid_generic");
							valueObj.put("enableEncryption", "true");
							valueObj.put("isNodal", "false");
							valueObj.put("validIpList", diyData.getProdIP());
							valueObj.put("authenticationType", "apikey_ip");
							String valueObjStr = valueObj.toString();
							valueObjStr = valueObjStr.replaceAll("\"", "\"");
							object.put("value", valueObjStr);
							LOGGER.info("Composite KVM UPDATION REQUEST SAAS : " + object.toString());
							try {
								String kvmResponse = createIXCKVSAAS(verifyUrl, object.toString(), env, accessToken);
								LOGGER.info("Composite KVM UPDATION RESPONSE INBOUND SAAS : " + kvmResponse);
								JSONObject kvmStatus = new JSONObject(kvmResponse);
								if (kvmStatus.has("name")) {
									LOGGER.info("KVM Success");
								}
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (IXCKVMEntryConflictException e) {
								LOGGER.error("KVM already exists INBOUND DMZ");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							} catch (Exception e) {
								LOGGER.error("KVM Updation Exception INBOUND");
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
							}
						} else {
							isKVMDone = true;
						}

						LOGGER.info("KVM DONE : " + isKVMDone);
						if (isKVMDone == true) {
							json.put("isAppCreationPRODDone", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isAppCreationPRODDone = true;
						}
					}
				} else if (diyData.getApiProduct().equals("Trade APIs")
						&& diyData.getApiType().equalsIgnoreCase("INBOUND")) {
					// APIGEE HYBRID DMZ
					if (json.getBoolean("isKVMPRODUpdated") == false) {
						JSONObject ips = new JSONObject();
						ips.put("name", appName);
						ips.put("value", diyData.getProdIP());
						LOGGER.info("TRADE KVM Updation Request INBOUND : " + ips.toString());
						try {
							String kvmResponse = updateIXCKVMDMZ(ips.toString(), env, accessToken, diyData);
							LOGGER.info("TRADE KVM Updation Response INBOUND : " + kvmResponse);
							JSONObject kvmStatus = new JSONObject(kvmResponse);
							if (kvmStatus.has("name")) {
								LOGGER.info("KVM Success");
								json.put("isKVMPRODUpdated", true);
								diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
								isKVMDone = true;
							}
						} catch (IXCKVMEntryConflictException e) {
							LOGGER.error("TRADE KVM already exists INBOUND");
							json.put("isKVMPRODUpdated", true);
							diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
							isKVMDone = true;
						} catch (Exception e) {
							LOGGER.error("TRADE KVM Exception INBOUND");
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(ex.toString());
						}
					}

					if (isKVMDone == true) {
						isAppCreationPRODDone = true;
						json.put("isAppCreationPRODDone", true);
						diyStandardDao.saveAppStatus(json.toString(), diyData.getJiraID());
						isAppCreationPRODDone = true;
					}
				} else {
					LOGGER.info("PRODUCT NOT MATCHED : " + diyData.getApiProduct());
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return isAppCreationPRODDone;
	}

	public boolean saasIPWhiteListing(String aggrId, String ipList, String env, String appName, String accessToken,
			String jiraID, String clientCode, DIYStandardModel diyData, String ipIdentifier) {
		URL verifyUrl = null;
		String makeWhitelistIpsRes = null;
		boolean isIPsDone = false;
		LOGGER.info("======= To Whitelist IP Merchant Onboarding STARTED =======");
		try {
			if (diyData.getJiraCategory().equalsIgnoreCase("EXISTING")) {
				diyData.setIsReverted(true);
			}
			if (diyData.getIsReverted() == false) {
				LOGGER.info("IP WhiteList Create");
				if (env.equals("PROD") || env == "PROD") {
					if (diyData.getApiParent().equalsIgnoreCase("CIB Payment API")
							|| diyData.getApiParent().equalsIgnoreCase("Account Service API")
							|| diyData.getApiParent().equalsIgnoreCase("Fixed Deposit API")
							|| diyData.getApiParent().equalsIgnoreCase("Composite Validation API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_IPS/entries");
						ipIdentifier = appName;
					} else if (diyData.getApiParent().equalsIgnoreCase("Transac Pro API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_IPS/entries");
						ipIdentifier = appName + "_IP";
					} else if (diyData.getApiParent().equals("Composite Payment API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_IPS/entries");
						ipIdentifier = aggrId + "_CIB_Composite_ips";
					}
					accessToken = prodProxyApigeeToken();
				} else if (env.equals("UAT") || env == "UAT") {
					if (diyData.getApiParent().equalsIgnoreCase("CIB Payment API")
							|| diyData.getApiParent().equalsIgnoreCase("Account Service API")
							|| diyData.getApiParent().equalsIgnoreCase("Fixed Deposit API")
							|| diyData.getApiParent().equalsIgnoreCase("Composite Validation API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_IPS/entries");
						ipIdentifier = appName;
					} else if (diyData.getApiParent().equalsIgnoreCase("Transac Pro API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_IPS/entries");
						ipIdentifier = appName + "_IP";
					} else if (diyData.getApiParent().equals("Composite Payment API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_IPS/entries");
						ipIdentifier = aggrId + "_CIB_Composite_ips";
					}
					accessToken = uatProxyApigeeToken();
				}
			} else {
				LOGGER.info("IP WhiteList Update");
				if (env.equals("PROD") || env == "PROD") {
					if (diyData.getApiParent().equalsIgnoreCase("CIB Payment API")
							|| diyData.getApiParent().equalsIgnoreCase("Account Service API")
							|| diyData.getApiParent().equalsIgnoreCase("Fixed Deposit API")
							|| diyData.getApiParent().equalsIgnoreCase("Composite Validation API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_IPS/entries/"
										+ ipIdentifier);
					} else if (diyData.getApiParent().equalsIgnoreCase("Transac Pro API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_IPS/entries/"
										+ ipIdentifier);
					} else if (diyData.getApiParent().equals("Composite Payment API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-prod/environments/prod/keyvaluemaps/ICICI_MERCHANT_IPS/entries/"
										+ ipIdentifier);
					}
					accessToken = prodProxyApigeeToken();
				} else if (env.equals("UAT") || env == "UAT") {
					if (diyData.getApiParent().equalsIgnoreCase("CIB Payment API")
							|| diyData.getApiParent().equalsIgnoreCase("Account Service API")
							|| diyData.getApiParent().equalsIgnoreCase("Fixed Deposit API")
							|| diyData.getApiParent().equalsIgnoreCase("Composite Validation API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_IPS/entries/"
										+ ipIdentifier);
					} else if (diyData.getApiParent().equalsIgnoreCase("Transac Pro API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_IPS/entries/"
										+ ipIdentifier);
					} else if (diyData.getApiParent().equals("Composite Payment API")) {
						verifyUrl = new URL(
								"https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/environments/uat/keyvaluemaps/ICICI_MERCHANT_IPS/entries/"
										+ ipIdentifier);
					}
					accessToken = uatProxyApigeeToken();
				}
			}
			LOGGER.info("verifyUrl : " + verifyUrl);
			LOGGER.info("ipList : " + ipList);
			JSONObject object = new JSONObject();
			LOGGER.info("ipIdentifier : " + ipIdentifier);
			if (diyData.getApiParent().equalsIgnoreCase("Transac Pro API")) {
				object.put("name", ipIdentifier);
				object.put("value", ipList);
			} else if (diyData.getApiParent().equalsIgnoreCase("CIB Payment API")
					|| diyData.getApiParent().equalsIgnoreCase("Account Service API")
					|| diyData.getApiParent().equalsIgnoreCase("Fixed Deposit API")
					|| diyData.getApiParent().equalsIgnoreCase("Composite Validation API")) {
				object.put("name", ipIdentifier);
				object.put("value", ipList);
			} else if (diyData.getApiParent().equals("Composite Payment API")) {
				object.put("name", ipIdentifier);
				object.put("value", ipList);
			}
			LOGGER.info("IP Whitelist REQUEST : " + object.toString());
			makeWhitelistIpsRes = postProxyIPWhitlist(verifyUrl, object.toString(), accessToken);
			LOGGER.info("IP Whitelist Response : " + makeWhitelistIpsRes);
			if (makeWhitelistIpsRes == null) {
				try {
					JSONObject cjo = new JSONObject();
					cjo.put("body", "Whitelist IP's reqest not complete for JIRA-ID : " + jiraID);
					restJiraPost(cjo.toString(), "C", jiraID);
				} catch (Exception e) {
					StringWriter ex = new StringWriter();
					e.printStackTrace(new PrintWriter(ex));
					LOGGER.error(ex.toString());
				}
			} else {
				try {
					JSONObject cjo = new JSONObject();
					cjo.put("body", "Whitelist IP's reqest complete for JIRA-ID : " + jiraID);
					restJiraPost(cjo.toString(), "C", jiraID);
					isIPsDone = true;
				} catch (Exception e) {
					StringWriter ex = new StringWriter();
					e.printStackTrace(new PrintWriter(ex));
					LOGGER.error(ex.toString());
				}
				LOGGER.info("======= To Whitelist IP Merchant Onboarding Completed =======");
			}
		} catch (MerchantIPConflictException e) {
			LOGGER.info("======= Whitelist IP Conflict Exception =======");
			isIPsDone = true;
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			LOGGER.info("======= To Whitelist IP Merchant Exception =======");
			return isIPsDone;
		}
		return isIPsDone;
	}

	public String postProxyIPWhitlist(URL verifyUrl, String bodyData, String accessToken)
			throws MerchantIPConflictException {
		String strresponse = null;
		try {
			StringBuffer response = null;
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("IP WHITELISTING Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == HttpURLConnection.HTTP_CONFLICT) {
				LOGGER.info("IP WhiteList Conflict");
				throw new MerchantIPConflictException();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errresponse: " + errResponse.toString());
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception: " + ex.toString());
		}
		return strresponse;
	}

	public boolean createIXCDeveloperDMZ(String bodyData, String environment, String accessToken)
			throws IXCDeveloperCreateConflictException {
		boolean isDeveloper = false;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/developers");
			} else {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-prod/developers");
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for DEVELOPER DMZ : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				isDeveloper = true;
			} else if (responseCode == 409) {
				throw new IXCDeveloperCreateConflictException("Developer Already exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return isDeveloper;
	}

	public boolean createIXCDeveloperSAAS(String bodyData, String environment, String accessToken)
			throws IXCDeveloperCreateConflictException {
		boolean isDeveloper = false;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (environment == "PROD" || environment.equals("PROD")) {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-prod/developers");
			} else {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/developers");
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for DEVELOPER SAAS : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				isDeveloper = true;
			} else if (responseCode == 409) {
				throw new IXCDeveloperCreateConflictException("Developer Already exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return isDeveloper;
	}

	private String createIXCAppDMZ(String bodyData, String userEmail, String environment, String accessToken)
			throws IXCAPPCreateConflictException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		JSONObject data = new JSONObject(bodyData);
		data.put("keyExpiresIn", 15552000000L); // 180 days 15552000000L
		try {
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/developers/"
								+ userEmail + "/apps");
			} else {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-prod/developers/"
								+ userEmail + "/apps");
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + data.toString());
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = data.toString().getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for Create APP INBOUND DMZ : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 409) {
				throw new IXCAPPCreateConflictException("App Already exists INBOUND");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	private String createIXCAppSAAS(String bodyData, String userEmail, String environment, String accessToken)
			throws IXCAPPCreateConflictException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		JSONObject data = new JSONObject(bodyData);
		data.put("keyExpiresIn", 15552000000L); // 180 days 15552000000L
		try {
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/developers/"
						+ userEmail + "/apps");
			} else {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-prod/developers/"
						+ userEmail + "/apps");
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + data.toString());
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = data.toString().getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("POST Response Code for Create APP INBOUND SAAS : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 409) {
				throw new IXCAPPCreateConflictException("App Already exists INBOUND");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String getIXCAppDMZ(String userEmail, String environment, String accessToken, String appName)
			throws IXCAPPNotExistException {

		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (environment.equalsIgnoreCase("UAT")) {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/developers/"
								+ userEmail + "/apps/" + appName);
			} else if (environment.equalsIgnoreCase("PROD")) {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-prod/developers/"
								+ userEmail + "/apps/" + appName);
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("appName : " + appName);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);

			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("GET");

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Existing APP Deatil Response Code DMZ : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 404) {
				throw new IXCAPPNotExistException("IXC App not exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}

		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String getIXCAppSAAS(String userEmail, String environment, String accessToken, String appName)
			throws IXCAPPNotExistException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (environment.equalsIgnoreCase("UAT") || environment == "UAT") {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/developers/"
						+ userEmail + "/apps/" + appName);
				accessToken = uatProxyApigeeToken();
			} else {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-prod/developers/"
						+ userEmail + "/apps/" + appName);
				accessToken = prodProxyApigeeToken();
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("appName : " + appName);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);

			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("GET");

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Existing APP Deatil Response Code SAAS : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 404) {
				throw new IXCAPPNotExistException("IXC App not exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	private String createIXCKVMDMZ(String bodyData, String environment, String accessToken, DIYStandardModel diyData)
			throws IXCKVMEntryConflictException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (diyData.getIsReverted() == false) {
				if (environment.equals("UAT") || environment == "UAT") {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/uat06/keyvaluemaps/IP-Whitelist/entries");
				} else {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/dev01/keyvaluemaps/SampleKVM/entries");
				}
			} else {
				if (environment.equals("UAT") || environment == "UAT") {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/uat06/keyvaluemaps/IP-Whitelist/entries/"
									+ diyData.getAppname());
				} else {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/dev01/keyvaluemaps/SampleKVM/entries/"
									+ diyData.getAppname());
				}
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for IXC KVM INBOUND DMZ : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 409) {
				throw new IXCKVMEntryConflictException("IXC KVM Already exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse KVM :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	private String updateIXCKVMDMZ(String bodyData, String environment, String accessToken, DIYStandardModel diyData)
			throws IXCKVMEntryConflictException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (diyData.getJiraCategory().equalsIgnoreCase("EXISTING")) {
				diyData.setIsReverted(true);
			}
			if (diyData.getIsReverted() == false) {
				if (environment.equals("UAT") || environment == "UAT") {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/uat06/keyvaluemaps/IP-Whitelist/entries");
				} else {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/dev01/keyvaluemaps/SampleKVM/entries");
				}
			} else {
				if (environment.equals("UAT") || environment == "UAT") {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/uat06/keyvaluemaps/IP-Whitelist/entries/"
									+ diyData.getAppname());
				} else {
					verifyUrl = new URL(
							"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/environments/dev01/keyvaluemaps/SampleKVM/entries/"
									+ diyData.getAppname());
				}
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("PUT");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for IXC KVM INBOUND DMZ : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 409) {
				throw new IXCKVMEntryConflictException("IXC KVM Already exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse KVM :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	private String createIXCKVSAAS(URL verifyUrl, String bodyData, String environment, String accessToken)
			throws IXCKVMEntryConflictException {
		String strresponse = null;
		StringBuffer response = null;
		try {
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for IXC KVM INBOUND SAAS : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 409) {
				throw new IXCKVMEntryConflictException("IXC KVM Already exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse KVM :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	@POST
	@Path("/mongoToken")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response mongoToken(@FormParam("jiraID") String jiraID) {
		try {
			String token = mongoDBAccessToken(jiraID);
			return Response.status(200).entity(token).build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		return Response.ok(null).build();
	}

	public String mongoDBAccessToken(String jiraID) {

		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String accessToken = null;
		try {
			verifyUrl = new URL("https://uat-onprem-dmz-hybrid.icicibankltd.com/recon/generateToken");
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setDoInput(true);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");
			JSONObject json = new JSONObject();
			json.put("userEmail", "apibanking@icicibank.com");
			json.put("userKey", "LzmMG$FoGpoj%");
			json.put("JiraID", jiraID);

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = json.toString().getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("MONGO Access Token Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_CREATED || responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
				JSONObject jsonObject = new JSONObject(strresponse);
				if (jsonObject.has("Token")) {
					accessToken = jsonObject.getString("Token");
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse : " + errResponse);
			}

		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
			return accessToken;
		}
		return accessToken;
	}

	@POST
	@Path("/generateNewkey")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response generateNewkey(@FormParam("username") String username, @FormParam("jiraID") String jiraID,
			@FormParam("environment") String environment, @FormParam("appName") String appName,
			@FormParam("userEmail") String userEmail) {
		String updated = null;
		boolean isUpdated = false;
		JSONObject bodyData = null;
		ResponseModel responseModel = new ResponseModel();
		String appDetails = null;
		HashSet<String> productList = new HashSet<>();
		DIYStandardModel jiraData = null;
		String apiProduct = null;
		String accessToken = null;
		try {
			jiraData = diyStandardDao.getJIRAData(jiraID);
			apiProduct = jiraData.getApiProduct();
			if (jiraData.getJiraStatus().equalsIgnoreCase("GO LIVE")) {
				environment = "PROD";
				if (jiraData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
					accessToken = prodProxyApigeeToken();
					LOGGER.info(environment + " ACCESS TOKEN --->  " + jiraData.getApplicationName() + " --> "
							+ accessToken);
				} else if (jiraData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
					accessToken = ixcAccessToken(environment);
					LOGGER.info(environment + " ACCESS TOKEN --->  " + jiraData.getApplicationName() + " --> "
							+ accessToken);
				}
			} else {
				environment = "UAT";
				if (jiraData.getApplicationName().equalsIgnoreCase("APIGEE EDGE SAAS")) {
					accessToken = uatProxyApigeeToken();
					LOGGER.info(environment + " ACCESS TOKEN --->  " + jiraData.getApplicationName() + " --> "
							+ accessToken);
				} else if (jiraData.getApplicationName().equalsIgnoreCase("APIGEE HYBRID DMZ")) {
					accessToken = ixcAccessToken(environment);
					LOGGER.info(environment + " ACCESS TOKEN --->  " + jiraData.getApplicationName() + " --> "
							+ accessToken);
				}
			}
			if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				LOGGER.info("Generate Key Environment : " + environment);
				try {
					appDetails = getIXCAppDMZ(userEmail, environment, accessToken, appName);
					LOGGER.info("DMZ appDetails : " + appDetails);
					if (appDetails != null) {
						JSONObject json = new JSONObject(appDetails);
						if (json.has("credentials")) {
							JSONArray credArr = json.getJSONArray("credentials");
							for (int i = 0; i < credArr.length(); i++) {
								JSONObject credJson = credArr.getJSONObject(i);
								if (credJson.has("apiProducts")) {
									JSONArray apiProdArr = credJson.getJSONArray("apiProducts");
									for (int j = 0; j < apiProdArr.length(); j++) {
										JSONObject apiProductsJson = apiProdArr.getJSONObject(j);
										if (apiProductsJson.has("apiproduct")) {
											String apiProductData = apiProductsJson.getString("apiproduct");
											productList.add(apiProductData);
										}
									}
								}
							}
						}
					} else {
						responseModel.setMessage("consumer key & consumer secret generating failed : " + jiraID);
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} catch (IXCAPPNotExistException e1) {
					StringWriter ex = new StringWriter();
					e1.printStackTrace(new PrintWriter(ex));
					LOGGER.info("Exception:" + ex.toString());
				}

				bodyData = new JSONObject();
				bodyData.put("name", appName);
				bodyData.put("apiProducts", productList.toArray());
				bodyData.put("keyExpiresIn", 15552000000L);// 180 days 15552000000L
				updated = generateConsumerKeyDMZ(bodyData.toString(), userEmail, environment, appName);
				LOGGER.info("GENERATE updated DMZ : " + updated);
				JSONObject newKey = new JSONObject(updated);
				JSONArray credArr = newKey.getJSONArray("credentials");
				JSONObject credJson = credArr.getJSONObject(0);
				if (credJson.has("consumerKey") && credJson.has("consumerSecret") && credJson.has("issuedAt")
						&& credJson.has("expiresAt")) {
					if (environment.equalsIgnoreCase("UAT")) {
						isUpdated = diyStandardDao.updateNewKeySecretUAT(username, jiraID,
								credJson.getString("consumerKey"), credJson.getString("consumerSecret"),
								credJson.getLong("issuedAt"), credJson.getLong("expiresAt"));
						if (isUpdated == true) {
							String apikeyFlag = diyStandardDao.getAPIKEYFlag(jiraID);
							JSONObject apiKeyJSON = new JSONObject(apikeyFlag);
							LOGGER.info("GENERATE JSON DMZ UAT : " + apiKeyJSON.toString());
							JSONObject uatJSON = apiKeyJSON.getJSONObject("UAT");
							uatJSON.put("30", false);
							uatJSON.put("15", false);
							uatJSON.put("10", false);
							uatJSON.put("5", false);
							uatJSON.put("1", false);
							uatJSON.put("0", false);
							uatJSON.put("DONE", false);
							diyStandardDao.updateAPIKEYFlag(jiraID, apiKeyJSON.toString());
						}
					} else {
						isUpdated = diyStandardDao.updateNewKeySecretPROD(username, jiraID,
								credJson.getString("consumerKey"), credJson.getString("consumerSecret"),
								credJson.getLong("issuedAt"), credJson.getLong("expiresAt"));
						if (isUpdated == true) {
							String apikeyFlag = diyStandardDao.getAPIKEYFlag(jiraID);
							JSONObject apiKeyJSON = new JSONObject(apikeyFlag);
							LOGGER.info("GENERATE JSON DMZ PROD : " + apiKeyJSON.toString());
							JSONObject prodJSON = apiKeyJSON.getJSONObject("PROD");
							prodJSON.put("30", false);
							prodJSON.put("15", false);
							prodJSON.put("10", false);
							prodJSON.put("5", false);
							prodJSON.put("1", false);
							prodJSON.put("0", false);
							prodJSON.put("DONE", false);
							diyStandardDao.updateAPIKEYFlag(jiraID, apiKeyJSON.toString());
						}
					}
					if (isUpdated == true) {
						JSONObject jsonObject = null;
						String jiraKey = null;
						try {
							JSONObject project = new JSONObject();
							project.put("id", "10396");
							JSONObject assignee = new JSONObject();
							assignee.put("name", "APIBANKING");
							JSONObject issuetype = new JSONObject();
							issuetype.put("id", "10101");
							JSONObject parent = new JSONObject();
							parent.put("id", jiraID);
							JSONObject fields = new JSONObject();
							fields.put("project", project);
							fields.put("summary",
									"Developer Portal- IXC OUBOUND Onboarding -New Key Generation : " + appName);
							fields.put("description", "IXC new consumer key & consumer secret generated sucessfully");
							fields.put("assignee", assignee);
							fields.put("issuetype", issuetype);
							fields.put("parent", parent);
							JSONObject json = new JSONObject();
							json.put("fields", fields);
							LOGGER.info("SUB JIRA Payload : " + json.toString());
							String str = null;
							String payloadStr = null;
							String clientStr1 = null;
							try {
								str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
								LOGGER.info("SUB Jira URL FOR GENERATE KEY : " + str);
								payloadStr = json.toString();
								clientStr1 = HttpClient.restCreateJira(str, payloadStr);
								LOGGER.info("SUB Jira RESPONSE FOR GENERATE KEY : " + clientStr1);
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
							}
							jsonObject = new JSONObject(clientStr1);
							jiraKey = (String) jsonObject.get("key");
						} catch (Exception e) {
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(e.toString());
						}

						LOGGER.info("key & secret generated Successfully.. " + username + "__" + jiraID);
						responseModel.setMessage("consumer key & consumer secret generated Successfully. " + jiraKey);
						responseModel.setStatus(true);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else {
					LOGGER.info("key & secret generating failed for DMZ " + username + "__" + jiraID);
					responseModel.setMessage("consumer key & consumer secret generating failed for DMZ " + jiraID);
					responseModel.setStatus(false);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				}
			} else if (apiProduct.equalsIgnoreCase("Payments")) {
				LOGGER.info("Generate Key Environment : " + environment);
				try {
					appDetails = getIXCAppSAAS(userEmail, environment, accessToken, appName);
					LOGGER.info("SAAS appDetails : " + appDetails);
					if (appDetails != null) {
						JSONObject json = new JSONObject(appDetails);
						if (json.has("credentials")) {
							JSONArray credArr = json.getJSONArray("credentials");
							for (int i = 0; i < credArr.length(); i++) {
								JSONObject credJson = credArr.getJSONObject(i);
								if (credJson.has("apiProducts")) {
									JSONArray apiProdArr = credJson.getJSONArray("apiProducts");
									for (int j = 0; j < apiProdArr.length(); j++) {
										JSONObject apiProductsJson = apiProdArr.getJSONObject(j);
										if (apiProductsJson.has("apiproduct")) {
											String apiProductData = apiProductsJson.getString("apiproduct");
											productList.add(apiProductData);
										}
									}
								}
							}
						}
					} else {
						responseModel.setMessage("consumer key & consumer secret generating failed : " + jiraID);
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} catch (IXCAPPNotExistException e1) {
					StringWriter ex = new StringWriter();
					e1.printStackTrace(new PrintWriter(ex));
					LOGGER.info("Exception:" + ex.toString());
				}
				bodyData = new JSONObject();
				bodyData.put("name", appName);
				bodyData.put("apiProducts", productList.toArray());
				bodyData.put("keyExpiresIn", 15552000000L); // 15552000000
				updated = generateConsumerKeySAAS(bodyData.toString(), userEmail, environment, appName);
				LOGGER.info("GENERATE updated SAAS : " + updated);
				JSONObject newKey = new JSONObject(updated);
				JSONArray credArr = newKey.getJSONArray("credentials");
				JSONObject credJson = credArr.getJSONObject(0);
				if (credJson.has("consumerKey") && credJson.has("consumerSecret") && credJson.has("issuedAt")
						&& credJson.has("expiresAt")) {
					if (environment.equalsIgnoreCase("UAT")) {
						isUpdated = diyStandardDao.updateNewKeySecretUAT(username, jiraID,
								credJson.getString("consumerKey"), credJson.getString("consumerSecret"),
								credJson.getLong("issuedAt"), credJson.getLong("expiresAt"));
						if (isUpdated == true) {
							String apikeyFlag = diyStandardDao.getAPIKEYFlag(jiraID);
							JSONObject apiKeyJSON = new JSONObject(apikeyFlag);
							LOGGER.info("GENERATE JSON SAAS UAT : " + apiKeyJSON.toString());
							JSONObject uatJSON = apiKeyJSON.getJSONObject("UAT");
							uatJSON.put("30", false);
							uatJSON.put("15", false);
							uatJSON.put("10", false);
							uatJSON.put("5", false);
							uatJSON.put("1", false);
							uatJSON.put("0", false);
							uatJSON.put("DONE", false);
							diyStandardDao.updateAPIKEYFlag(jiraID, apiKeyJSON.toString());
						}
					} else {
						isUpdated = diyStandardDao.updateNewKeySecretPROD(username, jiraID,
								credJson.getString("consumerKey"), credJson.getString("consumerSecret"),
								credJson.getLong("issuedAt"), credJson.getLong("expiresAt"));
						if (isUpdated == true) {
							String apikeyFlag = diyStandardDao.getAPIKEYFlag(jiraID);
							JSONObject apiKeyJSON = new JSONObject(apikeyFlag);
							LOGGER.info("GENERATE JSON SAAS PROD : " + apiKeyJSON.toString());
							JSONObject prodJSON = apiKeyJSON.getJSONObject("PROD");
							prodJSON.put("30", false);
							prodJSON.put("15", false);
							prodJSON.put("10", false);
							prodJSON.put("5", false);
							prodJSON.put("1", false);
							prodJSON.put("0", false);
							prodJSON.put("DONE", false);
							diyStandardDao.updateAPIKEYFlag(jiraID, apiKeyJSON.toString());
						}
					}
					if (isUpdated == true) {
						JSONObject jsonObject = null;
						String jiraKey = null;
						try {
							JSONObject project = new JSONObject();
							project.put("id", "10396");
							JSONObject assignee = new JSONObject();
							assignee.put("name", "APIBANKING");
							JSONObject issuetype = new JSONObject();
							issuetype.put("id", "10101");
							JSONObject parent = new JSONObject();
							parent.put("id", jiraID);
							JSONObject fields = new JSONObject();
							fields.put("project", project);
							fields.put("summary",
									"Developer Portal- IXC OUBOUND Onboarding -New Key Generation : " + appName);
							fields.put("description", "IXC new consumer key & consumer secret generated sucessfully");
							fields.put("assignee", assignee);
							fields.put("issuetype", issuetype);
							fields.put("parent", parent);
							JSONObject json = new JSONObject();
							json.put("fields", fields);
							LOGGER.info("SUB JIRA Payload : " + json.toString());
							String str = null;
							String payloadStr = null;
							String clientStr1 = null;
							try {
								str = new String((GwConstants.JIRA_URL_V2_DNS + "issue").getBytes(), "UTF-8");
								LOGGER.info("SUB Jira URL FOR GENERATE KEY : " + str);
								payloadStr = json.toString();
								clientStr1 = HttpClient.restCreateJira(str, payloadStr);
								LOGGER.info("SUB Jira RESPONSE FOR GENERATE KEY : " + clientStr1);
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
							}
							jsonObject = new JSONObject(clientStr1);
							jiraKey = (String) jsonObject.get("key");
						} catch (Exception e) {
							StringWriter ex = new StringWriter();
							e.printStackTrace(new PrintWriter(ex));
							LOGGER.error(e.toString());
						}

						LOGGER.info("key & secret generated Successfully.. " + username + "__" + jiraID);
						responseModel.setMessage("consumer key & consumer secret generated Successfully. " + jiraKey);
						responseModel.setStatus(true);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				} else {
					LOGGER.info("key & secret generating failed for SAAS " + username + "__" + jiraID);
					responseModel.setMessage("consumer key & consumer secret generating failed for SAAS " + jiraID);
					responseModel.setStatus(false);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				}
			}
		} catch (ConsumerKeyConflictException e) {
			LOGGER.error("consumer key already exists !");
			responseModel.setMessage("consumer key already exists !");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			responseModel.setMessage("something went wrong !!");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	private String generateConsumerKeyDMZ(String bodyData, String userEmail, String environment, String appName)
			throws ConsumerKeyConflictException {

		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String accessToken = null;

		try {
			userEmail = userEmail.trim();
			appName = appName.trim();
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/developers/"
								+ userEmail + "/apps/" + appName);
			} else {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-prod/developers/"
								+ userEmail + "/apps/" + appName);
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			accessToken = ixcAccessToken(environment);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for Generate DMZ APIKEY : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else if (responseCode == 409) {
				throw new ConsumerKeyConflictException("IXC App Already exists");
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}

		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	private String generateConsumerKeySAAS(String bodyData, String userEmail, String environment, String appName)
			throws ConsumerKeyConflictException {

		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String accessToken = null;

		try {
			userEmail = userEmail.trim();
			appName = appName.trim();
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/developers/"
						+ userEmail + "/apps/" + appName);
				accessToken = uatProxyApigeeToken();
			} else {
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-prod/developers/"
						+ userEmail + "/apps/" + appName);
				accessToken = prodProxyApigeeToken();
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);

			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for Generate SAAS APIKEY : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}

		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse;
	}

	public String deleteConsumerKeyDMZ(String consumerKey, String userEmail, String environment, String appName,
			String userName, String jiraKey, String newConsumerKey, String newConsumerSecret)
			throws ConsumerKeyNotExistsException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String accessToken = null;
		try {
			userEmail = userEmail.trim();
			appName = appName.trim();
			accessToken = ixcAccessToken(environment);
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/developers/"
								+ userEmail + "/apps/" + appName + "/keys/" + consumerKey);
			} else {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-prod/developers/"
								+ userEmail + "/apps/" + appName + "/keys/" + consumerKey);
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("DELETE");

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("DELETE Consumer Key DMZ Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
				if (environment.equalsIgnoreCase("UAT")) {
					diyStandardDao.updateNewKeySecretToOldKeysUAT(userName, jiraKey, newConsumerKey, newConsumerSecret);
				} else {
					diyStandardDao.updateNewKeySecretToOldKeysPROD(userName, jiraKey, newConsumerKey,
							newConsumerSecret);
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse : " + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	public String deleteConsumerKeySAAS(String consumerKey, String userEmail, String environment, String appName,
			String userName, String jiraKey, String newConsumerKey, String newConsumerSecret)
			throws ConsumerKeyNotExistsException {
		String strresponse = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String accessToken = null;
		try {
			userEmail = userEmail.trim();
			appName = appName.trim();
			if (environment.equals("UAT") || environment == "UAT") {
				accessToken = uatProxyApigeeToken();
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-nonprod/developers/"
						+ userEmail + "/apps/" + appName + "/keys/" + consumerKey);
			} else {
				accessToken = prodProxyApigeeToken();
				verifyUrl = new URL("https://api.enterprise.apigee.com/v1/organizations/icici-prod/developers/"
						+ userEmail + "/apps/" + appName + "/keys/" + consumerKey);
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("DELETE");

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("DELETE Consumer Key SAAS Response Code : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
//				LOGGER.info("strresponse : " + strresponse);
				if (environment.equalsIgnoreCase("UAT")) {
					diyStandardDao.updateNewKeySecretToOldKeysUAT(userName, jiraKey, newConsumerKey, newConsumerSecret);
				} else {
					diyStandardDao.updateNewKeySecretToOldKeysPROD(userName, jiraKey, newConsumerKey,
							newConsumerSecret);
				}
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return strresponse.toString();
	}

	@POST
	@Path("/isKeyViewed")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.TEXT_PLAIN)
	public Response isKeyViewed(@FormParam("username") String username, @FormParam("jiraID") String jiraID,
			@FormParam("environment") String environment) {
		boolean flag = false;
		try {
			flag = diyStandardDao.isApiKeyViewed(username, jiraID, environment);

		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			return Response.ok(flag).build();
		}
		return Response.ok(flag).build();
	}

	@POST
	@Path("/clearSITTestingData")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.TEXT_PLAIN)
	public Response clearSITTestingData(@FormParam("apiName") String apiName, @FormParam("jiraID") String jiraID,
			@FormParam("statusJSON") String statusJSON) {
		boolean flag = false;
		try {
			flag = diyStandardDao.clearSITByAPI(jiraID, apiName);
			diyStandardDao.saveStatusJSON(statusJSON, jiraID);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			return Response.ok(flag).build();
		}
		return Response.ok(flag).build();
	}

	@POST
	@Path("/clearUATTestingData")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.TEXT_PLAIN)
	public Response clearUATTestingData(@FormParam("apiName") String apiName, @FormParam("jiraID") String jiraID,
			@FormParam("statusJSON") String statusJSON) {
		boolean flag = false;
		try {
			flag = diyStandardDao.clearUATByAPI(jiraID, apiName);
			diyStandardDao.saveStatusJSON(statusJSON, jiraID);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			return Response.ok(flag).build();
		}
		return Response.ok(flag).build();
	}

	public boolean createPOST(String bodyData, URL verifyUrl, String jiraID) {

		boolean isSaved = false;
		StringBuffer response = null;
		String accessToken = null;
		try {
			accessToken = mongoDBAccessToken(jiraID);
			LOGGER.info("MONGO Token : " + accessToken);
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();

			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestProperty("userEmail", "apibanking@icicibank.com");
			webProxyConnection.setRequestProperty("userKey", "LzmMG$FoGpoj%");
			webProxyConnection.setRequestProperty("accessToken", accessToken);
			webProxyConnection.setRequestProperty("JiraID", jiraID);
			webProxyConnection.setRequestMethod("POST");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}
			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("POST Response Code for MONGODB : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				isSaved = true;
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		LOGGER.info("isSaved :" + isSaved);
		return isSaved;
	}

	public String createGET(URL verifyUrl) {

		String strresponse = null;
		StringBuffer response = null;
		try {
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();

			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("GET");

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("GET Response Code for MONGODB : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return strresponse;
	}

	@POST
	@Path("/getDocFileDownload")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_OCTET_STREAM)
	public Response getDocFileDownload(InputStream incomingData) {
		File fileDownload = null;
		JSONObject json = null;
		FileInputStream fis = null;
		boolean flag = false;
		ResponseModel responseModel = new ResponseModel();
		StringBuilder sb = new StringBuilder();
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(incomingData));
			String line = null;
			while ((line = br.readLine()) != null) {
				sb.append(line.trim());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			json = new JSONObject(sb.toString());
		} catch (JSONException e2) {
			e2.printStackTrace();
		}

		String jiraID = json.getString("jiraID");
		String apiName = json.getString("apiName");
		String apiID = json.getString("apiID");
		String type = json.getString("type");

		String filePath = diyStandardDao.getJiraFilePath(jiraID, apiName, apiID, type);
		LOGGER.info("filePath : " + filePath);

		if (filePath != null) {
			fileDownload = new File(filePath);
			try {
				fis = new FileInputStream(fileDownload);
			} catch (FileNotFoundException e) {
				flag = true;
			}
		}
		if (flag == true) {
			responseModel.setMessage("FILE NOT FOUND");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).type(MediaType.APPLICATION_JSON).build();
		}
		return Response.ok(fis, MediaType.APPLICATION_OCTET_STREAM)
				.header("content-disposition", "attachment; filename = " + fileDownload.getName()).build();
	}

	@POST
	@Path("/saveSIT")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response saveSIT(@FormParam("jiraID") String jiraID, @FormParam("apiName") String apiName,
			@FormParam("sitPacket") String sitPacket, @FormParam("userName") String userName,
			@FormParam("apiProduct") String apiProduct, @FormParam("statusJSON") String statusJSON) {

		ResponseModel responseModel = new ResponseModel();
		String responsePacket = null;
		HttpURLConnection webProxyConnection = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String finalRequest = null;
		int testRunCount = 0;
		String totalPacket = null;
		String endpoint = null;
		String requestType = null;
		String webServiceType = null;
		boolean isSaved = false;
		String clientCode = null;
		JSONObject finalRequestJSON = null;
		String targetRequest = null;
		String targetResponse = null;
		String plainRequest = null;
		String plainResponse = null;
		DIYGenericStandardModel genericDetails = null;
		try {
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			if (apiProduct.equalsIgnoreCase("Collections")) {
				ZonedDateTime currentTime = ZonedDateTime.now(ZoneOffset.ofHoursMinutes(5, 30));
				String formattedTime = currentTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
				JSONArray sitPacketArr = new JSONArray(sitPacket);
				try {
					testRunCount = diyStandardDao.testRunCountSIT(jiraID, apiName);
					if (apiName.equals("receipt") || apiName.equals("validation")) {
						clientCode = diyStandardDao.getClientCodeOutbound(jiraID, apiName);
					}
					LOGGER.info("testRunCount : " + testRunCount);
					endpoint = genericDetails.getEndpoint();
					totalPacket = genericDetails.getRequestPacket();
					requestType = genericDetails.getType();
					LOGGER.info("apiName : " + apiName);
					LOGGER.info("totalPacket : " + totalPacket);
					LOGGER.info("ActualPacket : " + sitPacketArr.getJSONObject(0));
					if (requestType.equalsIgnoreCase("JSON")) {
						webServiceType = "application/json";
						finalRequest = createJSONPacket(totalPacket, sitPacketArr.getJSONObject(0).toString());
						finalRequestJSON = new JSONObject(finalRequest);
					} else if (requestType.equalsIgnoreCase("XML")) {
						webServiceType = "text/xml; charset=utf-8";
						if (apiName.equalsIgnoreCase("Insta Alert")) {
							finalRequest = createXMLPacketGas(totalPacket, sitPacketArr.getJSONObject(0).toString());
						} else {
							finalRequest = createXMLPacket(totalPacket, sitPacketArr.getJSONObject(0).toString());
						}
					}
					switch (apiName) {
					case "ecollection-intimation":
						break;
					case "intimation/MODEL-5":
						if (finalRequestJSON.has("request_datetime")) {
							finalRequestJSON.put("request_datetime", formattedTime);
						}
						if (finalRequestJSON.has("payment_mode")) {
							String pMode = finalRequestJSON.getString("payment_mode");
							if (pMode.equals("NEFT")) {
								finalRequestJSON.put("transaction_id_type", "UTR");
							} else if (pMode.equals("RTGS")) {
								finalRequestJSON.put("transaction_id_type", "UTR");
							} else if (pMode.equals("IMPS")) {
								finalRequestJSON.put("transaction_id_type", "RRN");
							} else if (pMode.equals("FT")) {
								finalRequestJSON.put("transaction_id_type", "TRANID");
								finalRequestJSON.put("sender_ifsc_code", "");
							} else if (pMode.equals("UPI")) {
								finalRequestJSON.put("transaction_id_type", "RRN");
							}
						}
						if (finalRequestJSON.has("currency_code")) {
							finalRequestJSON.put("currency_code", "INR");
						}
						if (finalRequestJSON.has("request_priority")) {
							finalRequestJSON.put("request_priority", 1);
						}
						if (finalRequestJSON.has("requires_message_delivery_report_indicator")) {
							finalRequestJSON.put("requires_message_delivery_report_indicator", false);
						}
						if (finalRequestJSON.has("test_indicator")) {
							finalRequestJSON.put("test_indicator", false);
						}
						if (finalRequestJSON.has("resent_indicator")) {
							finalRequestJSON.put("resent_indicator", false);
						}
						if (finalRequestJSON.has("sender_system_user_id_type")) {
							String senderSysUserIDType = finalRequestJSON.getString("sender_system_user_id_type");
							if (senderSysUserIDType.equals("") || senderSysUserIDType == null
									|| senderSysUserIDType == "") {
								finalRequestJSON.put("sender_system_user_id_type", "test@123.com");
							} else {
								finalRequestJSON.put("sender_system_user_id_type", senderSysUserIDType);
							}
						}
						if (finalRequestJSON.has("sender_system_user_id")) {
							String senderSysUserID = finalRequestJSON.getString("sender_system_user_id");
							if (senderSysUserID.equals("") || senderSysUserID == null || senderSysUserID == "") {
								finalRequestJSON.put("sender_system_user_id", "test@123.com");
							} else {
								finalRequestJSON.put("sender_system_user_id", senderSysUserID);
							}
						}
						if (finalRequestJSON.has("sender_system_id")) {
							String senderSysId = finalRequestJSON.getString("sender_system_id");
							if (senderSysId.equals("") || senderSysId == null || senderSysId == "") {
								finalRequestJSON.put("sender_system_id", "Profunds");
							} else {
								finalRequestJSON.put("sender_system_id", senderSysId);
							}
						}
						if (finalRequestJSON.has("request_id")) {
							String requestID = finalRequestJSON.getString("request_id");
							if (requestID.equals("") || requestID == null || requestID == "") {
								finalRequestJSON.put("request_id", "1111");
							} else {
								finalRequestJSON.put("request_id", requestID);
							}
						}
						if (finalRequestJSON.has("client_account_number")) {
							String clientAccNum = finalRequestJSON.getString("client_account_number");
							if (clientAccNum.equals("") || clientAccNum == null || clientAccNum == "") {
								finalRequestJSON.put("client_account_number", "0012001201012");
							} else {
								finalRequestJSON.put("client_account_number", clientAccNum);
							}
						}
						if (finalRequestJSON.has("client_account_name")) {
							String clientAccName = finalRequestJSON.getString("client_account_name");
							if (clientAccName.equals("") || clientAccName == null || clientAccName == "") {
								finalRequestJSON.put("client_account_name", "ICICI");
							} else {
								finalRequestJSON.put("client_account_name", clientAccName);
							}
						}
						if (finalRequestJSON.has("client_ifsc_code")) {
							String clientIFSC = finalRequestJSON.getString("client_ifsc_code");
							if (clientIFSC.equals("") || clientIFSC == null || clientIFSC == "") {
								finalRequestJSON.put("client_ifsc_code", "ICICI023231");
							} else {
								finalRequestJSON.put("client_ifsc_code", clientIFSC);
							}
						}
						if (finalRequestJSON.has("api_version")) {
							finalRequestJSON.put("api_version", "1.2.0");
						}
						if (finalRequestJSON.has("product_type")) {
							finalRequestJSON.put("product_type", "eCollection/message-holding");
						}
						if (finalRequestJSON.has("message_type")) {
							finalRequestJSON.put("message_type", "MODEL-5");
						}
						if (finalRequestJSON.has("operation_name")) {
							finalRequestJSON.put("operation_name", "intimation");
						}
						finalRequest = finalRequestJSON.toString();
						break;
					case "intimation/MODEL-7":
						if (finalRequestJSON.has("request_datetime")) {
							finalRequestJSON.put("request_datetime", formattedTime);
						}
						if (finalRequestJSON.has("payment_mode")) {
							String pMode = finalRequestJSON.getString("payment_mode");
							if (pMode.equals("NEFT")) {
								finalRequestJSON.put("transaction_id_type", "UTR");
							} else if (pMode.equals("RTGS")) {
								finalRequestJSON.put("transaction_id_type", "UTR");
							} else if (pMode.equals("IMPS")) {
								finalRequestJSON.put("transaction_id_type", "RRN");
							} else if (pMode.equals("FT")) {
								finalRequestJSON.put("transaction_id_type", "TRANID");
								finalRequestJSON.put("sender_ifsc_code", "");
							} else if (pMode.equals("UPI")) {
								finalRequestJSON.put("transaction_id_type", "RRN");
							}
						}

						if (finalRequestJSON.has("currency_code")) {
							finalRequestJSON.put("currency_code", "INR");
						}
						if (finalRequestJSON.has("request_priority")) {
							finalRequestJSON.put("request_priority", 1);
						}
						if (finalRequestJSON.has("requires_message_delivery_report_indicator")) {
							finalRequestJSON.put("requires_message_delivery_report_indicator", false);
						}
						if (finalRequestJSON.has("test_indicator")) {
							finalRequestJSON.put("test_indicator", false);
						}
						if (finalRequestJSON.has("resent_indicator")) {
							finalRequestJSON.put("resent_indicator", false);
						}
						if (finalRequestJSON.has("sender_system_user_id_type")) {
							String senderSysUserIDType = finalRequestJSON.getString("sender_system_user_id_type");
							if (senderSysUserIDType.equals("") || senderSysUserIDType == null
									|| senderSysUserIDType == "") {
								finalRequestJSON.put("sender_system_user_id_type", "test@123.com");
							} else {
								finalRequestJSON.put("sender_system_user_id_type", senderSysUserIDType);
							}
						}
						if (finalRequestJSON.has("sender_system_user_id")) {
							String senderSysUserID = finalRequestJSON.getString("sender_system_user_id");
							if (senderSysUserID.equals("") || senderSysUserID == null || senderSysUserID == "") {
								finalRequestJSON.put("sender_system_user_id", "test@123.com");
							} else {
								finalRequestJSON.put("sender_system_user_id", senderSysUserID);
							}
						}
						if (finalRequestJSON.has("sender_system_id")) {
							String senderSysId = finalRequestJSON.getString("sender_system_id");
							if (senderSysId.equals("") || senderSysId == null || senderSysId == "") {
								finalRequestJSON.put("sender_system_id", "Profunds");
							} else {
								finalRequestJSON.put("sender_system_id", senderSysId);
							}
						}
						if (finalRequestJSON.has("request_id")) {
							String requestID = finalRequestJSON.getString("request_id");
							if (requestID.equals("") || requestID == null || requestID == "") {
								finalRequestJSON.put("request_id", "1111");
							} else {
								finalRequestJSON.put("request_id", requestID);
							}
						}
						if (finalRequestJSON.has("client_account_number")) {
							String clientAccNum = finalRequestJSON.getString("client_account_number");
							if (clientAccNum.equals("") || clientAccNum == null || clientAccNum == "") {
								finalRequestJSON.put("client_account_number", "0012001201012");
							} else {
								finalRequestJSON.put("client_account_number", clientAccNum);
							}
						}
						if (finalRequestJSON.has("client_account_name")) {
							String clientAccName = finalRequestJSON.getString("client_account_name");
							if (clientAccName.equals("") || clientAccName == null || clientAccName == "") {
								finalRequestJSON.put("client_account_name", "ICICI");
							} else {
								finalRequestJSON.put("client_account_name", clientAccName);
							}
						}
						if (finalRequestJSON.has("client_ifsc_code")) {
							String clientIFSC = finalRequestJSON.getString("client_ifsc_code");
							if (clientIFSC.equals("") || clientIFSC == null || clientIFSC == "") {
								finalRequestJSON.put("client_ifsc_code", "ICICI023231");
							} else {
								finalRequestJSON.put("client_ifsc_code", clientIFSC);
							}
						}
						if (finalRequestJSON.has("api_version")) {
							finalRequestJSON.put("api_version", "1.2.0");
						}
						if (finalRequestJSON.has("product_type")) {
							finalRequestJSON.put("product_type", "eCollection/message-holding");
						}
						if (finalRequestJSON.has("message_type")) {
							finalRequestJSON.put("message_type", "MODEL-7");
						}
						if (finalRequestJSON.has("operation_name")) {
							finalRequestJSON.put("operation_name", "intimation");
						}
						if (finalRequestJSON.has("channel_id")) {
							finalRequestJSON.put("channel_id", "Profunds");
						}
						finalRequest = finalRequestJSON.toString();
						break;
					case "credit_confirmation/MODEL-7":
						if (finalRequestJSON.has("request_datetime")) {
							finalRequestJSON.put("request_datetime", formattedTime);
						}
						if (finalRequestJSON.has("payment_mode")) {
							String pMode = finalRequestJSON.getString("payment_mode");
							if (pMode.equals("NEFT")) {
								finalRequestJSON.put("transaction_id_type", "UTR");
							} else if (pMode.equals("RTGS")) {
								finalRequestJSON.put("transaction_id_type", "UTR");
							} else if (pMode.equals("IMPS")) {
								finalRequestJSON.put("transaction_id_type", "RRN");
							} else if (pMode.equals("FT")) {
								finalRequestJSON.put("transaction_id_type", "TRANID");
								finalRequestJSON.put("sender_ifsc_code", "");
							} else if (pMode.equals("UPI")) {
								finalRequestJSON.put("transaction_id_type", "RRN");
							}
						}
						if (finalRequestJSON.has("currency_code")) {
							finalRequestJSON.put("currency_code", "INR");
						}
						if (finalRequestJSON.has("request_priority")) {
							finalRequestJSON.put("request_priority", 1);
						}
						if (finalRequestJSON.has("requires_message_delivery_report_indicator")) {
							finalRequestJSON.put("requires_message_delivery_report_indicator", false);
						}
						if (finalRequestJSON.has("test_indicator")) {
							finalRequestJSON.put("test_indicator", false);
						}
						if (finalRequestJSON.has("resent_indicator")) {
							finalRequestJSON.put("resent_indicator", false);
						}
						if (finalRequestJSON.has("sender_system_user_id_type")) {
							String senderSysUserIDType = finalRequestJSON.getString("sender_system_user_id_type");
							if (senderSysUserIDType.equals("") || senderSysUserIDType == null
									|| senderSysUserIDType == "") {
								finalRequestJSON.put("sender_system_user_id_type", "test@123.com");
							} else {
								finalRequestJSON.put("sender_system_user_id_type", senderSysUserIDType);
							}
						}
						if (finalRequestJSON.has("sender_system_user_id")) {
							String senderSysUserID = finalRequestJSON.getString("sender_system_user_id");
							if (senderSysUserID.equals("") || senderSysUserID == null || senderSysUserID == "") {
								finalRequestJSON.put("sender_system_user_id", "test@123.com");
							} else {
								finalRequestJSON.put("sender_system_user_id", senderSysUserID);
							}
						}
						if (finalRequestJSON.has("sender_system_id")) {
							String senderSysId = finalRequestJSON.getString("sender_system_id");
							if (senderSysId.equals("") || senderSysId == null || senderSysId == "") {
								finalRequestJSON.put("sender_system_id", "Profunds");
							} else {
								finalRequestJSON.put("sender_system_id", senderSysId);
							}
						}
						if (finalRequestJSON.has("request_id")) {
							String requestID = finalRequestJSON.getString("request_id");
							if (requestID.equals("") || requestID == null || requestID == "") {
								finalRequestJSON.put("request_id", "1111");
							} else {
								finalRequestJSON.put("request_id", requestID);
							}
						}
						if (finalRequestJSON.has("client_account_number")) {
							String clientAccNum = finalRequestJSON.getString("client_account_number");
							if (clientAccNum.equals("") || clientAccNum == null || clientAccNum == "") {
								finalRequestJSON.put("client_account_number", "0012001201012");
							} else {
								finalRequestJSON.put("client_account_number", clientAccNum);
							}
						}
						if (finalRequestJSON.has("client_account_name")) {
							String clientAccName = finalRequestJSON.getString("client_account_name");
							if (clientAccName.equals("") || clientAccName == null || clientAccName == "") {
								finalRequestJSON.put("client_account_name", "ICICI");
							} else {
								finalRequestJSON.put("client_account_name", clientAccName);
							}
						}
						if (finalRequestJSON.has("client_ifsc_code")) {
							String clientIFSC = finalRequestJSON.getString("client_ifsc_code");
							if (clientIFSC.equals("") || clientIFSC == null || clientIFSC == "") {
								finalRequestJSON.put("client_ifsc_code", "ICICI023231");
							} else {
								finalRequestJSON.put("client_ifsc_code", clientIFSC);
							}
						}
						if (finalRequestJSON.has("api_version")) {
							finalRequestJSON.put("api_version", "1.2.0");
						}
						if (finalRequestJSON.has("product_type")) {
							finalRequestJSON.put("product_type", "eCollection/message-holding");
						}
						if (finalRequestJSON.has("message_type")) {
							finalRequestJSON.put("message_type", "MODEL-7");
						}
						if (finalRequestJSON.has("operation_name")) {
							finalRequestJSON.put("operation_name", "credit_confirmation");
						}
						if (finalRequestJSON.has("channel_id")) {
							finalRequestJSON.put("channel_id", "Profunds");
						}
						finalRequest = finalRequestJSON.toString();
						break;
					case "receipt":
						endpoint = endpoint + "/" + clientCode + "/receipt";
						break;
					case "validation":
						endpoint = endpoint + "/" + clientCode + "/validation";
						break;
					case "Insta Alert":
						break;
					default:
						LOGGER.info("Default block called");
					}
					LOGGER.info("requestType : " + requestType);
					verifyUrl = new URL(endpoint.toString());
					LOGGER.info("verifyUrl : " + verifyUrl);
					LOGGER.info("finalRequest : " + finalRequest);
					LOGGER.info("webServiceType parsed: " + webServiceType);
					testRunCount = diyStandardDao.testRunCountSIT(jiraID, apiName);
					LOGGER.info("testRunCount : " + testRunCount);
					webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
					webProxyConnection.setDoOutput(true);
					webProxyConnection.setDoInput(true);
					webProxyConnection.setRequestProperty("Content-Type", webServiceType);
					webProxyConnection.setRequestProperty("X-IBM-Client-Id",
							"v4z0W4dWcu8AovbMj3N59CVx5FJZ563s7OAAtVJwqiTKDZah");
					webProxyConnection.setRequestMethod("POST");
					try (OutputStream os = webProxyConnection.getOutputStream()) {
						byte[] input = finalRequest.getBytes("utf-8");
						os.write(input, 0, input.length);
					}
					int responseCode = webProxyConnection.getResponseCode();
					LOGGER.info("GET SIT Response Code :: " + responseCode);
					if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
						BufferedReader in = new BufferedReader(
								new InputStreamReader(webProxyConnection.getInputStream()));
						String inputLine;
						response = new StringBuffer();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						// print result
						responsePacket = response.toString();
						JSONObject targetReqRes = new JSONObject(responsePacket);
						try {
							if (targetReqRes.has("TargetFinalRequest")) {
								targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
								LOGGER.info("targetRequest : " + targetRequest);
							} else {
								targetRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetRequest = "";
						}
						try {
							if (targetReqRes.has("TargetResponse")) {
								targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
								LOGGER.info("targetResponse : " + targetResponse);
							} else {
								targetResponse = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetResponse = "";
						}
						try {
							if (targetReqRes.has("RequestBeforeEncryption")) {
								plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
								LOGGER.info("plainRequest : " + plainRequest);
							} else {
								plainRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainRequest = "";
						}
						try {
							if (!apiName.equals("Insta Alert") || apiName != "Insta Alert"
									|| !apiName.equals("Cheque Collection") || apiName != "Cheque Collection") {
								if (targetReqRes.has("ResponseAfterDecryption")) {
									plainResponse = decodeKey(targetReqRes.get("ResponseAfterDecryption").toString());
									LOGGER.info("plainResponse : " + plainResponse);
								} else {
									plainResponse = "";
								}
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainResponse = "";
						}
					} else {
						BufferedReader in = new BufferedReader(
								new InputStreamReader(webProxyConnection.getErrorStream()));
						String inputLine;
						response = new StringBuffer();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						responsePacket = response.toString();
						LOGGER.info("GET request not worked : " + responsePacket);
						JSONObject targetReqRes = new JSONObject(responsePacket);
						try {
							if (targetReqRes.has("TargetFinalRequest")) {
								targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
								LOGGER.info("targetRequest : " + targetRequest);
							} else {
								targetRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetRequest = "";
						}
						try {
							if (targetReqRes.has("TargetResponse")) {
								targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
								LOGGER.info("targetResponse : " + targetResponse);
							} else {
								targetResponse = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetResponse = "";
						}
						try {
							if (targetReqRes.has("RequestBeforeEncryption")) {
								plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
								LOGGER.info("plainRequest : " + plainRequest);
							} else {
								plainRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainRequest = "";
						}
						try {
							if (!apiName.equals("Insta Alert") || apiName != "Insta Alert"
									|| !apiName.equals("Cheque Collection") || apiName != "Cheque Collection") {
								if (targetReqRes.has("ResponseAfterDecryption")) {
									plainResponse = decodeKey(targetReqRes.get("ResponseAfterDecryption").toString());
									LOGGER.info("plainResponse : " + plainResponse);
								} else {
									plainResponse = "";
								}
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainResponse = "";
						}
					}
					isSaved = diyStandardDao.createSITTestingData(jiraID, userName, apiProduct, apiName, testRunCount,
							finalRequest, responsePacket, responseCode, targetRequest, targetResponse, plainRequest,
							plainResponse);
					if (isSaved == true) {
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						responseModel.setData(responsePacket);
						responseModel.setStatus(true);
						responseModel.setMessage("Data saved Successfully.");
						responseModel.setStatus_code(responseCode);
					} else {
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						responseModel.setData(responsePacket);
						responseModel.setMessage("Data retrived Failed ..");
						responseModel.setStatus(true);
						responseModel.setStatus_code(responseCode);
					}
				} catch (Exception e) {
					StringWriter ex = new StringWriter();
					e.printStackTrace(new PrintWriter(ex));
					LOGGER.error("Exception:" + ex.toString());
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				JSONArray sitPacketArr = new JSONArray(sitPacket);
				try {
					testRunCount = diyStandardDao.testRunCountSIT(jiraID, apiName);
					LOGGER.info("testRunCount : " + testRunCount);
					endpoint = genericDetails.getEndpoint();
					totalPacket = genericDetails.getRequestPacket();
					requestType = genericDetails.getType();
					LOGGER.info("apiName : " + apiName);
					LOGGER.info("totalPacket : " + totalPacket);
					LOGGER.info("SIT Packet : " + sitPacketArr.getJSONObject(0));
					if (requestType == "JSON" || requestType.equalsIgnoreCase("JSON")) {
						webServiceType = "application/json";
						ObjectMapper mapper = new ObjectMapper();
						ObjectNode oldPacketNode = (ObjectNode) mapper.readTree(totalPacket);
						ObjectNode newPacketNode = (ObjectNode) mapper
								.readTree(sitPacketArr.getJSONObject(0).toString());

						replaceMatchingKeysRecusive(oldPacketNode, newPacketNode);
						LOGGER.info(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(oldPacketNode));
						finalRequestJSON = new JSONObject(
								mapper.writerWithDefaultPrettyPrinter().writeValueAsString(oldPacketNode));
						finalRequest = finalRequestJSON.toString();
					}
					LOGGER.info("requestType : " + requestType);
					verifyUrl = new URL(endpoint.toString());
					LOGGER.info("verifyUrl : " + verifyUrl);
					LOGGER.info("finalRequest : " + finalRequest);
					LOGGER.info("webServiceType parsed: " + webServiceType);
					testRunCount = diyStandardDao.testRunCountSIT(jiraID, apiName);
					LOGGER.info("testRunCount : " + testRunCount);
					webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
					webProxyConnection.setDoOutput(true);
					webProxyConnection.setDoInput(true);
					webProxyConnection.setRequestProperty("Content-Type", webServiceType);
					webProxyConnection.setRequestProperty("X-IBM-Client-Id",
							"v4z0W4dWcu8AovbMj3N59CVx5FJZ563s7OAAtVJwqiTKDZah");
					webProxyConnection.setRequestProperty("apikey", "3u5zDZ3UaNmFxBIBNAM1IfK1fFtstKjTPRWYDih9dWzfMbjn");
					webProxyConnection.setRequestMethod("POST");
					try (OutputStream os = webProxyConnection.getOutputStream()) {
						byte[] input = finalRequest.getBytes("utf-8");
						os.write(input, 0, input.length);
					}
					int responseCode = webProxyConnection.getResponseCode();
					LOGGER.info("GET SIT Response Code :: " + responseCode);
					if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
						BufferedReader in = new BufferedReader(
								new InputStreamReader(webProxyConnection.getInputStream()));
						String inputLine;
						response = new StringBuffer();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						// print result
						responsePacket = response.toString();
						JSONObject targetReqRes = new JSONObject(responsePacket);
						try {
							if (targetReqRes.has("TargetFinalRequest")) {
								targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
								LOGGER.info("targetRequest : " + targetRequest);
							} else {
								targetRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetRequest = "";
						}
						try {
							if (targetReqRes.has("TargetResponse")) {
								targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
								LOGGER.info("targetResponse : " + targetResponse);
							} else {
								targetResponse = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetResponse = "";
						}
						try {
							if (targetReqRes.has("RequestBeforeEncryption")) {
								plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
								LOGGER.info("plainRequest : " + plainRequest);
							} else {
								plainRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainRequest = "";
						}
						try {
							if (targetReqRes.has("ResponseAfterDecryption")) {
								plainResponse = decodeKey(targetReqRes.get("ResponseAfterDecryption").toString());
								LOGGER.info("plainResponse : " + plainResponse);
							} else {
								plainResponse = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainResponse = "";
						}
					} else {
						BufferedReader in = new BufferedReader(
								new InputStreamReader(webProxyConnection.getErrorStream()));
						String inputLine;
						response = new StringBuffer();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						responsePacket = response.toString();
						LOGGER.info("GET request not worked : " + responsePacket);
						JSONObject targetReqRes = new JSONObject(responsePacket);
						try {
							if (targetReqRes.has("TargetFinalRequest")) {
								targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
								LOGGER.info("targetRequest : " + targetRequest);
							} else {
								targetRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetRequest = "";
						}
						try {
							if (targetReqRes.has("TargetResponse")) {
								targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
								LOGGER.info("targetResponse : " + targetResponse);
							} else {
								targetResponse = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							targetResponse = "";
						}
						try {
							if (targetReqRes.has("RequestBeforeEncryption")) {
								plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
								LOGGER.info("plainRequest : " + plainRequest);
							} else {
								plainRequest = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainRequest = "";
						}
						try {
							if (targetReqRes.has("ResponseAfterDecryption")) {
								plainResponse = decodeKey(targetReqRes.get("ResponseAfterDecryption").toString());
								LOGGER.info("plainResponse : " + plainResponse);
							} else {
								plainResponse = "";
							}
						} catch (Exception e) {
							LOGGER.error(apiName + " --->  " + jiraID);
							plainResponse = "";
						}
					}
					isSaved = diyStandardDao.createSITTestingData(jiraID, userName, apiProduct, apiName, testRunCount,
							finalRequest, responsePacket, responseCode, targetRequest, targetResponse, plainRequest,
							plainResponse);
					if (isSaved == true) {
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						responseModel.setData(responsePacket);
						responseModel.setStatus(true);
						responseModel.setMessage("Data saved Successfully.");
						responseModel.setStatus_code(responseCode);
					} else {
						diyStandardDao.saveStatusJSON(statusJSON, jiraID);
						responseModel.setData(responsePacket);
						responseModel.setMessage("Data retrived Failed ..");
						responseModel.setStatus(true);
						responseModel.setStatus_code(responseCode);
					}
				} catch (Exception e) {
					StringWriter ex = new StringWriter();
					e.printStackTrace(new PrintWriter(ex));
					LOGGER.error("Exception:" + ex.toString());
				}
			} else {
				LOGGER.info("Product not matched");
				responseModel.setMessage("Product not matched");
				responseModel.setStatus(false);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
		} catch (Exception e) {
			responseModel.setData(responsePacket);
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	@POST
	@Path("/saveUAT")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response saveUAT(@FormParam("jiraID") String jiraID, @FormParam("apiName") String apiName,
			@FormParam("uatPacket") String uatPacket, @FormParam("userName") String userName,
			@FormParam("apiProduct") String apiProduct, @FormParam("statusJSON") String statusJSON) {

		ResponseModel responseModel = new ResponseModel();
		String responsePacket = null;
		HttpURLConnection webProxyConnection = null;
		StringBuffer response = null;
		URL verifyUrl = null;
		String finalRequest = null;
		int testRunCount = 0;
		String totalPacket = null;
		String endpoint = null;
		String requestType = null;
		String webServiceType = null;
		boolean isSaved = false;
		int counter = 0;
		JSONObject finalRequestJSON = null;
		String clientCode = null;
		String targetRequest = null;
		String targetResponse = null;
		String plainRequest = null;
		String plainResponse = null;
		DIYGenericStandardModel genericDetails = null;
		try {
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			if (apiProduct.equalsIgnoreCase("Collections")) {
				ZonedDateTime currentTime = ZonedDateTime.now(ZoneOffset.ofHoursMinutes(5, 30));
				String formattedTime = currentTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
				JSONObject uatJSON = new JSONObject(uatPacket);
				for (int i = 0; i < uatJSON.length(); i++) {
					JSONObject data = uatJSON.getJSONObject("Test-" + ++counter);
					LOGGER.info("Test" + counter + " : " + data);
					String packet = data.toString();
					LOGGER.info("ActualPacket : " + packet);
					try {
						endpoint = genericDetails.getEndpoint();
						totalPacket = genericDetails.getRequestPacket();
						requestType = genericDetails.getType();
						if (apiName.equals("receipt") || apiName.equals("validation")) {
							clientCode = diyStandardDao.getClientCodeOutbound(jiraID, apiName);
						}

						if (requestType == "JSON" || requestType.equalsIgnoreCase("JSON")) {
							webServiceType = "application/json";
							finalRequest = createJSONPacket(totalPacket, packet);
							finalRequestJSON = new JSONObject(finalRequest);
						} else if (requestType == "XML" || requestType.equalsIgnoreCase("XML")) {
							webServiceType = "text/xml; charset=utf-8";
							if (apiName.equalsIgnoreCase("Insta Alert")) {
								finalRequest = createXMLPacketGas(totalPacket, packet);
							} else {
								finalRequest = createXMLPacket(totalPacket, packet);
							}
						}

						switch (apiName) {
						case "ecollection-intimation":
							break;
						case "intimation/MODEL-5":
							if (finalRequestJSON.has("request_datetime")) {
								finalRequestJSON.put("request_datetime", formattedTime);
							}
							if (finalRequestJSON.has("payment_mode")) {
								String pMode = finalRequestJSON.getString("payment_mode");
								if (pMode.equals("NEFT")) {
									finalRequestJSON.put("transaction_id_type", "UTR");
								} else if (pMode.equals("RTGS")) {
									finalRequestJSON.put("transaction_id_type", "UTR");
								} else if (pMode.equals("IMPS")) {
									finalRequestJSON.put("transaction_id_type", "RRN");
								} else if (pMode.equals("FT")) {
									finalRequestJSON.put("transaction_id_type", "TRANID");
									finalRequestJSON.put("sender_ifsc_code", "");
								} else if (pMode.equals("UPI")) {
									finalRequestJSON.put("transaction_id_type", "RRN");
								}
							}
							if (finalRequestJSON.has("currency_code")) {
								finalRequestJSON.put("currency_code", "INR");
							}
							if (finalRequestJSON.has("request_priority")) {
								finalRequestJSON.put("request_priority", 1);
							}
							if (finalRequestJSON.has("requires_message_delivery_report_indicator")) {
								finalRequestJSON.put("requires_message_delivery_report_indicator", false);
							}
							if (finalRequestJSON.has("test_indicator")) {
								finalRequestJSON.put("test_indicator", false);
							}
							if (finalRequestJSON.has("resent_indicator")) {
								finalRequestJSON.put("resent_indicator", false);
							}
							if (finalRequestJSON.has("sender_system_user_id_type")) {
								String senderSysUserIDType = finalRequestJSON.getString("sender_system_user_id_type");
								if (senderSysUserIDType.equals("") || senderSysUserIDType == null
										|| senderSysUserIDType == "") {
									finalRequestJSON.put("sender_system_user_id_type", "test@123.com");
								} else {
									finalRequestJSON.put("sender_system_user_id_type", senderSysUserIDType);
								}
							}
							if (finalRequestJSON.has("sender_system_user_id")) {
								String senderSysUserID = finalRequestJSON.getString("sender_system_user_id");
								if (senderSysUserID.equals("") || senderSysUserID == null || senderSysUserID == "") {
									finalRequestJSON.put("sender_system_user_id", "test@123.com");
								} else {
									finalRequestJSON.put("sender_system_user_id", senderSysUserID);
								}
							}
							if (finalRequestJSON.has("sender_system_id")) {
								String senderSysId = finalRequestJSON.getString("sender_system_id");
								if (senderSysId.equals("") || senderSysId == null || senderSysId == "") {
									finalRequestJSON.put("sender_system_id", "Profunds");
								} else {
									finalRequestJSON.put("sender_system_id", senderSysId);
								}
							}
							if (finalRequestJSON.has("request_id")) {
								String requestID = finalRequestJSON.getString("request_id");
								if (requestID.equals("") || requestID == null || requestID == "") {
									finalRequestJSON.put("request_id", "1111");
								} else {
									finalRequestJSON.put("request_id", requestID);
								}
							}
							if (finalRequestJSON.has("client_account_number")) {
								String clientAccNum = finalRequestJSON.getString("client_account_number");
								if (clientAccNum.equals("") || clientAccNum == null || clientAccNum == "") {
									finalRequestJSON.put("client_account_number", "0012001201012");
								} else {
									finalRequestJSON.put("client_account_number", clientAccNum);
								}
							}
							if (finalRequestJSON.has("client_account_name")) {
								String clientAccName = finalRequestJSON.getString("client_account_name");
								if (clientAccName.equals("") || clientAccName == null || clientAccName == "") {
									finalRequestJSON.put("client_account_name", "ICICI");
								} else {
									finalRequestJSON.put("client_account_name", clientAccName);
								}
							}
							if (finalRequestJSON.has("client_ifsc_code")) {
								String clientIFSC = finalRequestJSON.getString("client_ifsc_code");
								if (clientIFSC.equals("") || clientIFSC == null || clientIFSC == "") {
									finalRequestJSON.put("client_ifsc_code", "ICICI023231");
								} else {
									finalRequestJSON.put("client_ifsc_code", clientIFSC);
								}
							}
							if (finalRequestJSON.has("api_version")) {
								finalRequestJSON.put("api_version", "1.2.0");
							}
							if (finalRequestJSON.has("product_type")) {
								finalRequestJSON.put("product_type", "eCollection/message-holding");
							}
							if (finalRequestJSON.has("message_type")) {
								finalRequestJSON.put("message_type", "MODEL-5");
							}
							if (finalRequestJSON.has("operation_name")) {
								finalRequestJSON.put("operation_name", "intimation");
							}
							finalRequest = finalRequestJSON.toString();
							break;
						case "intimation/MODEL-7":
							if (finalRequestJSON.has("request_datetime")) {
								finalRequestJSON.put("request_datetime", formattedTime);
							}
							if (finalRequestJSON.has("payment_mode")) {
								String pMode = finalRequestJSON.getString("payment_mode");
								if (pMode.equals("NEFT")) {
									finalRequestJSON.put("transaction_id_type", "UTR");
								} else if (pMode.equals("RTGS")) {
									finalRequestJSON.put("transaction_id_type", "UTR");
								} else if (pMode.equals("IMPS")) {
									finalRequestJSON.put("transaction_id_type", "RRN");
								} else if (pMode.equals("FT")) {
									finalRequestJSON.put("transaction_id_type", "TRANID");
									finalRequestJSON.put("sender_ifsc_code", "");
								} else if (pMode.equals("UPI")) {
									finalRequestJSON.put("transaction_id_type", "RRN");
								}
							}

							if (finalRequestJSON.has("currency_code")) {
								finalRequestJSON.put("currency_code", "INR");
							}
							if (finalRequestJSON.has("request_priority")) {
								finalRequestJSON.put("request_priority", 1);
							}
							if (finalRequestJSON.has("requires_message_delivery_report_indicator")) {
								finalRequestJSON.put("requires_message_delivery_report_indicator", false);
							}
							if (finalRequestJSON.has("test_indicator")) {
								finalRequestJSON.put("test_indicator", false);
							}
							if (finalRequestJSON.has("resent_indicator")) {
								finalRequestJSON.put("resent_indicator", false);
							}
							if (finalRequestJSON.has("sender_system_user_id_type")) {
								String senderSysUserIDType = finalRequestJSON.getString("sender_system_user_id_type");
								if (senderSysUserIDType.equals("") || senderSysUserIDType == null
										|| senderSysUserIDType == "") {
									finalRequestJSON.put("sender_system_user_id_type", "test@123.com");
								} else {
									finalRequestJSON.put("sender_system_user_id_type", senderSysUserIDType);
								}
							}
							if (finalRequestJSON.has("sender_system_user_id")) {
								String senderSysUserID = finalRequestJSON.getString("sender_system_user_id");
								if (senderSysUserID.equals("") || senderSysUserID == null || senderSysUserID == "") {
									finalRequestJSON.put("sender_system_user_id", "test@123.com");
								} else {
									finalRequestJSON.put("sender_system_user_id", senderSysUserID);
								}
							}
							if (finalRequestJSON.has("sender_system_id")) {
								String senderSysId = finalRequestJSON.getString("sender_system_id");
								if (senderSysId.equals("") || senderSysId == null || senderSysId == "") {
									finalRequestJSON.put("sender_system_id", "Profunds");
								} else {
									finalRequestJSON.put("sender_system_id", senderSysId);
								}
							}
							if (finalRequestJSON.has("request_id")) {
								String requestID = finalRequestJSON.getString("request_id");
								if (requestID.equals("") || requestID == null || requestID == "") {
									finalRequestJSON.put("request_id", "1111");
								} else {
									finalRequestJSON.put("request_id", requestID);
								}
							}
							if (finalRequestJSON.has("client_account_number")) {
								String clientAccNum = finalRequestJSON.getString("client_account_number");
								if (clientAccNum.equals("") || clientAccNum == null || clientAccNum == "") {
									finalRequestJSON.put("client_account_number", "0012001201012");
								} else {
									finalRequestJSON.put("client_account_number", clientAccNum);
								}
							}
							if (finalRequestJSON.has("client_account_name")) {
								String clientAccName = finalRequestJSON.getString("client_account_name");
								if (clientAccName.equals("") || clientAccName == null || clientAccName == "") {
									finalRequestJSON.put("client_account_name", "ICICI");
								} else {
									finalRequestJSON.put("client_account_name", clientAccName);
								}
							}
							if (finalRequestJSON.has("client_ifsc_code")) {
								String clientIFSC = finalRequestJSON.getString("client_ifsc_code");
								if (clientIFSC.equals("") || clientIFSC == null || clientIFSC == "") {
									finalRequestJSON.put("client_ifsc_code", "ICICI023231");
								} else {
									finalRequestJSON.put("client_ifsc_code", clientIFSC);
								}
							}
							if (finalRequestJSON.has("api_version")) {
								finalRequestJSON.put("api_version", "1.2.0");
							}
							if (finalRequestJSON.has("product_type")) {
								finalRequestJSON.put("product_type", "eCollection/message-holding");
							}
							if (finalRequestJSON.has("message_type")) {
								finalRequestJSON.put("message_type", "MODEL-7");
							}
							if (finalRequestJSON.has("operation_name")) {
								finalRequestJSON.put("operation_name", "intimation");
							}
							if (finalRequestJSON.has("channel_id")) {
								finalRequestJSON.put("channel_id", "Profunds");
							}
							finalRequest = finalRequestJSON.toString();
							break;
						case "credit_confirmation/MODEL-7":
							if (finalRequestJSON.has("request_datetime")) {
								finalRequestJSON.put("request_datetime", formattedTime);
							}
							if (finalRequestJSON.has("payment_mode")) {
								String pMode = finalRequestJSON.getString("payment_mode");
								if (pMode.equals("NEFT")) {
									finalRequestJSON.put("transaction_id_type", "UTR");
								} else if (pMode.equals("RTGS")) {
									finalRequestJSON.put("transaction_id_type", "UTR");
								} else if (pMode.equals("IMPS")) {
									finalRequestJSON.put("transaction_id_type", "RRN");
								} else if (pMode.equals("FT")) {
									finalRequestJSON.put("transaction_id_type", "TRANID");
									finalRequestJSON.put("sender_ifsc_code", "");
								} else if (pMode.equals("UPI")) {
									finalRequestJSON.put("transaction_id_type", "RRN");
								}
							}
							if (finalRequestJSON.has("currency_code")) {
								finalRequestJSON.put("currency_code", "INR");
							}
							if (finalRequestJSON.has("request_priority")) {
								finalRequestJSON.put("request_priority", 1);
							}
							if (finalRequestJSON.has("requires_message_delivery_report_indicator")) {
								finalRequestJSON.put("requires_message_delivery_report_indicator", false);
							}
							if (finalRequestJSON.has("test_indicator")) {
								finalRequestJSON.put("test_indicator", false);
							}
							if (finalRequestJSON.has("resent_indicator")) {
								finalRequestJSON.put("resent_indicator", false);
							}
							if (finalRequestJSON.has("sender_system_user_id_type")) {
								String senderSysUserIDType = finalRequestJSON.getString("sender_system_user_id_type");
								if (senderSysUserIDType.equals("") || senderSysUserIDType == null
										|| senderSysUserIDType == "") {
									finalRequestJSON.put("sender_system_user_id_type", "test@123.com");
								} else {
									finalRequestJSON.put("sender_system_user_id_type", senderSysUserIDType);
								}
							}
							if (finalRequestJSON.has("sender_system_user_id")) {
								String senderSysUserID = finalRequestJSON.getString("sender_system_user_id");
								if (senderSysUserID.equals("") || senderSysUserID == null || senderSysUserID == "") {
									finalRequestJSON.put("sender_system_user_id", "test@123.com");
								} else {
									finalRequestJSON.put("sender_system_user_id", senderSysUserID);
								}
							}
							if (finalRequestJSON.has("sender_system_id")) {
								String senderSysId = finalRequestJSON.getString("sender_system_id");
								if (senderSysId.equals("") || senderSysId == null || senderSysId == "") {
									finalRequestJSON.put("sender_system_id", "Profunds");
								} else {
									finalRequestJSON.put("sender_system_id", senderSysId);
								}
							}
							if (finalRequestJSON.has("request_id")) {
								String requestID = finalRequestJSON.getString("request_id");
								if (requestID.equals("") || requestID == null || requestID == "") {
									finalRequestJSON.put("request_id", "1111");
								} else {
									finalRequestJSON.put("request_id", requestID);
								}
							}
							if (finalRequestJSON.has("client_account_number")) {
								String clientAccNum = finalRequestJSON.getString("client_account_number");
								if (clientAccNum.equals("") || clientAccNum == null || clientAccNum == "") {
									finalRequestJSON.put("client_account_number", "0012001201012");
								} else {
									finalRequestJSON.put("client_account_number", clientAccNum);
								}
							}
							if (finalRequestJSON.has("client_account_name")) {
								String clientAccName = finalRequestJSON.getString("client_account_name");
								if (clientAccName.equals("") || clientAccName == null || clientAccName == "") {
									finalRequestJSON.put("client_account_name", "ICICI");
								} else {
									finalRequestJSON.put("client_account_name", clientAccName);
								}
							}
							if (finalRequestJSON.has("client_ifsc_code")) {
								String clientIFSC = finalRequestJSON.getString("client_ifsc_code");
								if (clientIFSC.equals("") || clientIFSC == null || clientIFSC == "") {
									finalRequestJSON.put("client_ifsc_code", "ICICI023231");
								} else {
									finalRequestJSON.put("client_ifsc_code", clientIFSC);
								}
							}
							if (finalRequestJSON.has("api_version")) {
								finalRequestJSON.put("api_version", "1.2.0");
							}
							if (finalRequestJSON.has("product_type")) {
								finalRequestJSON.put("product_type", "eCollection/message-holding");
							}
							if (finalRequestJSON.has("message_type")) {
								finalRequestJSON.put("message_type", "MODEL-7");
							}
							if (finalRequestJSON.has("operation_name")) {
								finalRequestJSON.put("operation_name", "credit_confirmation");
							}
							if (finalRequestJSON.has("channel_id")) {
								finalRequestJSON.put("channel_id", "Profunds");
							}
							finalRequest = finalRequestJSON.toString();
							break;
						case "receipt":
							endpoint = endpoint + "/" + clientCode + "/receipt";
							break;
						case "validation":
							endpoint = endpoint + "/" + clientCode + "/validation";
							break;
						case "Insta Alert":
							break;
						default:
							LOGGER.info("Default block called");
						}
						verifyUrl = new URL(endpoint.toString());
						LOGGER.info("verifyUrl : " + verifyUrl);
						LOGGER.info("finalRequest : " + finalRequest);
						LOGGER.info("webServiceType parsed: " + webServiceType);
						testRunCount = diyStandardDao.testRunCountUAT(jiraID, apiName);
						LOGGER.info("testRunCount : " + testRunCount);
						webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
						webProxyConnection.setDoOutput(true);
						webProxyConnection.setDoInput(true);
						webProxyConnection.setRequestProperty("Content-Type", webServiceType);
						webProxyConnection.setRequestProperty("X-IBM-Client-Id",
								"v4z0W4dWcu8AovbMj3N59CVx5FJZ563s7OAAtVJwqiTKDZah");
						webProxyConnection.setRequestMethod("POST");
						try (OutputStream os = webProxyConnection.getOutputStream()) {
							byte[] input = finalRequest.getBytes("utf-8");
							os.write(input, 0, input.length);
						}
						int responseCode = webProxyConnection.getResponseCode();
						LOGGER.info("GET UAT Response Code :: " + responseCode);
						if (responseCode == HttpURLConnection.HTTP_OK
								|| responseCode == HttpURLConnection.HTTP_CREATED) {
							BufferedReader in = new BufferedReader(
									new InputStreamReader(webProxyConnection.getInputStream()));
							String inputLine;
							response = new StringBuffer();
							while ((inputLine = in.readLine()) != null) {
								response.append(inputLine);
							}
							in.close();
							// print result
							responsePacket = response.toString();
							JSONObject targetReqRes = new JSONObject(responsePacket);
							try {
								if (targetReqRes.has("TargetFinalRequest")) {
									targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
									LOGGER.info("targetRequest : " + targetRequest);
								} else {
									targetRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetRequest = "";
							}
							try {
								if (targetReqRes.has("TargetResponse")) {
									targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
									LOGGER.info("targetResponse : " + targetResponse);
								} else {
									targetResponse = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetResponse = "";
							}
							try {
								if (targetReqRes.has("RequestBeforeEncryption")) {
									plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
									LOGGER.info("plainRequest : " + plainRequest);
								} else {
									plainRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainRequest = "";
							}
							try {
								if (!apiName.equals("Insta Alert") || apiName != "Insta Alert"
										|| !apiName.equals("Cheque Collection") || apiName != "Cheque Collection") {
									if (targetReqRes.has("ResponseAfterDecryption")) {
										plainResponse = decodeKey(
												targetReqRes.get("ResponseAfterDecryption").toString());
										LOGGER.info("plainResponse : " + plainResponse);
									} else {
										plainResponse = "";
									}
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainResponse = "";
							}
						} else {
							BufferedReader in = new BufferedReader(
									new InputStreamReader(webProxyConnection.getErrorStream()));
							String inputLine;
							response = new StringBuffer();
							while ((inputLine = in.readLine()) != null) {
								response.append(inputLine);
							}
							in.close();
							responsePacket = response.toString();
							LOGGER.info("GET request not worked : " + responsePacket);
							JSONObject targetReqRes = new JSONObject(responsePacket);
							try {
								if (targetReqRes.has("TargetFinalRequest")) {
									targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
									LOGGER.info("targetRequest : " + targetRequest);
								} else {
									targetRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetRequest = "";
							}
							try {
								if (targetReqRes.has("TargetResponse")) {
									targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
									LOGGER.info("targetResponse : " + targetResponse);
								} else {
									targetResponse = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetResponse = "";
							}
							try {
								if (targetReqRes.has("RequestBeforeEncryption")) {
									plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
									LOGGER.info("plainRequest : " + plainRequest);
								} else {
									plainRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainRequest = "";
							}
							try {
								if (!apiName.equals("Insta Alert") || apiName != "Insta Alert"
										|| !apiName.equals("Cheque Collection") || apiName != "Cheque Collection") {
									if (targetReqRes.has("ResponseAfterDecryption")) {
										plainResponse = decodeKey(
												targetReqRes.get("ResponseAfterDecryption").toString());
										LOGGER.info("plainResponse : " + plainResponse);
									} else {
										plainResponse = "";
									}
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainResponse = "";
							}
						}
						isSaved = diyStandardDao.createUATTestingData(jiraID, userName, apiProduct, apiName,
								testRunCount, finalRequest, responsePacket, responseCode, targetRequest, targetResponse,
								plainRequest, plainResponse);
						if (isSaved == true) {
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							responseModel.setData(responsePacket);
							responseModel.setStatus(true);
							responseModel.setMessage("Data saved Successfully.");
							responseModel.setStatus_code(responseCode);
						} else {
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							responseModel.setData(responsePacket);
							responseModel.setMessage("Data retrived Failed ..");
							responseModel.setStatus(true);
							responseModel.setStatus_code(responseCode);
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.error("Exception:" + ex.toString());
					}
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				JSONObject uatJSON = new JSONObject(uatPacket);
				for (int i = 0; i < uatJSON.length(); i++) {
					JSONObject data = uatJSON.getJSONObject("Test-" + ++counter);
					LOGGER.info("Test" + counter + " : " + data);
					String packet = data.toString();
					LOGGER.info("UAT Packet : " + packet);
					try {
						endpoint = genericDetails.getEndpoint();
						totalPacket = genericDetails.getRequestPacket();
						requestType = genericDetails.getType();

						if (requestType == "JSON" || requestType.equalsIgnoreCase("JSON")) {
							webServiceType = "application/json";
							ObjectMapper mapper = new ObjectMapper();
							ObjectNode oldPacketNode = (ObjectNode) mapper.readTree(totalPacket);
							ObjectNode newPacketNode = (ObjectNode) mapper.readTree(packet);

							replaceMatchingKeysRecusive(oldPacketNode, newPacketNode);
							LOGGER.info(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(oldPacketNode));
							finalRequestJSON = new JSONObject(
									mapper.writerWithDefaultPrettyPrinter().writeValueAsString(oldPacketNode));
							finalRequest = finalRequestJSON.toString();
						}

						verifyUrl = new URL(endpoint.toString());
						LOGGER.info("verifyUrl : " + verifyUrl);
						LOGGER.info("finalRequest : " + finalRequest);
						LOGGER.info("webServiceType parsed: " + webServiceType);
						testRunCount = diyStandardDao.testRunCountUAT(jiraID, apiName);
						LOGGER.info("testRunCount : " + testRunCount);
						webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
						webProxyConnection.setDoOutput(true);
						webProxyConnection.setDoInput(true);
						webProxyConnection.setRequestProperty("Content-Type", webServiceType);
						webProxyConnection.setRequestProperty("X-IBM-Client-Id",
								"v4z0W4dWcu8AovbMj3N59CVx5FJZ563s7OAAtVJwqiTKDZah");
						webProxyConnection.setRequestProperty("apikey",
								"3u5zDZ3UaNmFxBIBNAM1IfK1fFtstKjTPRWYDih9dWzfMbjn");
						webProxyConnection.setRequestMethod("POST");
						try (OutputStream os = webProxyConnection.getOutputStream()) {
							byte[] input = finalRequest.getBytes("utf-8");
							os.write(input, 0, input.length);
						}
						int responseCode = webProxyConnection.getResponseCode();
						LOGGER.info("GET UAT Response Code :: " + responseCode);
						if (responseCode == HttpURLConnection.HTTP_OK
								|| responseCode == HttpURLConnection.HTTP_CREATED) {
							BufferedReader in = new BufferedReader(
									new InputStreamReader(webProxyConnection.getInputStream()));
							String inputLine;
							response = new StringBuffer();
							while ((inputLine = in.readLine()) != null) {
								response.append(inputLine);
							}
							in.close();
							// print result
							responsePacket = response.toString();
							JSONObject targetReqRes = new JSONObject(responsePacket);
							try {
								if (targetReqRes.has("TargetFinalRequest")) {
									targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
									LOGGER.info("targetRequest : " + targetRequest);
								} else {
									targetRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetRequest = "";
							}
							try {
								if (targetReqRes.has("TargetResponse")) {
									targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
									LOGGER.info("targetResponse : " + targetResponse);
								} else {
									targetResponse = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetResponse = "";
							}
							try {
								if (targetReqRes.has("RequestBeforeEncryption")) {
									plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
									LOGGER.info("plainRequest : " + plainRequest);
								} else {
									plainRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainRequest = "";
							}
							try {
								if (targetReqRes.has("ResponseAfterDecryption")) {
									plainResponse = decodeKey(targetReqRes.get("ResponseAfterDecryption").toString());
									LOGGER.info("plainResponse : " + plainResponse);
								} else {
									plainResponse = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainResponse = "";
							}
						} else {
							BufferedReader in = new BufferedReader(
									new InputStreamReader(webProxyConnection.getErrorStream()));
							String inputLine;
							response = new StringBuffer();
							while ((inputLine = in.readLine()) != null) {
								response.append(inputLine);
							}
							in.close();
							responsePacket = response.toString();
							LOGGER.info("GET request not worked : " + responsePacket);
							JSONObject targetReqRes = new JSONObject(responsePacket);
							try {
								if (targetReqRes.has("TargetFinalRequest")) {
									targetRequest = decodeKey(targetReqRes.get("TargetFinalRequest").toString());
									LOGGER.info("targetRequest : " + targetRequest);
								} else {
									targetRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetRequest = "";
							}
							try {
								if (targetReqRes.has("TargetResponse")) {
									targetResponse = decodeKey(targetReqRes.get("TargetResponse").toString());
									LOGGER.info("targetResponse : " + targetResponse);
								} else {
									targetResponse = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								targetResponse = "";
							}
							try {
								if (targetReqRes.has("RequestBeforeEncryption")) {
									plainRequest = decodeKey(targetReqRes.get("RequestBeforeEncryption").toString());
									LOGGER.info("plainRequest : " + plainRequest);
								} else {
									plainRequest = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainRequest = "";
							}
							try {
								if (targetReqRes.has("ResponseAfterDecryption")) {
									plainResponse = decodeKey(targetReqRes.get("ResponseAfterDecryption").toString());
									LOGGER.info("plainResponse : " + plainResponse);
								} else {
									plainResponse = "";
								}
							} catch (Exception e) {
								LOGGER.error(apiName + " --->  " + jiraID);
								plainResponse = "";
							}
						}
						isSaved = diyStandardDao.createUATTestingData(jiraID, userName, apiProduct, apiName,
								testRunCount, finalRequest, responsePacket, responseCode, targetRequest, targetResponse,
								plainRequest, plainResponse);
						if (isSaved == true) {
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							responseModel.setData(responsePacket);
							responseModel.setStatus(true);
							responseModel.setMessage("Data saved Successfully.");
							responseModel.setStatus_code(responseCode);
						} else {
							diyStandardDao.saveStatusJSON(statusJSON, jiraID);
							responseModel.setData(responsePacket);
							responseModel.setMessage("Data retrived Failed ..");
							responseModel.setStatus(true);
							responseModel.setStatus_code(responseCode);
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.error("Exception:" + ex.toString());
					}
				}
			} else {
				LOGGER.info("Product not matched");
				responseModel.setMessage("Product not matched");
				responseModel.setStatus(false);
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
		} catch (Exception e) {
			responseModel.setData(responsePacket);
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	public static String createJSONPacket(String samplePacket, String requestPacket) {
		JSONObject result = new JSONObject();
		JSONObject rq1 = new JSONObject(samplePacket);
		JSONObject rq2 = new JSONObject(requestPacket);

		for (String rq1Key : rq1.keySet()) {
			String rq2Key = rq1.getString(rq1Key);
			if (rq2.has(rq2Key)) {
				result.put(rq1Key, rq2.get(rq2Key));
			} else {
				result.put(rq1Key, "");
			}
		}
		return result.toString();
	}

	public String createXMLPacketGas(String totalPacket, String sitPacket) {
		String finalXML = null;
		try {
			// Parse the XML string into a Document
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			InputSource inputSource = new InputSource(new StringReader(totalPacket));
			org.w3c.dom.Document doc = builder.parse(inputSource);

			// JSON string to map
			ObjectMapper mapper = new ObjectMapper();
			Map<String, String> jsonMap = mapper.readValue(sitPacket, new TypeReference<Map<String, String>>() {
			});

			// Normalize XML structure
			doc.getDocumentElement().normalize();

			// Traverse the XML and replace values
			replaceValuesColl(doc.getDocumentElement(), jsonMap);

			// Output the final XML
			StringWriter xmlWriter = new StringWriter();
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.transform(new DOMSource(doc), new StreamResult(xmlWriter));
			finalXML = xmlWriter.toString().replaceAll("&amp;lt;", "&lt;").replaceAll("&amp;gt;", "&gt;")
					.replace(" standalone=\"no\"", "").trim();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return finalXML;
	}

	private void replaceValuesColl(Node node, Map<String, String> jsonMap) {
		if (node.getNodeType() == Node.ELEMENT_NODE) {
			NodeList childNodes = node.getChildNodes();
			for (int i = 0; i < childNodes.getLength(); i++) {
				Node childNode = childNodes.item(i);
				if (childNode.getNodeType() == Node.ELEMENT_NODE) {
					String nodeValue = childNode.getTextContent();
					if (jsonMap.containsKey(nodeValue)) {
						childNode.setTextContent(jsonMap.get(nodeValue));
					}
					replaceValuesColl(childNode, jsonMap); // Recursive call for nested elements
				}
			}
		}
	}

	private static void replaceMatchingKeysRecusive(ObjectNode oldPacketNode, ObjectNode newPacketNode) {
		try {
			Iterator<Map.Entry<String, JsonNode>> fields = oldPacketNode.fields();
			while (fields.hasNext()) {
				Map.Entry<String, JsonNode> entry = fields.next();
				String key = entry.getKey();
				JsonNode oldValue = entry.getValue();
				if (newPacketNode.has(key)) {
					JsonNode newValue = newPacketNode.get(key);
					if (oldValue.isObject() && newValue.isObject()) {
						replaceMatchingKeysRecusive((ObjectNode) oldValue, (ObjectNode) newValue);
					} else {
						oldPacketNode.set(key, newValue);
					}
				} else if (oldValue.isObject()) {
					replaceMatchingKeysRecusive((ObjectNode) oldValue, newPacketNode);
				} else if (oldValue.isArray()) {
					for (JsonNode element : oldValue) {
						if (element.isObject()) {
							replaceMatchingKeysRecusive((ObjectNode) element, newPacketNode);
						}
					}
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
	}

	public static String createXMLPacket(String totalPacket, String sitPacket) {
		String finalXML = null;
		try {
			// Parse the XML string into a Document
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			InputSource inputSource = new InputSource(new StringReader(totalPacket));
			org.w3c.dom.Document doc = builder.parse(inputSource);

			// JSON string to map
			ObjectMapper mapper = new ObjectMapper();
			Map<String, String> jsonMap = mapper.readValue(sitPacket, new TypeReference<Map<String, String>>() {
			});

			// Normalize XML structure and get the ProcessInput node
			doc.getDocumentElement().normalize();
			NodeList processInputNodes = doc.getElementsByTagName("ProcessInput");

			if (processInputNodes.getLength() > 0) {
				// Get the content inside <ProcessInput> node
				Node processInputNode = processInputNodes.item(0);
				String processInputContent = processInputNode.getTextContent();
				// Decode the &lt; and &gt; to < and >
				processInputContent = processInputContent.replace("&lt;", "<").replace("&gt;", ">");
				// Parse the <REQ> content inside ProcessInput as a separate XML document
				org.w3c.dom.Document reqDoc = builder.parse(new InputSource(new StringReader(processInputContent)));

				String rootElement = reqDoc.getDocumentElement().getNodeName();
				NodeList reqNodes = reqDoc.getElementsByTagName(rootElement);
				if (reqNodes.getLength() > 0) {
					Node reqNode = reqNodes.item(0);
					NodeList childNodes = reqNode.getChildNodes();
					for (int i = 0; i < childNodes.getLength(); i++) {
						Node childNode = childNodes.item(i);
						if (childNode.getNodeType() == Node.ELEMENT_NODE) {
							String nodeName = childNode.getNodeName();
							String nodeValue = childNode.getTextContent();
							LOGGER.info(nodeName + " : " + nodeValue);
//							System.out.println(nodeName + " : " + nodeValue);
							if (jsonMap.containsKey(nodeValue)) {
								childNode.setTextContent(jsonMap.get(nodeValue));
							}
						}
					}
				}

				// Write the modified <REQ> back as a string
				Transformer transformer = TransformerFactory.newInstance().newTransformer();
				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
				transformer.setOutputProperty(OutputKeys.INDENT, "no");

				StringWriter reqWriter = new StringWriter();
				transformer.transform(new DOMSource(reqDoc), new StreamResult(reqWriter));
				String modifiedReqContent = reqWriter.toString();

				// Re-encode < and > with &lt; and &gt; for putting back into ProcessInput
				modifiedReqContent = modifiedReqContent.replace("<", "&lt;").replace(">", "&gt;");

				// Set the modified REQ content back into <ProcessInput>
				processInputNode.setTextContent(modifiedReqContent);
			}

			// Output the final XML
			StringWriter xmlWriter = new StringWriter();
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.transform(new DOMSource(doc), new StreamResult(xmlWriter));
			finalXML = xmlWriter.toString().replaceAll("&amp;lt;", "&lt;").replaceAll("&amp;gt;", "&gt;")
					.replace(" standalone=\"no\"", "").trim();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return finalXML;
	}

	@POST
	@Path("/exportExcel")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	// @Produces("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	public Response exportExcel(@FormParam("username") String username, @FormParam("jiraID") String jiraID,
			@FormParam("apiName") String apiName, @FormParam("testType") String testType,
			@FormParam("userEmail") String userEmail) {
		XSSFWorkbook workbook = new XSSFWorkbook();
		ResponseModel responseModel = new ResponseModel();
		XSSFSheet sheet = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		Connection connection = null;
		String query = null;
		String fileName = null;
		StreamingOutput stream = null;
		File tempFile = null;

		try {
			// Define the filename and sheet name based on the test type
			if (testType.equals("SIT")) {
				fileName = "SIT_TESTCASES_" + jiraID + ".xlsx";
				sheet = workbook.createSheet("SIT_TESTING_DATA");
			} else if (testType.equals("UAT")) {
				fileName = "UAT_TESTCASES_" + jiraID + ".xlsx";
				sheet = workbook.createSheet("UAT_TESTING_DATA");
			}

			// Get the database connection
			connection = DBConnUtil.getConnection();

			// Define the query based on test type
			if (testType.equals("SIT")) {
				query = "SELECT TEST_RUN, TARGET_REQUEST, TARGET_RESPONSE,PLAIN_REQUEST,PLAIN_RESPONSE, HTTP_STATUS_CODE FROM OUTBOUND_SIT_TESTING_TBL WHERE JIRA_ID=? AND API_NAME=? ORDER BY TO_NUMBER(REGEXP_SUBSTR(TEST_RUN, '[0-9]+')) ASC";
			} else if (testType.equals("UAT")) {
				query = "SELECT TEST_RUN, TARGET_REQUEST, TARGET_RESPONSE,PLAIN_REQUEST,PLAIN_RESPONSE, HTTP_STATUS_CODE FROM OUTBOUND_UAT_TESTING_TBL WHERE JIRA_ID=? AND API_NAME=? ORDER BY TO_NUMBER(REGEXP_SUBSTR(TEST_RUN, '[0-9]+')) ASC";
			}
			pst = connection.prepareStatement(query);
			pst.setString(1, jiraID);
			pst.setString(2, apiName);
			rs = pst.executeQuery();
			String[] headers = { "TEST_RUN", "REQUEST_PACKET", "RESPONSE_PACKET", "PLAIN_REQUEST", "PLAIN_RESPONSE",
					"HTTP_STATUS_CODE" };
			Row dataHeaderRow = sheet.createRow(0);
			for (int i = 0; i < headers.length; ++i) {
				Cell cell = dataHeaderRow.createCell(i);
				cell.setCellValue(headers[i]);
				XSSFCellStyle headerStyle = workbook.createCellStyle();
				headerStyle.setAlignment(HorizontalAlignment.CENTER);
				headerStyle.setVerticalAlignment(VerticalAlignment.CENTER);
				XSSFFont headerFont = workbook.createFont();
				headerFont.setBold(true);
				headerStyle.setFont(headerFont);
				cell.setCellStyle(headerStyle);
			}
			XSSFCellStyle wrapStyle = workbook.createCellStyle();
			wrapStyle.setWrapText(true);
			wrapStyle.setAlignment(HorizontalAlignment.CENTER);
			wrapStyle.setVerticalAlignment(VerticalAlignment.CENTER);
			sheet.setColumnWidth(0, 3000);
			sheet.setColumnWidth(1, 23000);
			sheet.setColumnWidth(2, 8000);
			sheet.setColumnWidth(3, 15000);
			sheet.setColumnWidth(4, 8000);
			sheet.setColumnWidth(5, 5500);
			int rowCount = 1;
			while (rs.next()) {
				Row rowData = sheet.createRow(rowCount++);
				for (int j = 0; j < headers.length; ++j) {
					Cell cell2 = rowData.createCell(j);
					String columnData = rs.getString(j + 1);
					if (columnData != null) {
						cell2.setCellValue(columnData);
					} else {
						cell2.setCellValue("");
					}
					cell2.setCellStyle(wrapStyle);
				}
				rowData.setHeight((short) (-1));
			}
			tempFile = File.createTempFile("temp", ".xlsx");
			try (FileOutputStream fileOut = new FileOutputStream(tempFile)) {
				workbook.write(fileOut);
				fileOut.close();
				LOGGER.info("Temporary file created at: " + tempFile.getAbsolutePath());
			} catch (IOException e) {
				LOGGER.error("Error saving file to disk: " + e.getMessage());
			}

			// Define the StreamingOutput to send the generated Excel file
			stream = new StreamingOutput() {
				@Override
				public void write(OutputStream output) throws IOException, WebApplicationException {
					try {
						workbook.write(output);
					} catch (Exception e) {
						throw new WebApplicationException(e);
					} finally {
						output.close();
						workbook.close();
					}
				}
			};
		} catch (SQLException e) {
			LOGGER.error("Table fetch or write failed: " + e.getMessage(), e);
		} catch (IOException e1) {
			LOGGER.error("IOException : " + e1.getMessage(), e1);
		} finally {
			DBConnUtil.close(rs, pst, connection);
		}

		// Return the generated Excel file or an error response
		if (workbook == null) {
			return Response.ok("null").build();
		} else {
//			Response clientResponse = null;
//			boolean client1Done = false;
//			String str1 = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/").toString();
//			String attachmentUrl = str1 + jiraID + "/attachments";
//			clientResponse = HttpClient.postUpdateJiraAttachment(attachmentUrl, tempFile, fileName);
//			if (clientResponse.getStatus() == 200 || clientResponse.getStatus() == 201) {
//				client1Done = true;
//			}
//			if (client1Done == true) {
			LOGGER.info("true email");
			SMTPCase smtpCase = new SMTPCase();
			String sitSub = MailTemplete.sitReportSubject.replaceAll("__JIRAID__", (jiraID != null ? jiraID : ""));
			String sitHtml = MailTemplete.sitReportBody.replaceAll("__APINAME__", (apiName != null ? apiName : ""));
			String uatSub = MailTemplete.uatReportSubject.replaceAll("__JIRAID__", (jiraID != null ? jiraID : ""));
			String uatHtml = MailTemplete.uatReportBody.replaceAll("__APINAME__", (apiName != null ? apiName : ""));
			boolean isSent = false;
			LOGGER.info("userEmail : " + userEmail);
			if (testType.equals("SIT")) {
				isSent = smtpCase.sendAttachment(userEmail, sitSub, sitHtml, tempFile.getPath(), "EXCEL", fileName);
			} else if (testType.equals("UAT")) {
				isSent = smtpCase.sendAttachment(userEmail, uatSub, uatHtml, tempFile.getPath(), "EXCEL", fileName);
			}
			// Delete the temporary file after sending the email
			if (tempFile != null && tempFile.exists()) {
				tempFile.delete();
				LOGGER.info("Temporary file deleted: " + tempFile.getAbsolutePath());
			}

			if (isSent == true) {
				responseModel.setData(jiraID);
				responseModel.setStatus(true);
				responseModel.setMessage("TestCases Report shared on Email");
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			} else {
				responseModel.setData(jiraID);
				responseModel.setStatus(false);
				responseModel.setMessage("TestCases Report sharing Failed");
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
//			} else {
//				responseModel.setData(jiraID);
//				responseModel.setStatus(false);
//				responseModel.setMessage("TestCases Report upload Failed for JIRA");
//				responseModel.setStatus_code(200);
//				return Response.ok(responseModel).build();
//			}
		}
	}

	public Set<Integer> getClientCodeCheckMongoDB(String bankAccNo, String apiName, String paymentModes,
			String customField15001, String jiraStatus, String jiraID, Boolean mongoFlag, DIYStandardModel diyModel) {
		int respCode = 0;
		URL verifyUrl = null;
		String operationName = null;
		paymentModes = "FT,NEFT,IMPS,RTGS,UPI";
		DIYGenericStandardModel genericDetails = null;
		Set<Integer> statusList = new HashSet<>();
		String[] urls = null;
		try {
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			operationName = genericDetails.getOperationName();
			LOGGER.info("CC Check operationName : " + operationName);
			if (jiraStatus.equalsIgnoreCase("Field Mapping")) {
				if (diyModel.getIsReverted() == false && diyModel.getMongoDone() == false) {
					if (operationName.equalsIgnoreCase("intimation/MODEL-5")
							|| operationName.equalsIgnoreCase("intimation/MODEL-7")
							|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
						urls = new String[] { GwConstants.DIY_MONGO_UAT_MH, GwConstants.DIY_MONGO_PROD_MH };
					} else {
						urls = new String[] { GwConstants.DIY_MONGO_UAT, GwConstants.DIY_MONGO_PROD };
					}
				} else if (diyModel.getIsReverted() == true && diyModel.getMongoDone() == true) {
					if (operationName.equalsIgnoreCase("intimation/MODEL-5")
							|| operationName.equalsIgnoreCase("intimation/MODEL-7")
							|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
						urls = new String[] { GwConstants.DIY_MONGO_UAT_MH };
					} else {
						urls = new String[] { GwConstants.DIY_MONGO_UAT };
					}
				} else if (diyModel.getIsReverted() == true && diyModel.getMongoDone() == false) {
					if (operationName.equalsIgnoreCase("intimation/MODEL-5")
							|| operationName.equalsIgnoreCase("intimation/MODEL-7")
							|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
						urls = new String[] { GwConstants.DIY_MONGO_UAT_MH };
					} else {
						urls = new String[] { GwConstants.DIY_MONGO_UAT };
					}
				}
			}
			String[] services = { "/preferences", "/preferences/basicdetails", "/preferences/specs" };
			LOGGER.info("CC CHECk customField15001 : " + customField15001);
			switch (operationName) {
			case "intimation/MODEL-5":
			case "intimation/MODEL-7":
			case "credit_confirmation/MODEL-7":
				String[] paymentModeArr = paymentModes.split(",");
				for (String paymentMode : paymentModeArr) {
					for (String service : services) {
						for (String url : urls) {
							verifyUrl = new URL(
									url + customField15001 + "/" + operationName + "/" + paymentMode + service);
							respCode = getClientCodeCustID(verifyUrl);
							statusList.add(respCode);
							if (mongoFlag) {
								if (respCode == 200) {
									continue;
								} else {
									break;
								}
							} else {
								if (respCode != 404) {
									break;
								} else {
									continue;
								}
							}
						}
					}
					if (!mongoFlag && respCode != 404) {
						break;
					}
				}
				break;
			case "send-alert":
				for (String url : urls) {
					for (String service : services) {
						verifyUrl = new URL(url + "customers/" + bankAccNo + "/" + operationName + service);
						respCode = getClientCodeCustID(verifyUrl);
						statusList.add(respCode);
						if (mongoFlag) {
							if (respCode == 200) {
								continue;
							} else {
								break;
							}
						} else {
							if (respCode != 404) {
								break;
							} else {
								continue;
							}
						}
					}
				}
				break;
			case "ecollection-intimation":
			case "events":
			case "receipt":
			case "validation":
				for (String url : urls) {
					for (String service : services) {
						verifyUrl = new URL(url + "customers/" + customField15001 + "/" + operationName + service);
						respCode = getClientCodeCustID(verifyUrl);
						statusList.add(respCode);
						if (mongoFlag) {
							if (respCode == 200) {
								continue;
							} else {
								break;
							}
						} else {
							if (respCode != 404) {
								break;
							} else {
								continue;
							}
						}
					}
				}
				break;
			default:
				throw new IllegalArgumentException("INVALID Operation Name : " + operationName);
			}
//			if (statusList.size() > 1 && !statusList.contains(404)) {
//				try {
//					LOGGER.info("JIRA TRANSITION Started : " + respCode);
//					jiraTransition("91", jiraID);
//					jiraComment("Client Code Already Exists. Please enter valid Client Code.",
//							jiraID + " : " + customField15001);
//				} catch (Exception e) {
//					LOGGER.error("JIRA TRANSITION EXCEPTION");
//				}
//			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return statusList;
	}

	public int getCustIDCheckMongoDB(String custID, String apiName, String jiraStatus, String jiraID,
			Boolean mongoFlag) {
		int respCode = 0;
		URL verifyUrl = null;
		String operationName = null;
		DIYGenericStandardModel genericDetails = null;
		Set<Integer> statusList = new HashSet<>();
		try {
			genericDetails = diyStandardDao.getGenericDetails(apiName);
			operationName = genericDetails.getOperationName();
			LOGGER.info("CC Check operationName : " + operationName);
			String baseUrl = jiraStatus.equalsIgnoreCase("Go Live")
					? "https://igateway.icicibankltd.com/ixc_mongodb/prod01-ext/"
					: "https://uat-onprem-dmz-hybrid.icicibankltd.com/ixc_mongodb/uat01-ext/";

			String[] services = { "/preferences", "/preferences/basicdetails", "/preferences/specs" };
			String[] custIDs = custID.split(",");
			for (String custValue : custIDs) {
				for (String service : services) {
					verifyUrl = new URL(baseUrl + "customers/" + custValue + "/" + operationName + service);
					respCode = getClientCodeCustID(verifyUrl);
					statusList.add(respCode);
					if (mongoFlag) {
						if (respCode == 200) {
							continue;
						} else {
							LOGGER.info(
									"CUST ID Already Exists. Please enter valid CUST ID. - " + jiraID + " : " + custID);
							break;
						}
					} else {
						if (respCode != 404) {
							LOGGER.info(
									"CUST ID Already Exists. Please enter valid CUST ID. - " + jiraID + " : " + custID);
							break;
						} else {
							continue;
						}
					}
				}
			}
			if (statusList.size() > 1 && !statusList.contains(404)) {
				try {
					LOGGER.info("JIRA TRANSITION Started : " + respCode);
					jiraTransition("91", jiraID);
					jiraComment("CUST ID Already Exists. Please enter valid CUST ID.", jiraID + " : " + custID);
				} catch (Exception e) {
					LOGGER.error("JIRA TRANSITION EXCEPTION");
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return respCode;
	}

	public int getClientCodeCustID(URL verifyUrl) {
		int responseCode = 0;
		try {
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection();
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("GET");
			responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("CLIENT CODE CHECK : " + responseCode);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return responseCode;
	}

	@POST
	@Path("/exportPDF")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response exportPDF(@FormParam("jiraID") String jiraID, @FormParam("username") String username,
			@FormParam("apiName") String apiName, @FormParam("userEmail") String userEmail) {
		final String titleName;
		String encRequired = null;
		File file = null;
		ResponseModel responseModel = new ResponseModel();
		JSONObject techJSON = null;
		FileInputStream fis = null;
		String imagePath = "/u1/APIGateway/icici.png";
		String apiOne = null;
		String apiTwo = null;
		JSONObject jsonTechAPI2 = null;
		String apiNames = null;
		String apiProduct = null;
		String apiVariant = null;

		apiNames = diyStandardDao.getApiNamebyJira(jiraID, username);
		LOGGER.info("apiNames : " + apiNames);
		String[] apiNamesSplit = apiNames.split(",");
		LOGGER.info("apiNamesSplit Length : " + apiNamesSplit.length);
		if (apiNamesSplit.length > 1) {
			apiOne = apiNamesSplit[0];
			apiTwo = apiNamesSplit[1];
		} else if (apiNamesSplit.length == 1) {
			apiOne = apiName;
		}
		JSONObject json = diyStandardDao.obMappingDetails(jiraID, apiOne, apiTwo);

		LOGGER.info("json : " + json.toString());
		if (json.has("UAT_ENCRYPTION_REQUIRED")) {
			encRequired = json.getString("UAT_ENCRYPTION_REQUIRED");
			if (encRequired.equals("true") && json.has("TECHNICAL_DETAILS")) {
				techJSON = json.getJSONObject("TECHNICAL_DETAILS");
			} else {
				techJSON = json.getJSONObject("TECHNICAL_DETAILS");
			}
		}
		switch (apiOne) {
		case "intimation/MODEL-5":
			apiProduct = "eCollection";
			apiVariant = "intimation/MODEL-5";
			titleName = "INTIMATION_MODEL-5_" + jiraID;
			break;
		case "intimation/MODEL-7":
			apiProduct = "eCollection";
			apiVariant = "iValidate/MODEL-7";
			titleName = "INTIMATION_MODEL-7_" + jiraID;
			break;
		case "Cheque Collection":
			apiProduct = "Collections";
			apiVariant = "Cheque Collection";
			titleName = "CHEQUE_COLLECTION_" + jiraID;
			break;
		case "credit_confirmation/MODEL-7":
			apiProduct = "eCollection";
			apiVariant = "iValidate/MODEL-7";
			titleName = "INTIMATION_MODEL-7_CC_" + jiraID;
			break;
		case "ecollection-intimation":
			apiProduct = "eCollection";
			apiVariant = "ecollection-intimation";
			titleName = "INTIMATION_" + jiraID;
			break;
		case "validation":
			apiProduct = "Collections";
			apiVariant = "iSurepay";
			titleName = "ISUREPAY_VALIDATION_" + jiraID;
			break;
		case "receipt":
			apiProduct = "Collections";
			apiVariant = "iSurepay";
			titleName = "ISUREPAY_RECEIPT_" + jiraID;
			break;
		case "Insta Alert":
			apiProduct = "Collections";
			apiVariant = "Insta Alert";
			titleName = "INSAT_ALERT_" + jiraID;
			break;
		default:
//			throw new IllegalArgumentException("INVALID API NAME: " + apiName);
			apiProduct = "Trade APIs";
			apiVariant = apiName;
			int length = apiName.replaceAll(" ", "_").toCharArray().length;
			String tradeFileName = null;
			if (length > 12) {
				tradeFileName = apiName.replaceAll(" ", "_").substring(0, 12).toUpperCase();
			} else {
				tradeFileName = apiName.replaceAll(" ", "_").toUpperCase();
			}
			titleName = tradeFileName + "_" + jiraID;
			break;
		}
		String filePath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID + "/" + titleName
				+ ".pdf";
		file = new File(filePath);
		if (!file.exists()) {
			boolean dirCreated = file.getParentFile().mkdirs();
			if (dirCreated) {
				LOGGER.info("Directory created : " + file.getAbsolutePath());
			} else {
				file.getParentFile().mkdirs();
				LOGGER.error("Failed to create directory.");
			}
		}
		LOGGER.info("Directory filePath : " + filePath);
		try {
			PdfDocument pdfDoc = new PdfDocument(new PdfWriter(filePath)); // Creating a PdfDocument object
			Document document = new Document(pdfDoc); // Creating a Document object
			SimpleDateFormat formatter = new SimpleDateFormat("MMM dd, YYYY");
			String today = formatter.format(System.currentTimeMillis());

			ImageData imageData = ImageDataFactory.create(imagePath);
			Image image = new Image(imageData);
			image.scaleToFit(150, 100).setFixedPosition(25, 760);
			document.add(image);
			document.add(new Paragraph("\n\n\n"));
			document.add(new Paragraph("Date: " + today).setMultipliedLeading(1.0f));
			document.add(
					new Paragraph("Client Name : " + json.getString("ORGANIZATION_NAME")).setMultipliedLeading(1.0f));
			document.add(new Paragraph("Product : " + apiProduct).setMultipliedLeading(1.0f));
			document.add(new Paragraph("Variant : " + apiVariant).setMultipliedLeading(1.0f));
			if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("eCollection")) {
				if (apiOne.equalsIgnoreCase("Insta Alert")) {
					String accNoMasked = null;
//					accNoMasked = json.getString("CUSTOM_FIELD_15001");
					String accNo = json.getString("CUSTOM_FIELD_15001");
					int length = accNo.length();
					if (length <= 4) {
						accNoMasked = accNo;
					} else {
						StringBuilder masked = new StringBuilder();
						for (int i = 0; i < length - 4; i++) {
							masked.append("*");
						}
						String visible = accNo.substring(length - 4);
						accNoMasked = masked + visible;
					}
					document.add(new Paragraph("Bank Account No : " + accNoMasked).setMultipliedLeading(1.0f));
				} else {
					document.add(new Paragraph("Client Code : " + json.getString("CUSTOM_FIELD_15001"))
							.setMultipliedLeading(1.0f));
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				document.add(
						new Paragraph("CUST ID : " + json.getString("CUSTOM_FIELD_15001")).setMultipliedLeading(1.0f));
			}
			document.add(new Paragraph("\nTechnical Specifications:").setMarginTop(10.0f).setBold()
					.setMultipliedLeading(1.0f));
			String webService = null;
			if (json.getString("UAT_WEB_SERVICE").equals("application/json")) {
				webService = "REST API-JSON";
			} else if (json.getString("UAT_WEB_SERVICE").equals("application/xml")) {
				webService = "REST API-XML";
			} else if (json.getString("UAT_WEB_SERVICE").equals("application/soap+xml")) {
				webService = "SOAP WEB SERVICE";
			}
			document.add(new Paragraph("1. Type of webservice : " + webService).setMultipliedLeading(1.0f));
			JSONObject jsonTechAPI3 = techJSON.getJSONObject(apiOne);
			if (apiTwo != null) {
				jsonTechAPI2 = techJSON.getJSONObject(apiTwo);
			}
			document.add(new Paragraph("2. UAT URLs : ").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List uatList = new com.itextpdf.layout.element.List().setListSymbol("     ");
			uatList.add(new ListItem("a. " + apiOne + " : " + jsonTechAPI3.getString("UAT_SERVICE_URL")));
			if (apiTwo != null) {
				uatList.add(new ListItem("b. " + apiTwo + " : " + jsonTechAPI2.getString("UAT_SERVICE_URL")));
			}
			document.add(uatList);
			document.add(new Paragraph("3. Production URLs:").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List prodList = new com.itextpdf.layout.element.List().setListSymbol("     ");
			prodList.add(new ListItem("a. " + apiOne + " : " + jsonTechAPI3.getString("PROD_SERVICE_URL")));
			if (apiTwo != null) {
				prodList.add(new ListItem("b. " + apiTwo + " : " + jsonTechAPI2.getString("PROD_SERVICE_URL")));
			}
			document.add(prodList);
			document.add(new Paragraph("4. Security parameters:").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List securityList = new com.itextpdf.layout.element.List()
					.setListSymbol("     ");
			if (json.getString("UAT_ENCRYPTION_REQUIRED").equals("true")) {
				securityList.add(new ListItem("a. Encryption - " + json.getString("ENCRYPTION")));
			} else {
				securityList.add(new ListItem("a. Encryption - NA"));
			}
			if (json.getString("UAT_AUTHENTICATION_REQUIRED").equals("true")) {
				securityList.add(new ListItem("b. Authentication \u2013 " + json.getString("UAT_API_AUTHENTICATION")));
			} else {
				securityList.add(new ListItem("b. Authentication \u2013 NA"));
			}
			if (json.getString("UAT_ENCRYPTION_REQUIRED").equals("true")
					&& json.getString("ENCRYPTION_TYPE").equals("All Payload")) {
				securityList.add(new ListItem("c. Hybrid Encryption - " + json.getString("HYBRID_ENCRYTION")));
			}
			document.add(securityList);
			if (apiName.equals("intimation/MODEL-7") || apiName.equals("credit_confirmation/MODEL-7")
					|| apiName.equals("intimation/MODEL-5")) {
				document.add(new Paragraph("5. Deemed Action: " + json.getString("DEEMED_ACTION")).setMarginTop(10.0f)
						.setMultipliedLeading(1.0f));
			}
			document.add(new Paragraph("\n\n"));
			document.add(new Paragraph("Mapping Data:").setMarginTop(10.0f).setBold().setMultipliedLeading(1.0f));
			document.add(new Paragraph(String.valueOf(apiOne) + " Request :").setMarginTop(10.0f).setBold()
					.setMultipliedLeading(2.0f));
			float[] columnWidths = { 60f, 140f, 140f, 110f, 110f };
			Table reqTableApiName = new Table(columnWidths);
			JSONObject request = json.getJSONObject("REQ_PDF_DATA");
			createPdfWithTable(request.getJSONArray(apiOne), reqTableApiName, "REQUEST");
			document.add(reqTableApiName);

			// Response Mapping Data for apiName
			document.add(new Paragraph(apiOne + " Response : ").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
			Table resTableApiName = new Table(columnWidths);
			JSONObject response = json.getJSONObject("RES_PDF_DATA");
			createPdfWithTable(response.getJSONArray(apiOne), resTableApiName, "RESPONSE");
			document.add(resTableApiName);

			if (apiTwo != null) {
				document.add(new Paragraph("\n\n"));
				document.add(
						new Paragraph(apiTwo + " Request :").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
				Table reqTableApiName1 = new Table(columnWidths);
				createPdfWithTable(request.getJSONArray(apiTwo), reqTableApiName1, "REQUEST");
				document.add(reqTableApiName1);

				// Response Mapping Data for apiName1
				document.add(
						new Paragraph(apiTwo + " Response :").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
				Table resTableApiName1 = new Table(columnWidths);
				createPdfWithTable(response.getJSONArray(apiTwo), resTableApiName1, "RESPONSE");
				document.add(resTableApiName1);
			}
			document.close();

			try {
				file = new File(filePath);
				fis = new FileInputStream(file);
			} catch (FileNotFoundException e) {
				LOGGER.info("FILE NOT FOUND : " + filePath);
			}
//			return Response.ok(fis, MediaType.APPLICATION_OCTET_STREAM)
//					.header("Content-Disposition", "attachment;filename=" + titleName).header("fileName", titleName)
//					.build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		} finally {
			try {
				fis.close();
			} catch (IOException e) {
			}
		}

		try {
			SMTPCase smtpCase = new SMTPCase();
			String mappingPDFSub = MailTemplete.mappingPDFSubject.replaceAll("__JIRAID__",
					(jiraID != null ? jiraID : ""));
			String mappingPDFHtml = MailTemplete.mappingPDFBody.replaceAll("__APINAME__",
					(apiName != null ? apiName : ""));
			boolean isSent = false;
			LOGGER.info("userEmail: " + userEmail);
//			Response clientResponse = null;
//			boolean client1Done = false;
//			String str1 = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/").toString();
//			String attachmentUrl = str1 + jiraID + "/attachments";
//			clientResponse = HttpClient.postUpdateJiraAttachment(attachmentUrl, file, titleName + ".pdf");
//			if (clientResponse.getStatus() == 200 || clientResponse.getStatus() == 201) {
//				client1Done = true;
//			}
//			if (client1Done == true) {
			isSent = smtpCase.sendAttachment(userEmail, mappingPDFSub, mappingPDFHtml, filePath, "PDF", titleName);
			if (isSent == true) {
				responseModel.setData(jiraID);
				responseModel.setStatus(true);
				responseModel.setMessage("Field Mapping Report shared on Email");
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			} else {
				responseModel.setData(jiraID);
				responseModel.setStatus(false);
				responseModel.setMessage("Field Mapping Report sharing Failed");
				responseModel.setStatus_code(200);
				return Response.ok(responseModel).build();
			}
//			} else {
//				responseModel.setData(jiraID);
//				responseModel.setStatus(false);
//				responseModel.setMessage("Field Mapping Report upload Failed for JIRA");
//				responseModel.setStatus_code(200);
//				return Response.ok(responseModel).build();
//			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setData(jiraID);
			responseModel.setStatus(false);
			responseModel.setMessage("Field Mapping Report sharing Failed");
			responseModel.setStatus_code(200);
		}
		return Response.ok(responseModel).build();
	}

	@POST
	@Path("/exportPDF1")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response exportPDF1(@FormParam("jiraID") String jiraID, @FormParam("username") String username,
			@FormParam("apiName") String apiName, @FormParam("userEmail") String userEmail) {
		final String titleName;
		String encRequired = null;
		File file = null;
		ResponseModel responseModel = new ResponseModel();
		JSONObject techJSON = null;
		FileInputStream fis = null;
		String imagePath = "/u1/APIGateway/icici.png";
		String apiOne = null;
		String apiTwo = null;
		JSONObject jsonTechAPI2 = null;
		String apiNames = null;
		String apiProduct = null;
		String apiVariant = null;

		apiNames = diyStandardDao.getApiNamebyJira(jiraID, username);
		LOGGER.info("apiNames : " + apiNames);
		String[] apiNamesSplit = apiNames.split(",");
		LOGGER.info("apiNamesSplit Length : " + apiNamesSplit.length);
		if (apiNamesSplit.length > 1) {
			apiOne = apiNamesSplit[0];
			apiTwo = apiNamesSplit[1];
		} else if (apiNamesSplit.length == 1) {
			apiOne = apiName;
		}
		JSONObject json = diyStandardDao.obMappingDetails(jiraID, apiOne, apiTwo);

		LOGGER.info("json : " + json.toString(1));
		if (json.has("UAT_ENCRYPTION_REQUIRED")) {
			encRequired = json.getString("UAT_ENCRYPTION_REQUIRED");
			if (encRequired.equals("true") && json.has("TECHNICAL_DETAILS")) {
				techJSON = json.getJSONObject("TECHNICAL_DETAILS");
			} else {
				techJSON = json.getJSONObject("TECHNICAL_DETAILS");
			}
		}
		switch (apiOne) {
		case "intimation/MODEL-5":
			apiProduct = "eCollection";
			apiVariant = "intimation/MODEL-5";
			titleName = "INTIMATION_MODEL-5_" + jiraID;
			break;
		case "intimation/MODEL-7":
			apiProduct = "eCollection";
			apiVariant = "iValidate/MODEL-7";
			titleName = "INTIMATION_MODEL-7_" + jiraID;
			break;
		case "Cheque Collection":
			apiProduct = "Collections";
			apiVariant = "Cheque Collection";
			titleName = "CHEQUE_COLLECTION_" + jiraID;
			break;
		case "credit_confirmation/MODEL-7":
			apiProduct = "eCollection";
			apiVariant = "iValidate/MODEL-7";
			titleName = "INTIMATION_MODEL-7_CC_" + jiraID;
			break;
		case "ecollection-intimation":
			apiProduct = "eCollection";
			apiVariant = "ecollection-intimation";
			titleName = "INTIMATION_" + jiraID;
			break;
		case "validation":
			apiProduct = "Collections";
			apiVariant = "iSurepay";
			titleName = "ISUREPAY_VALIDATION_" + jiraID;
			break;
		case "receipt":
			apiProduct = "Collections";
			apiVariant = "iSurepay";
			titleName = "ISUREPAY_RECEIPT_" + jiraID;
			break;
		case "Insta Alert":
			apiProduct = "Collections";
			apiVariant = "Insta Alert";
			titleName = "INSAT_ALERT_" + jiraID;
			break;
		default:
//			throw new IllegalArgumentException("INVALID API NAME: " + apiName);
			apiProduct = "Trade APIs";
			apiVariant = apiName;
			int length = apiName.replaceAll(" ", "_").toCharArray().length;
			String tradeFileName = null;
			if (length > 12) {
				tradeFileName = apiName.replaceAll(" ", "_").substring(0, 12).toUpperCase();
			} else {
				tradeFileName = apiName.replaceAll(" ", "_").toUpperCase();
			}
			titleName = tradeFileName + "_" + jiraID;
			break;
		}
		String filePath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID + "/" + titleName
				+ ".pdf";
		file = new File(filePath);
		if (!file.exists()) {
			boolean dirCreated = file.getParentFile().mkdirs();
			if (dirCreated) {
				LOGGER.info("Directory created : " + file.getAbsolutePath());
			} else {
				file.getParentFile().mkdirs();
				LOGGER.error("Failed to create directory.");
			}
		}
		LOGGER.info("Directory filePath : " + filePath);
		try {
			PdfDocument pdfDoc = new PdfDocument(new PdfWriter(filePath)); // Creating a PdfDocument object
			Document document = new Document(pdfDoc); // Creating a Document object
			SimpleDateFormat formatter = new SimpleDateFormat("MMM dd, YYYY");
			String today = formatter.format(System.currentTimeMillis());

			ImageData imageData = ImageDataFactory.create(imagePath);
			Image image = new Image(imageData);
			image.scaleToFit(150, 100).setFixedPosition(25, 760);
			document.add(image);
			document.add(new Paragraph("\n\n\n"));
			document.add(new Paragraph("Date: " + today).setMultipliedLeading(1.0f));
			document.add(
					new Paragraph("Client Name : " + json.getString("ORGANIZATION_NAME")).setMultipliedLeading(1.0f));
			document.add(new Paragraph("Product : " + apiProduct).setMultipliedLeading(1.0f));
			document.add(new Paragraph("Variant : " + apiVariant).setMultipliedLeading(1.0f));
			if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("eCollection")) {
				if (apiOne.equalsIgnoreCase("Insta Alert")) {
					String accNoMasked = null;
//					accNoMasked = json.getString("CUSTOM_FIELD_15001");
					String accNo = json.getString("CUSTOM_FIELD_15001");
					int length = accNo.length();
					if (length <= 4) {
						accNoMasked = accNo;
					} else {
						StringBuilder masked = new StringBuilder();
						for (int i = 0; i < length - 4; i++) {
							masked.append("*");
						}
						String visible = accNo.substring(length - 4);
						accNoMasked = masked + visible;
					}
					document.add(new Paragraph("Bank Account No : " + accNoMasked).setMultipliedLeading(1.0f));
				} else {
					document.add(new Paragraph("Client Code : " + json.getString("CUSTOM_FIELD_15001"))
							.setMultipliedLeading(1.0f));
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				document.add(
						new Paragraph("CUST ID : " + json.getString("CUSTOM_FIELD_15001")).setMultipliedLeading(1.0f));
			}
			document.add(new Paragraph("\nTechnical Specifications:").setMarginTop(10.0f).setBold()
					.setMultipliedLeading(1.0f));
			String webService = null;
			if (json.getString("UAT_WEB_SERVICE").equals("application/json")) {
				webService = "REST API-JSON";
			} else if (json.getString("UAT_WEB_SERVICE").equals("application/xml")) {
				webService = "REST API-XML";
			} else if (json.getString("UAT_WEB_SERVICE").equals("application/soap+xml")) {
				webService = "SOAP WEB SERVICE";
			}
			document.add(new Paragraph("1. Type of webservice : " + webService).setMultipliedLeading(1.0f));
			JSONObject jsonTechAPI3 = techJSON.getJSONObject(apiOne);
			if (apiTwo != null) {
				jsonTechAPI2 = techJSON.getJSONObject(apiTwo);
			}
			document.add(new Paragraph("2. UAT URLs : ").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List uatList = new com.itextpdf.layout.element.List().setListSymbol("     ");
			uatList.add(new ListItem("a. " + apiOne + " : " + jsonTechAPI3.getString("UAT_SERVICE_URL")));
			if (apiTwo != null) {
				uatList.add(new ListItem("b. " + apiTwo + " : " + jsonTechAPI2.getString("UAT_SERVICE_URL")));
			}
			document.add(uatList);
			document.add(new Paragraph("3. Production URLs:").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List prodList = new com.itextpdf.layout.element.List().setListSymbol("     ");
			prodList.add(new ListItem("a. " + apiOne + " : " + jsonTechAPI3.getString("PROD_SERVICE_URL")));
			if (apiTwo != null) {
				prodList.add(new ListItem("b. " + apiTwo + " : " + jsonTechAPI2.getString("PROD_SERVICE_URL")));
			}
			document.add(prodList);
			document.add(new Paragraph("4. Security parameters:").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List securityList = new com.itextpdf.layout.element.List()
					.setListSymbol("     ");
			if (json.getString("UAT_ENCRYPTION_REQUIRED").equals("true")) {
				securityList.add(new ListItem("a. Encryption - " + json.getString("ENCRYPTION")));
			} else {
				securityList.add(new ListItem("a. Encryption - NA"));
			}
			if (json.getString("UAT_AUTHENTICATION_REQUIRED").equals("true")) {
				securityList.add(new ListItem("b. Authentication \u2013 " + json.getString("UAT_API_AUTHENTICATION")));
			} else {
				securityList.add(new ListItem("b. Authentication \u2013 NA"));
			}
			if (json.getString("UAT_ENCRYPTION_REQUIRED").equals("true")
					&& json.getString("ENCRYPTION_TYPE").equals("All Payload")) {
				securityList.add(new ListItem("c. Hybrid Encryption - " + json.getString("HYBRID_ENCRYTION")));
			}
			document.add(securityList);
			if (apiName.equals("intimation/MODEL-7") || apiName.equals("credit_confirmation/MODEL-7")
					|| apiName.equals("intimation/MODEL-5")) {
				document.add(new Paragraph("5. Deemed Action: " + json.getString("DEEMED_ACTION")).setMarginTop(10.0f)
						.setMultipliedLeading(1.0f));
			}
			document.add(new Paragraph("\n\n"));
			document.add(new Paragraph("Mapping Data:").setMarginTop(10.0f).setBold().setMultipliedLeading(1.0f));
			document.add(new Paragraph(String.valueOf(apiOne) + " Request :").setMarginTop(10.0f).setBold()
					.setMultipliedLeading(2.0f));
			float[] columnWidths = { 60f, 140f, 140f, 110f, 110f };
			Table reqTableApiName = new Table(columnWidths);
			JSONObject request = json.getJSONObject("REQ_PDF_DATA");
			createPdfWithTable(request.getJSONArray(apiOne), reqTableApiName, "REQUEST");
			document.add(reqTableApiName);

			// Response Mapping Data for apiName
			document.add(new Paragraph(apiOne + " Response : ").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
			Table resTableApiName = new Table(columnWidths);
			JSONObject response = json.getJSONObject("RES_PDF_DATA");
			createPdfWithTable(response.getJSONArray(apiOne), resTableApiName, "RESPONSE");
			document.add(resTableApiName);

			if (apiTwo != null) {
				document.add(new Paragraph("\n\n"));
				document.add(
						new Paragraph(apiTwo + " Request :").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
				Table reqTableApiName1 = new Table(columnWidths);
				createPdfWithTable(request.getJSONArray(apiTwo), reqTableApiName1, "REQUEST");
				document.add(reqTableApiName1);

				// Response Mapping Data for apiName1
				document.add(
						new Paragraph(apiTwo + " Response :").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
				Table resTableApiName1 = new Table(columnWidths);
				createPdfWithTable(response.getJSONArray(apiTwo), resTableApiName1, "RESPONSE");
				document.add(resTableApiName1);
			}
			document.close();

			try {
				file = new File(filePath);
				fis = new FileInputStream(file);
			} catch (FileNotFoundException e) {
				LOGGER.info("FILE NOT FOUND : " + filePath);
			}
			return Response.ok(fis, MediaType.APPLICATION_OCTET_STREAM)
					.header("Content-Disposition", "attachment;filename=" + titleName).header("fileName", titleName)
					.build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		} finally {
			try {
				fis.close();
			} catch (IOException e) {
			}
		}
		return Response.ok(responseModel).build();
	}

	public static void createPdfWithTable(JSONArray data, Table table, String type) {
		try {
			table.addHeaderCell(new com.itextpdf.layout.element.Cell().add(new Paragraph("ICICI Field ID"))
					.setTextAlignment(TextAlignment.CENTER).setBackgroundColor(new DeviceRgb(240, 99, 33)));
			table.addHeaderCell(new com.itextpdf.layout.element.Cell().add(new Paragraph("ICICI Field Name"))
					.setTextAlignment(TextAlignment.CENTER).setBackgroundColor(new DeviceRgb(240, 99, 33)));
			table.addHeaderCell(new com.itextpdf.layout.element.Cell().add(new Paragraph("Client Field Name"))
					.setTextAlignment(TextAlignment.CENTER).setBackgroundColor(new DeviceRgb(240, 99, 33)));
			table.addHeaderCell(new com.itextpdf.layout.element.Cell()
					.add(new Paragraph("Custom Function (if applicable else blank)"))
					.setTextAlignment(TextAlignment.CENTER).setBackgroundColor(new DeviceRgb(240, 99, 33)));
			table.addHeaderCell(new com.itextpdf.layout.element.Cell().add(new Paragraph("Encryption on Field (Y/N)"))
					.setTextAlignment(TextAlignment.CENTER).setBackgroundColor(new DeviceRgb(240, 99, 33)));

			// Add table data
			for (int i = 0; i < data.length(); i++) {
				JSONObject obj = data.getJSONObject(i);
				if (!obj.isNull("id")) {
					table.addCell(new com.itextpdf.layout.element.Cell()
							.add(new Paragraph(String.valueOf(obj.getInt("id")))));
					table.addCell(
							new com.itextpdf.layout.element.Cell().add(new Paragraph(obj.getString("iciciField"))));
					table.addCell(
							new com.itextpdf.layout.element.Cell().add(new Paragraph(obj.getString("clientField"))));
					boolean customDetail = obj.getBoolean("customDetail");
					String selectedFunction = null;
					String functionsData = null;
					String value = null;
					if (customDetail) {
						selectedFunction = obj.getString("selectedFunction");
						if (selectedFunction.equals("isDate")) {
							JSONObject dateDetail = obj.getJSONObject("detail");
							LOGGER.info("dateDetail : " + dateDetail);
							value = dateDetail.getString("value");
							functionsData = value;
						} else if (selectedFunction.equals("isList")) {
							JSONObject listDetail = obj.getJSONObject("detail");
							LOGGER.info("listDetail : " + listDetail);
							String listString = listDetail.getString("value");
							JSONObject listObj = new JSONObject(listString);
							final StringBuilder builder = new StringBuilder();
							listObj.keys().forEachRemaining(key -> {
								builder.append(key).append(":").append(listObj.getString(key)).append("\n");
							});
							functionsData = builder.toString();
						} else if (selectedFunction.equals("isAmount")) {
							JSONObject amountDetail = obj.getJSONObject("detail");
							LOGGER.info("amountDetail : " + amountDetail);
							value = amountDetail.getString("value");
							functionsData = value;
						} else if (selectedFunction.equals("isStatus")) {
							JSONObject statusDetail = obj.getJSONObject("detail");
							LOGGER.info("statusDetail : " + statusDetail);
							value = statusDetail.getString("value");
							functionsData = value;
						}
					} else {
						functionsData = "";
					}
					if (functionsData == null) {
						functionsData = "";
					}
					table.addCell(new com.itextpdf.layout.element.Cell().add(new Paragraph(functionsData)));
					String fieldEnc = null;
					if (type.equals("REQUEST") && obj.has("encryption")) {
						boolean encryption = obj.getBoolean("encryption");
						if (encryption) {
							fieldEnc = "Y";
						} else {
							fieldEnc = "N";
						}
					} else {
						fieldEnc = "N";
					}
					table.addCell(new com.itextpdf.layout.element.Cell().add(new Paragraph(fieldEnc)));
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
	}

	public JSONObject obMappingDetails(String jiraID, String apiName, String apiTwo) {
		JSONObject json = new JSONObject();
		JSONObject techApiJSON = new JSONObject();
		JSONObject technicalJSON = new JSONObject();
		JSONArray reqApiArr = new JSONArray();
		JSONObject requestJSON = new JSONObject();
		JSONArray resApiArr = new JSONArray();
		JSONObject responseJSON = new JSONObject();
		JSONObject apiTwoJson = null;
		String authType = null;
		DIYStandardModel apiUserData = null;
		try {
			apiUserData = diyStandardDao.getApiNameData(apiName, jiraID);
			LOGGER.info("apiTwo : " + apiTwo);
			if (apiTwo != null) {
				apiTwoJson = getAPITwoDetails(jiraID, apiTwo);
				LOGGER.info("apiTwoJson : " + apiTwoJson.toString());
			}
			json.put("API_PARENT", apiUserData.getApiParent());
			json.put("API_ID", apiUserData.getApiID());
			json.put("API_NAME", apiUserData.getApiName());
			json.put("ORGANIZATION_NAME", apiUserData.getOrganizationName());
			json.put("CUSTOM_FIELD_15001", apiUserData.getClientCode());
			json.put("UAT_WEB_SERVICE", apiUserData.getUatWebService());
			json.put("UAT_AUTHENTICATION_REQUIRED", apiUserData.getUatAuthenticationRequired());
			String authentication = apiUserData.getUatAPIAuthentication();
			if (authentication.equals("BASIC_AUTH")) {
				authType = "Basic Authentication in HTTP Header";
				json.put("UAT_API_AUTHENTICATION", authType);
			} else if (authentication.equals("CUSTOM_AUTH")) {
				authType = "Custom Authentication in HTTP Header";
				json.put("UAT_API_AUTHENTICATION", authType);
			} else if (authentication.equals("SOAP_AUTH")) {
				authType = "Soap Authentication in HTTP Header";
				json.put("UAT_API_AUTHENTICATION", authType);
			} else if (authentication.equals("CREDS_PAYLOAD")) {
				authType = "Credentials Payload in HTTP Header";
				json.put("UAT_API_AUTHENTICATION", authType);
			} else {
				json.put("UAT_API_AUTHENTICATION", "NA");
			}
			String encryptionRequired = apiUserData.getUatEncryptionRequired();
			json.put("UAT_ENCRYPTION_REQUIRED", encryptionRequired);
			reqApiArr = new JSONArray(apiUserData.getRequestPDFData());
			requestJSON.put(apiName, reqApiArr);
			if (apiTwo != null) {
				requestJSON.put(apiTwo, apiTwoJson.getJSONObject("REQ_PDF_DATA").getJSONArray(apiTwo));
			}
			json.put("REQ_PDF_DATA", requestJSON);
			resApiArr = new JSONArray(apiUserData.getResponsePDFData());
			responseJSON.put(apiName, resApiArr);
			if (apiTwo != null) {
				responseJSON.put(apiTwo, apiTwoJson.getJSONObject("RES_PDF_DATA").getJSONArray(apiTwo));
			}
			json.put("RES_PDF_DATA", responseJSON);

			techApiJSON.put("UAT_SERVICE_URL", apiUserData.getUatServiceUrl());
			techApiJSON.put("PROD_SERVICE_URL", apiUserData.getProdServiceUrl());
			technicalJSON.put(apiName, techApiJSON);
			if (apiTwo != null) {
				technicalJSON.put(apiTwo, apiTwoJson.getJSONObject("TECHNICAL").getJSONObject(apiTwo));
			}
			json.put("TECHNICAL_DETAILS", technicalJSON);
			String uatEncType = apiUserData.getUatEncType();
			String uatAlgorithm = apiUserData.getUatAlgorithm();
			String uatAlgoMode = apiUserData.getUatAlgoMode();
			String uatAlgoPadding = apiUserData.getUatAlgoPadding();
			String uatAlgoKeySize = apiUserData.getUatAlgoKeySize();
			String uatAlgoIVLength = apiUserData.getUatAlgoIVLength();
			String uatHybAlgorithm = apiUserData.getUatHybAlgorithm();
			String uatHybAlgoMode = apiUserData.getUatHybAlgorithm();
			String uatHybAlgoPadding = apiUserData.getUatHybAlgoPadding();
			String uatHybAlgoKeySize = apiUserData.getUatAlgoKeySize();
			String uatHybAlgoIVLength = apiUserData.getUatHybAlgoIVLength();

			if (encryptionRequired.equalsIgnoreCase("true") || encryptionRequired == "true") {
				String encFields = null;
				String encPayload = null;
				if (uatEncType.equals("SELECT_FIELD")) {
					uatEncType = "Select Field Value";
					if (uatAlgoIVLength != "") {
						encFields = uatEncType + " - " + uatAlgorithm + " - " + uatAlgoMode + " - " + uatAlgoPadding
								+ " - " + uatAlgoKeySize + " - " + uatAlgoIVLength;
					} else {
						encFields = uatEncType + " - " + uatAlgorithm + " - " + uatAlgoMode + " - " + uatAlgoPadding
								+ " - " + uatAlgoKeySize;
					}
					json.put("ENCRYPTION", encFields);
				} else if (uatEncType.equals("ALL_FIELD")) {
					uatEncType = "All Field Value";
					if (uatAlgoIVLength != "") {
						encFields = uatEncType + " - " + uatAlgorithm + " - " + uatAlgoMode + " - " + uatAlgoPadding
								+ " - " + uatAlgoKeySize + " - " + uatAlgoIVLength;
					} else {
						encFields = uatEncType + " - " + uatAlgorithm + " - " + uatAlgoMode + " - " + uatAlgoPadding
								+ " - " + uatAlgoKeySize;
					}
					json.put("ENCRYPTION", encFields);
				} else if (uatEncType.equals("ALL_PAYLOAD")) {
					uatEncType = "All Payload";
					if (uatAlgoIVLength != "") {
						encFields = uatEncType + " - " + uatAlgorithm + " - " + uatAlgoMode + " - " + uatAlgoPadding
								+ " - " + uatAlgoKeySize + " - " + uatAlgoIVLength;
					} else {
						encFields = uatEncType + " - " + uatAlgorithm + " - " + uatAlgoMode + " - " + uatAlgoPadding
								+ " - " + uatAlgoKeySize;
					}
					if (uatHybAlgoIVLength != "") {
						encPayload = uatEncType + " - " + uatHybAlgorithm + " - " + uatHybAlgoMode + " - "
								+ uatHybAlgoPadding + " - " + uatHybAlgoKeySize + " - " + uatHybAlgoIVLength;
					} else {
						encPayload = uatEncType + " - " + uatHybAlgorithm + " - " + uatHybAlgoMode + " - "
								+ uatHybAlgoPadding + " - " + uatHybAlgoKeySize;
					}
					json.put("ENCRYPTION", encFields);
					json.put("HYBRID_ENCRYTION", encPayload);
				}
			}
			json.put("ENCRYPTION_TYPE", uatEncType);
			json.put("API_PRODUCT", apiUserData.getApiProduct());
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		return json;
	}

	public JSONObject getAPITwoDetails(String jiraID, String apiTwo) {
		JSONObject json = new JSONObject();
		JSONObject technicalJSON = new JSONObject();
		JSONObject technicalApiJSON = new JSONObject();
		JSONArray reqApiArr = new JSONArray();
		JSONObject requestJSON = new JSONObject();
		JSONArray resApiArr = new JSONArray();
		JSONObject responseJSON = new JSONObject();
		DIYStandardModel apiUserData = null;
		try {
			apiUserData = diyStandardDao.getApiNameData(apiTwo, jiraID);
			reqApiArr = new JSONArray(apiUserData.getRequestPDFData());
			requestJSON.put(apiTwo, reqApiArr);
			json.put("REQ_PDF_DATA", requestJSON);
			resApiArr = new JSONArray(apiUserData.getResponsePDFData());
			responseJSON.put(apiTwo, resApiArr);
			json.put("RES_PDF_DATA", responseJSON);
			technicalApiJSON.put("UAT_SERVICE_URL", apiUserData.getUatServiceUrl());
			technicalApiJSON.put("PROD_SERVICE_URL", apiUserData.getProdServiceUrl());
			technicalJSON.put(apiTwo, technicalApiJSON);
			json.put("TECHNICAL", technicalJSON);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		}
		LOGGER.info("getAPITwoDetails : " + json.toString());
		return json;
	}

	@POST
	@Path("/fetchAPIUrls")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response fetchAPIUrls(@FormParam("jiraID") String jiraID) {
		DIYStandardModel apiJiraData = diyStandardDao.getJIRAData(jiraID);
		JSONArray productsList = null;
		try {
			productsList = diyStandardDao.fetchSandBoxURLsList(apiJiraData.getApiName(), apiJiraData.getApiID());
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return Response.ok(productsList.toString()).build();
	}

	public String addProductExistingApp(String jiraID, String parentJiraID, String gatewayProduct) {

		DIYStandardModel apiJiraData = null;
		String accessToken = null;
		String environment = null;
		String addProductResponse = "";
		String appName = null;
		JSONObject apiProductsObj = null;
		JSONArray newProductArr = null;
		String apiKey = null;
		try {
			apiJiraData = diyStandardDao.getJIRAData(parentJiraID);
			String userMail = apiJiraData.getUserEmail();
			appName = apiJiraData.getAppname();
			if (apiJiraData.getJiraStatus().equalsIgnoreCase("GO LIVE")) {
				environment = "PROD";
			} else {
				environment = "UAT";
			}
			accessToken = ixcAccessToken(environment);
			String appResponse = getIXCAppDMZ(userMail, environment, accessToken, appName);
			LOGGER.info(jiraID + " : Existong APP Response : " + appResponse);
			// add apiProducts to existing app
			JSONObject appJSON = new JSONObject(appResponse);
			JSONArray credArray = appJSON.getJSONArray("credentials");
			for (int i = 0; i < credArray.length(); i++) {
				JSONObject credArrayObj = credArray.getJSONObject(i);
				JSONArray apiProductsArr = credArrayObj.getJSONArray("apiProducts");
				apiKey = credArrayObj.getString("consumerKey");
				for (int j = 0; j < apiProductsArr.length(); j++) {
					String oldProduct = apiProductsArr.getJSONObject(j).getString("apiproduct");
					newProductArr = new JSONArray();
					newProductArr.put(oldProduct);
				}
				newProductArr.put(gatewayProduct);
				apiProductsObj = new JSONObject();
				apiProductsObj.put("apiProducts", newProductArr);
				LOGGER.info("apiKey : " + i + " : addProduct REQUEST : " + apiProductsObj.toString());
				addProductResponse = addProductIXCApp(apiProductsObj.toString(), userMail, environment, accessToken,
						appName, apiKey);
				LOGGER.info("apiKey : " + i + " : addProduct RESPONSE : " + addProductResponse);
			}
		} catch (IXCAPPNotExistException e) {
			LOGGER.info("IXC APP Not Exist Exception : " + appName);
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}
		return addProductResponse;
	}

	private String addProductIXCApp(String bodyData, String userEmail, String environment, String accessToken,
			String appName, String apiKey) {
		String strresponse = "";
		StringBuffer response = null;
		URL verifyUrl = null;
		try {
			if (environment.equals("UAT") || environment == "UAT") {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-dev/developers/"
								+ userEmail + "/apps/" + appName + "/keys/" + apiKey);
			} else {
				verifyUrl = new URL(
						"https://apigee.googleapis.com/v1/organizations/tsg1-apigee-hybrid-dmz-prod/developers/"
								+ userEmail + "/apps/" + appName + "/keys/" + apiKey);
			}
			LOGGER.info("verifyUrl : " + verifyUrl.toString());
			LOGGER.info("bodyData : " + bodyData);
			Proxy webProxy = new Proxy(Proxy.Type.HTTP,
					new InetSocketAddress(GwConstants.UAT_PROXY_IP, GwConstants.UAT_PROXY_PORT));
			HttpURLConnection webProxyConnection = (HttpURLConnection) verifyUrl.openConnection(webProxy);
			webProxyConnection.setDoOutput(true);
			webProxyConnection.setDoInput(true);
			webProxyConnection.setRequestProperty("Authorization", "Bearer " + accessToken);
			webProxyConnection.setRequestProperty("Content-Type", "application/json");
			webProxyConnection.setRequestProperty("Accept", "application/json");
			webProxyConnection.setRequestMethod("PUT");

			try (OutputStream os = webProxyConnection.getOutputStream()) {
				byte[] input = bodyData.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			int responseCode = webProxyConnection.getResponseCode();
			LOGGER.info("ADD PRODUCT Response Code for EXISTING APP : " + responseCode);
			if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getInputStream()));
				String inputLine;
				response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				strresponse = response.toString();
			} else {
				BufferedReader in = new BufferedReader(new InputStreamReader(webProxyConnection.getErrorStream()));
				String inputLine;
				response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				String errResponse = response.toString();
				LOGGER.info("errResponse APP :" + errResponse);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
		}

		return strresponse;
	}

	@POST
	@Path("/changeExistingDetails")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public Response changeExistingDetails(@FormDataParam("userID") String userID,
			@FormDataParam("userEmail") String userEmail, @FormDataParam("apiProduct") String apiProduct,
			@FormDataParam("apiParent") String apiParent, @FormDataParam("apiName") String apiName,
			@FormDataParam("apiID") String apiID, @FormDataParam("apiType") String apiType,
			@FormDataParam("file") File file, @FormDataParam("file") FormDataContentDisposition file1Detail,
			@FormDataParam("payloadAPIData") String payloadAPIData, @FormDataParam("jiraCategory") String jiraCategory,
			@FormDataParam("parentJira") String parentJira) {
		ResponseModel responseModel = new ResponseModel();
		String jiraID = null;
		String filePath = null;
		String fileFileName = null;
		String fileCertificate = null;
		boolean isSaved = false;
		boolean fileDone = false;
		Response clientResponse1 = null;
		boolean isFileUploadedJira = false;
		int loopValue = 0;
		JSONObject payloadJSON = null;
		JSONObject apiDataJSON = null;
		String prodAuthUserName = null;
		String prodAuthPassword = null;
		String prodAuthUserNameValue = null;
		String prodAuthPasswordValue = null;
		String prodAuthHeaders = null;
		String prodChecksumSecret = null;
		String prodServiceUrl = null;
		String jiraDirPath = null;
		String attachmentUrl = null;
		boolean isJiraCreated = false;
		JSONObject filePaths1 = null;
		DIYStandardModel apiUserDataModel = null;
		try {
			if (apiProduct.equalsIgnoreCase("Collections")
					|| apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("OUTBOUND")) {
				String[] apiNameSplit = apiName.split(",");
				int apiNameCount = apiNameSplit.length;
				LOGGER.info("apiNameCount : " + apiNameCount);
				String[] apiIDSplit = apiID.split(",");
				if (apiNameCount == apiIDSplit.length) {
					for (int i = 0; i < apiNameCount; i++) {
						loopValue = i;
						LOGGER.info("loopValue : " + loopValue);
						payloadJSON = new JSONObject(payloadAPIData);
						apiDataJSON = payloadJSON.getJSONObject(apiNameSplit[i]);
						apiUserDataModel = diyStandardDao.getApiNameData(apiNameSplit[i], parentJira);
						String uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
						String prodDomainName = apiDataJSON.getString("prodDomainName");
						String prodIP = apiDataJSON.getString("prodIP");
						prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
						String prodPort = apiDataJSON.getString("prodPort");

						String uatChecksumRequired = null;
						if (apiDataJSON.has("uatChecksumRequired")) {
							uatChecksumRequired = apiDataJSON.getString("uatChecksumRequired");
						}
						if (uatChecksumRequired.equalsIgnoreCase("true")) {
							if (apiDataJSON.has("prodChecksumSecret")) {
								prodChecksumSecret = apiDataJSON.getString("prodChecksumSecret");
							}
						}
						String uatAuthenticationRequired = null;
						if (apiDataJSON.has("uatAuthenticationRequired")) {
							uatAuthenticationRequired = apiDataJSON.getString("uatAuthenticationRequired");
						}
						if (uatAuthenticationRequired.equalsIgnoreCase("true")) {
							String uatAPIAuthentication = null;
							if (apiDataJSON.has("uatAPIAuthentication")) {
								uatAPIAuthentication = apiDataJSON.getString("uatAPIAuthentication");
							}
							if (apiDataJSON.has("prodAuthHeaders")) {
								prodAuthHeaders = apiDataJSON.getString("prodAuthHeaders");

								if (uatAPIAuthentication.equals("BASIC_AUTH")) {
									JSONArray jsonArr = new JSONArray(prodAuthHeaders);
									for (int j = 0; j < jsonArr.length(); j++) {
										JSONObject jsonUsername = jsonArr.getJSONObject(j);
										if (jsonUsername.has("name") && jsonUsername.has("value")
												&& jsonUsername.getString("name").equals("username")) {
											prodAuthUserName = jsonUsername.getString("name");
											prodAuthUserNameValue = jsonUsername.getString("value");
										} else if (jsonUsername.has("name") && jsonUsername.has("value")
												&& jsonUsername.getString("name").equals("password")) {
											prodAuthPassword = jsonUsername.getString("name");
											prodAuthPasswordValue = jsonUsername.getString("value");
										} else {
											LOGGER.info("null");
										}
									}
								} else if (uatAPIAuthentication.equals("CUSTOM_AUTH")
										|| uatAPIAuthentication.equals("SOAP_AUTH")) {
									JSONArray jsonArr = new JSONArray(prodAuthHeaders);
									for (int k = 0; k < jsonArr.length(); k++) {
										JSONObject jsonUsername = jsonArr.getJSONObject(k);
										if (jsonUsername.has("keyName") && jsonUsername.has("name")
												&& jsonUsername.has("value")
												&& jsonUsername.getString("keyName").equals("username")) {
											prodAuthUserName = jsonUsername.getString("name");
											prodAuthUserNameValue = jsonUsername.getString("value");
										} else if (jsonUsername.has("keyName") && jsonUsername.has("name")
												&& jsonUsername.has("value")
												&& jsonUsername.getString("keyName").equals("password")) {
											prodAuthPassword = jsonUsername.getString("name");
											prodAuthPasswordValue = jsonUsername.getString("value");
										} else {
											LOGGER.info("prodAuthHeaders null");
										}
									}
								}
							}
						}
						if (isJiraCreated == false) {
							try {
								jiraID = jiraChangeExistingDIY(parentJira, apiProduct, apiType);
								LOGGER.info("CHANGE EXISTING SUB JIRA for " + parentJira + " Parent JIRA : " + jiraID);
								if (jiraID == null) {
									responseModel.setMessage("JIRA creation failed.Please contact administrator");
									responseModel.setStatus(false);
									responseModel.setStatus_code(200);
									return Response.ok(responseModel).build();
								} else {
									boolean isInserted = diyStandardDao.saveChangeExistingDetails(jiraID, userID,
											apiProduct, apiType, apiParent, apiName, apiID, jiraCategory, parentJira,
											userEmail);
									LOGGER.info("CHANGE EXISTING INSERTED : " + isInserted);
								}
							} catch (Exception e) {
								StringWriter ex = new StringWriter();
								e.printStackTrace(new PrintWriter(ex));
								LOGGER.error(ex.toString());
								responseModel.setMessage("JIRA creation failed.Please contact administrator");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							}
						} else {
							LOGGER.info(jiraID + " : isJiraCreated : " + isJiraCreated);
						}

						try {
							JSONObject fields = new JSONObject();
							JSONObject issue = new JSONObject();
							fields.put("customfield_15701", apiID);
							fields.put("customfield_10664", apiName);
							fields.put("customfield_15703", apiProduct);
							fields.put("customfield_15704", apiProduct);
							JSONObject apiTypeJSON = new JSONObject();
							if (apiType.equalsIgnoreCase("INBOUND")) {
								apiTypeJSON.put("id", "18819");
							} else {
								apiTypeJSON.put("id", "18818");
							}
							fields.put("customfield_15826", apiTypeJSON);
							JSONObject natureOfApiJSON = new JSONObject();
							if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Published")) {
								natureOfApiJSON.put("id", "18820");
							} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Consumed")) {
								natureOfApiJSON.put("id", "18821");
							} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("Internal API")) {
								natureOfApiJSON.put("id", "18822");
							} else {
								natureOfApiJSON.put("id", "18820");
							}
							fields.put("customfield_15827", natureOfApiJSON);
							fields.put("customfield_15700", userID);
							fields.put("customfield_15768", apiUserDataModel.getOrganizationName());
							fields.put("customfield_15631", prodDomainName);
							fields.put("customfield_15632", prodIP);
							fields.put("customfield_15635", prodServiceUrl);
							fields.put("customfield_15636", prodPort);
							issue.put("fields", fields);
							LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
							boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
							if (fieldsUpdated == true) {
								LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
							}
						} catch (JSONException e) {
							LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
						}
						filePaths1 = diyStandardDao.getFilePaths1(parentJira, apiNameSplit[0]);
						jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
						attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
								+ "/attachments";
						if (loopValue == 0) {
							if (uatEncryptionRequired.equals("true")) {
								if (apiUserDataModel.getUatAlgorithm().equalsIgnoreCase("RSA")
										|| apiUserDataModel.getUatHybAlgorithm().contentEquals("RSA")) {
									if (file.length() > 0) {
										fileFileName = "PROD_" + file1Detail.getFileName().replaceAll(" ", "_");
										String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
										filePath = jiraDirPath + "/" + timeStamp + "_" + fileFileName;
										fileCertificate = checkCertificateMethod(file);
										LOGGER.info("fileCertificate : " + fileCertificate);
										if (fileCertificate == "FILE NOT FOUND") {
											responseModel.setMessage("Uploaded certicate contains invalid content");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										} else {
											clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, file,
													fileFileName);
											if (clientResponse1.getStatus() == 200
													|| clientResponse1.getStatus() == 201) {
												fileDone = true;
											} else {
												fileDone = true;
											}
											serverFileUpload(filePath, jiraDirPath, file);
										}
									} else {
										fileDone = true;
										filePath = filePaths1.getString("PROD_PUBLIC_KEY");
										LOGGER.info("filePath : " + filePath);
										fileCertificate = checkCertificatePath(filePath);
										LOGGER.info("fileCertificate : " + fileCertificate);
										if (fileCertificate == "FILE NOT FOUND") {
											responseModel.setMessage("Uploaded Certificate contains invalid content");
											responseModel.setStatus(false);
											responseModel.setStatus_code(200);
											return Response.ok(responseModel).build();
										}
									}
									if (fileDone == true) {
										isFileUploadedJira = true;
									}
								} else {
									isFileUploadedJira = true;
								}
							} else {
								isFileUploadedJira = true;
							}
						} else {
							isFileUploadedJira = true;
						}
						LOGGER.info("isFileUploadedJira : " + isFileUploadedJira);
						if (isFileUploadedJira == true) {
							JSONObject json = new JSONObject();
							json.put("isMongoPrefsPRODUpdated", false);
							json.put("isAppCreationPRODDone", false);
							String mongoJSON = json.toString();
							isSaved = diyStandardDao.changeProdOutBoundTechnical(userID, jiraID, apiProduct, apiParent,
									apiNameSplit[i], apiIDSplit[i], apiType, prodDomainName, prodIP, prodServiceUrl,
									prodPort, filePath, fileCertificate, loopValue, prodChecksumSecret,
									prodAuthUserName, prodAuthUserNameValue, prodAuthPassword, prodAuthPasswordValue,
									prodAuthHeaders, parentJira, mongoJSON);
							if (!isSaved) {
								LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
								responseModel.setMessage("Details not inserted into DB : " + apiParent);
								responseModel.setStatus(isSaved);
								responseModel.setData(jiraID);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								if (apiProduct.equalsIgnoreCase("Collections")
										&& apiType.equalsIgnoreCase("OUTBOUND")) {
									jiraTransition("11", jiraID);
									boolean isReverted = jiraTransition("41", jiraID);
									jiraComment("JIRA Status Moved to InVerification Collections", jiraID);
									if (isReverted == true) {
										responseModel.setMessage("Onboarding Request Submitted Successfully");
										responseModel.setStatus(isSaved);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									} else {
										responseModel.setMessage("Jira Transition failed");
										responseModel.setStatus(false);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}
								} else if (apiProduct.equalsIgnoreCase("Trade APIs")
										&& apiType.equalsIgnoreCase("OUTBOUND")) {
									jiraTransition("11", jiraID);
									boolean isReverted = jiraTransition("21", jiraID);
									jiraComment("JIRA Status Moved to InVerification Trade APIs", jiraID);
									if (isReverted == true) {
										responseModel.setMessage("Onboarding Request Submitted Successfully");
										responseModel.setStatus(isSaved);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									} else {
										responseModel.setMessage("Jira Transition failed");
										responseModel.setStatus(false);
										responseModel.setData(jiraID);
										responseModel.setStatus_code(200);
										return Response.ok(responseModel).build();
									}
								}
							}
						} else {
							responseModel.setMessage("file upload failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				} else {
					LOGGER.info("API_ID & API_NAME COUNT MISMATCHED");
				}
			} else if (apiProduct.equalsIgnoreCase("Payments") && apiType.equalsIgnoreCase("INBOUND")) {
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, parentJira);
				if (apiParent.equals("Transac Pro API") || apiParent.equals("CIB Payment API")
						|| apiParent.equals("Account Service API") || apiParent.equals("Composite Payment API")
						|| apiParent.equals("Composite Validation API") || apiParent.equals("Dealer Collection API")
						|| apiParent.equals("Fixed Deposit API")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String uatEncryptionRequired = null;
					String prodIP = null;
					if (apiDataJSON.has("uatEncryptionRequired")) {
						uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
					}
					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					}

					try {
						jiraID = jiraChangeExistingDIY(parentJira, apiProduct, apiType);
						LOGGER.info("CHANGE EXISTING SUB JIRA for " + parentJira + " Parent JIRA : " + jiraID);
						if (jiraID == null) {
							responseModel.setMessage("JIRA creation failed.Please contact administrator");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							boolean isInserted = diyStandardDao.saveChangeExistingDetails(jiraID, userID, apiProduct,
									apiType, apiParent, apiName, apiID, jiraCategory, parentJira, userEmail);
							LOGGER.info("CHANGE EXISTING INSERTED : " + isInserted);
							try {
								JSONObject fields = new JSONObject();
								JSONObject issue = new JSONObject();
								fields.put("customfield_15701", apiID);
								fields.put("customfield_15703", apiProduct);
								fields.put("customfield_15704", apiProduct);
								JSONObject apiTypeJSON = new JSONObject();
								if (apiType.equalsIgnoreCase("INBOUND")) {
									apiTypeJSON.put("id", "18819");
								} else {
									apiTypeJSON.put("id", "18818");
								}
								fields.put("customfield_15826", apiTypeJSON);
								JSONObject natureOfApiJSON = new JSONObject();
								if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Published")) {
									natureOfApiJSON.put("id", "18820");
								} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Consumed")) {
									natureOfApiJSON.put("id", "18821");
								} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("Internal API")) {
									natureOfApiJSON.put("id", "18822");
								} else {
									natureOfApiJSON.put("id", "18820");
								}
								fields.put("customfield_15827", natureOfApiJSON);
								fields.put("customfield_15700", userID);
								fields.put("customfield_15768", apiUserDataModel.getOrganizationName());
								fields.put("customfield_15632", prodIP);
								issue.put("fields", fields);
								LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
								boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
								if (fieldsUpdated == true) {
									LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
								}
							} catch (JSONException e) {
								LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
							}
						}
					} catch (Exception e) {
						responseModel.setMessage("JIRA creation failed.Please contact administrator");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}

					jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
					attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
							+ "/attachments";
					if (uatEncryptionRequired.equals("true")) {
						if (file.length() > 0) {
							fileFileName = "PROD_" + file1Detail.getFileName().replaceAll(" ", "_");
							String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
							filePath = jiraDirPath + "/" + timeStamp + "_" + fileFileName;
							fileCertificate = checkCertificateMethod(file);
							LOGGER.info("file1Certificate : " + fileCertificate);
							if (fileCertificate == "FILE NOT FOUND") {
								responseModel.setMessage("Uploaded certicate contains invalid content");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, file,
										fileFileName);
								if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
									fileDone = true;
								}
								serverFileUpload(filePath, jiraDirPath, file);
							}
						} else {
							fileCertificate = checkCertificatePath(apiUserDataModel.getProdPublicKey());
							LOGGER.info("prodPublicCertificate : " + fileCertificate);
							filePath = apiUserDataModel.getProdPublicKey();
						}
					}
					JSONObject json = new JSONObject();
					json.put("isKVMPRODUpdated", false);
					json.put("isAppCreationPRODDone", false);
					String appJSON = json.toString();
					isSaved = diyStandardDao.changeProdPaymentsTechnical(jiraID, userID, prodIP, filePath, appJSON);
					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						jiraTransition("11", jiraID);
						boolean isReverted = jiraTransition("31", jiraID);
						jiraComment("JIRA Status Moved to InVerification Payments ", jiraID);
						if (isReverted == true) {
							responseModel.setMessage("Onboarding Request Submitted Successfully");
							responseModel.setStatus(isSaved);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				} else if (apiParent.equals("UPI Collect API") || apiParent.equals("UPI Mandate API")
						|| apiParent.equals("UPI QR/ Intent API")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String uatEncryptionRequired = null;
					String prodIP = null;
					if (apiDataJSON.has("uatEncryptionRequired")) {
						uatEncryptionRequired = apiDataJSON.getString("uatEncryptionRequired");
					} else {
						uatEncryptionRequired = "";
					}
					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					} else {
						prodIP = "";
					}
					if (apiDataJSON.has("prodServiceUrl")) {
						prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
					} else {
						prodServiceUrl = "";
					}

					try {
						jiraID = jiraChangeExistingDIY(parentJira, apiProduct, apiType);
						LOGGER.info("CHANGE EXISTING SUB JIRA for " + parentJira + " Parent JIRA : " + jiraID);
						if (jiraID == null) {
							responseModel.setMessage("JIRA creation failed.Please contact administrator");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							boolean isInserted = diyStandardDao.saveChangeExistingDetails(jiraID, userID, apiProduct,
									apiType, apiParent, apiName, apiID, jiraCategory, parentJira, userEmail);
							LOGGER.info("CHANGE EXISTING INSERTED : " + isInserted);
							try {
								JSONObject fields = new JSONObject();
								JSONObject issue = new JSONObject();
								fields.put("customfield_15701", apiID);
								fields.put("customfield_15703", apiProduct);
								fields.put("customfield_15704", apiProduct);
								JSONObject apiTypeJSON = new JSONObject();
								if (apiType.equalsIgnoreCase("INBOUND")) {
									apiTypeJSON.put("id", "18819");
								} else {
									apiTypeJSON.put("id", "18818");
								}
								fields.put("customfield_15826", apiTypeJSON);
								JSONObject natureOfApiJSON = new JSONObject();
								if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Published")) {
									natureOfApiJSON.put("id", "18820");
								} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Consumed")) {
									natureOfApiJSON.put("id", "18821");
								} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("Internal API")) {
									natureOfApiJSON.put("id", "18822");
								} else {
									natureOfApiJSON.put("id", "18820");
								}
								fields.put("customfield_15827", natureOfApiJSON);
								fields.put("customfield_15700", userID);
								fields.put("customfield_15768", apiUserDataModel.getOrganizationName());
								fields.put("customfield_15632", prodIP);
								fields.put("customfield_15635", prodServiceUrl);
								issue.put("fields", fields);
								LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
								boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
								if (fieldsUpdated == true) {
									LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
								}
							} catch (JSONException e) {
								LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
							}
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.error(ex.toString());
						responseModel.setMessage("JIRA creation failed.Please contact administrator");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}

					jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
					attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
							+ "/attachments";
					if (uatEncryptionRequired.equals("true")) {
						if (file.length() > 0) {
							fileFileName = "PROD_" + file1Detail.getFileName().replaceAll(" ", "_");
							String timeStamp = new SimpleDateFormat("yyyyMMddHHmm").format(new Date());
							filePath = jiraDirPath + "/" + timeStamp + "_" + fileFileName;
							fileCertificate = checkCertificateMethod(file);
							LOGGER.info("file1Certificate : " + fileCertificate);
							if (fileCertificate == "FILE NOT FOUND") {
								responseModel.setMessage("Uploaded certicate contains invalid content");
								responseModel.setStatus(false);
								responseModel.setStatus_code(200);
								return Response.ok(responseModel).build();
							} else {
								clientResponse1 = HttpClient.postUpdateJiraAttachment(attachmentUrl, file,
										fileFileName);
								if (clientResponse1.getStatus() == 200 || clientResponse1.getStatus() == 201) {
									fileDone = true;
								}
								serverFileUpload(filePath, jiraDirPath, file);
							}
						} else {
							fileCertificate = checkCertificatePath(apiUserDataModel.getProdPublicKey());
							LOGGER.info("prodPublicCertificate : " + fileCertificate);
							filePath = apiUserDataModel.getProdPublicKey();
						}
					}
					JSONObject json = new JSONObject();
					json.put("isKVMPRODUpdated", false);
					json.put("isAppCreationPRODDone", false);
					String appJSON = json.toString();
					isSaved = diyStandardDao.changeProdUPITechnical(jiraID, userID, prodIP, filePath, prodServiceUrl,
							appJSON);
					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						jiraTransition("11", jiraID);
						boolean isReverted = jiraTransition("31", jiraID);
						jiraComment("JIRA Status Moved to InVerification Payments ", jiraID);
						if (isReverted == true) {
							responseModel.setMessage("Onboarding Request Submitted Successfully");
							responseModel.setStatus(isSaved);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				} else if (apiParent.equals("Payment Model I")) {
					payloadJSON = new JSONObject(payloadAPIData);
					apiDataJSON = payloadJSON.getJSONObject(apiParent);
					String prodIP = null;
					String prodPort = null;

					if (apiDataJSON.has("prodIP")) {
						prodIP = apiDataJSON.getString("prodIP");
					} else {
						prodIP = "";
					}
					if (apiDataJSON.has("prodPort")) {
						prodPort = apiDataJSON.getString("prodPort");
					} else {
						prodPort = "";
					}
					if (apiDataJSON.has("prodServiceUrl")) {
						prodServiceUrl = apiDataJSON.getString("prodServiceUrl");
					} else {
						prodServiceUrl = "";
					}

					try {
						jiraID = jiraChangeExistingDIY(parentJira, apiProduct, apiType);
						LOGGER.info("CHANGE EXISTING SUB JIRA for " + parentJira + " Parent JIRA : " + jiraID);
						if (jiraID == null) {
							responseModel.setMessage("JIRA creation failed.Please contact administrator");
							responseModel.setStatus(false);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							boolean isInserted = diyStandardDao.saveChangeExistingDetails(jiraID, userID, apiProduct,
									apiType, apiParent, apiName, apiID, jiraCategory, parentJira, userEmail);
							LOGGER.info("CHANGE EXISTING INSERTED : " + isInserted);
							try {
								JSONObject fields = new JSONObject();
								JSONObject issue = new JSONObject();
								fields.put("customfield_15701", apiID);
								fields.put("customfield_15703", apiProduct);
								fields.put("customfield_15704", apiProduct);
								JSONObject apiTypeJSON = new JSONObject();
								if (apiType.equalsIgnoreCase("INBOUND")) {
									apiTypeJSON.put("id", "18819");
								} else {
									apiTypeJSON.put("id", "18818");
								}
								fields.put("customfield_15826", apiTypeJSON);
								JSONObject natureOfApiJSON = new JSONObject();
								if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Published")) {
									natureOfApiJSON.put("id", "18820");
								} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Consumed")) {
									natureOfApiJSON.put("id", "18821");
								} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("Internal API")) {
									natureOfApiJSON.put("id", "18822");
								} else {
									natureOfApiJSON.put("id", "18820");
								}
								fields.put("customfield_15827", natureOfApiJSON);
								fields.put("customfield_15700", userID);
								fields.put("customfield_15768", apiUserDataModel.getOrganizationName());
								fields.put("customfield_15632", prodIP);
								fields.put("customfield_15635", prodServiceUrl);
								fields.put("customfield_15636", prodPort);
								issue.put("fields", fields);
								LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
								boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
								if (fieldsUpdated == true) {
									LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
								}
							} catch (JSONException e) {
								LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
							}
						}
					} catch (Exception e) {
						StringWriter ex = new StringWriter();
						e.printStackTrace(new PrintWriter(ex));
						LOGGER.error(ex.toString());
						responseModel.setMessage("JIRA creation failed.Please contact administrator");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
					JSONObject json = new JSONObject();
					json.put("isKVMPRODUpdated", false);
					json.put("isAppCreationPRODDone", false);
					String appJSON = json.toString();
					isSaved = diyStandardDao.changeProdBulkPaymentsTechnical(jiraID, userID, prodIP, prodServiceUrl,
							prodPort, appJSON);

					LOGGER.info("Payments Technical Details Saved : " + isSaved);
					if (!isSaved) {
						LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
						responseModel.setMessage("Details not inserted into DB : " + apiParent);
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						jiraTransition("11", jiraID);
						boolean isReverted = jiraTransition("31", jiraID);
						jiraComment("JIRA Status Moved to InVerification Payments ", jiraID);
						if (isReverted == true) {
							responseModel.setMessage("Onboarding Request Submitted Successfully");
							responseModel.setStatus(isSaved);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						} else {
							responseModel.setMessage("Jira Transition failed");
							responseModel.setStatus(false);
							responseModel.setData(jiraID);
							responseModel.setStatus_code(200);
							return Response.ok(responseModel).build();
						}
					}
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs") && apiType.equalsIgnoreCase("INBOUND")) {
				apiUserDataModel = diyStandardDao.getApiParentData(apiParent, parentJira);
				payloadJSON = new JSONObject(payloadAPIData);
				apiDataJSON = payloadJSON.getJSONObject(apiParent);
				String prodIP = apiDataJSON.getString("prodIP");

				try {
					jiraID = jiraChangeExistingDIY(parentJira, apiProduct, apiType);
					LOGGER.info("CHANGE EXISTING SUB JIRA for " + parentJira + " Parent JIRA : " + jiraID);
					if (jiraID == null) {
						responseModel.setMessage("JIRA creation failed.Please contact administrator");
						responseModel.setStatus(false);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						boolean isInserted = diyStandardDao.saveChangeExistingDetails(jiraID, userID, apiProduct,
								apiType, apiParent, apiName, apiID, jiraCategory, parentJira, userEmail);
						LOGGER.info("CHANGE EXISTING INSERTED : " + isInserted);
						try {
							JSONObject fields = new JSONObject();
							JSONObject issue = new JSONObject();
							fields.put("customfield_15701", apiID);
							fields.put("customfield_15703", apiProduct);
							fields.put("customfield_10664", apiName);
							fields.put("customfield_15704", apiProduct);
							JSONObject apiTypeJSON = new JSONObject();
							if (apiType.equalsIgnoreCase("INBOUND")) {
								apiTypeJSON.put("id", "18819");
							} else {
								apiTypeJSON.put("id", "18818");
							}
							fields.put("customfield_15826", apiTypeJSON);
							JSONObject natureOfApiJSON = new JSONObject();
							if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Published")) {
								natureOfApiJSON.put("id", "18820");
							} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("External Consumed")) {
								natureOfApiJSON.put("id", "18821");
							} else if (apiUserDataModel.getNatureOfAPI().equalsIgnoreCase("Internal API")) {
								natureOfApiJSON.put("id", "18822");
							} else {
								natureOfApiJSON.put("id", "18820");
							}
							fields.put("customfield_15827", natureOfApiJSON);
							fields.put("customfield_15700", userID);
							fields.put("customfield_15768", apiUserDataModel.getOrganizationName());
							fields.put("customfield_15632", prodIP);
							issue.put("fields", fields);
							LOGGER.info("JIRA CUSTOM_FILEDS TECH : " + issue.toString());
							boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
							if (fieldsUpdated == true) {
								LOGGER.info("JIRA CUSTOM_FILEDS UPDATED : " + fieldsUpdated);
							}
						} catch (JSONException e) {
							LOGGER.error("JIRA CUSTOM_FILEDS " + jiraID);
						}
					}
				} catch (Exception e) {
					StringWriter ex = new StringWriter();
					e.printStackTrace(new PrintWriter(ex));
					LOGGER.error(ex.toString());
					responseModel.setMessage("JIRA creation failed.Please contact administrator");
					responseModel.setStatus(false);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				}
				JSONObject json = new JSONObject();
				json.put("isKVMPRODUpdated", false);
				json.put("isAppCreationPRODDone", false);
				String appJSON = json.toString();
				isSaved = diyStandardDao.changeProdTradeTechnical(jiraID, userID, prodIP, appJSON);
				LOGGER.info("Trade APIs Technical Details Saved : " + isSaved);
				if (!isSaved) {
					LOGGER.info("Details not inserted into Oracle DB : " + apiParent);
					responseModel.setMessage("Details not inserted into DB : " + apiParent);
					responseModel.setStatus(isSaved);
					responseModel.setData(jiraID);
					responseModel.setStatus_code(200);
					return Response.ok(responseModel).build();
				} else {
					jiraTransition("11", jiraID);
					boolean isReverted = jiraTransition("21", jiraID);
					jiraComment("JIRA Status Moved to InVerification Trade APIs ", jiraID);
					if (isReverted == true) {
						responseModel.setMessage("Onboarding Request Submitted Successfully");
						responseModel.setStatus(isSaved);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					} else {
						responseModel.setMessage("Jira Transition failed");
						responseModel.setStatus(false);
						responseModel.setData(jiraID);
						responseModel.setStatus_code(200);
						return Response.ok(responseModel).build();
					}
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
			responseModel.setMessage("Something went wrong.Please contact administrator");
			responseModel.setStatus(false);
			responseModel.setStatus_code(200);
			return Response.ok(responseModel).build();
		}
		return Response.ok(responseModel).build();
	}

	public String getPrefsProdMongoDB(String clientCode, String operationName, String paymentModes, String apiProduct) {

		String strresponse = null;
		URL verifyUrl = null;
		LOGGER.info("PROD MONGO GET DETAILS");
		LOGGER.info("paymentModes : " + paymentModes);
		LOGGER.info("apiProduct : " + apiProduct);
		LOGGER.info("clientCode : " + clientCode);
		LOGGER.info("operationName : " + operationName);
		try {
			if (apiProduct.equalsIgnoreCase("Collections")) {
				if (operationName == "intimation/MODEL-5" || operationName.equalsIgnoreCase("intimation/MODEL-5")
						|| operationName == "intimation/MODEL-7" || operationName.equalsIgnoreCase("intimation/MODEL-7")
						|| operationName == "credit_confirmation/MODEL-7"
						|| operationName.equalsIgnoreCase("credit_confirmation/MODEL-7")) {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD_MH + clientCode + "/" + operationName + "/"
							+ paymentModes + "/preferences");
					strresponse = createGET(verifyUrl);
				} else if (operationName.equalsIgnoreCase("send-alert") || operationName == "send-alert") {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + clientCode + "/" + operationName
							+ "/preferences");
					strresponse = createGET(verifyUrl);
				} else {
					verifyUrl = new URL(GwConstants.DIY_MONGO_PROD + "customers/" + clientCode + "/" + operationName
							+ "/preferences");
					strresponse = createGET(verifyUrl);
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				verifyUrl = new URL(
						GwConstants.DIY_MONGO_PROD + "customers/" + clientCode + "/" + operationName + "/preferences");
				strresponse = createGET(verifyUrl);
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error("Exception:" + ex.toString());
		}
		return strresponse;
	}

	@POST
	@Path("/getGatewayProducts")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response getGatewayProducts(@FormParam("jiraID") String jiraID) {
		DIYStandardModel apiJiraData = diyStandardDao.getJIRAData(jiraID);
		JSONObject productsList = new JSONObject();
		HashSet<String> productArray = new HashSet<>();
		String accessToken = null;
		String[] envArr = { "UAT" };
		for (String env : envArr) {
			accessToken = ixcAccessToken(env);
			try {
				String appResponse = getIXCAppDMZ(apiJiraData.getUserEmail(), env, accessToken,
						apiJiraData.getAppname());
				JSONObject appResponseJSON = new JSONObject(appResponse);
				JSONArray credArray = appResponseJSON.getJSONArray("credentials");
				for (int i = 0; i < credArray.length(); i++) {
					JSONObject credArrayObj = credArray.getJSONObject(i);
					JSONArray apiProductsArr = credArrayObj.getJSONArray("apiProducts");
					for (int j = 0; j < apiProductsArr.length(); j++) {
						String oldProduct = apiProductsArr.getJSONObject(j).getString("apiproduct");
						productArray.add(oldProduct);
					}
				}
				productsList.put(env, productArray.toArray());
			} catch (IXCAPPNotExistException e) {
				StringWriter ex = new StringWriter();
				e.printStackTrace(new PrintWriter(ex));
				LOGGER.info("Exception:" + ex.toString());
			}
		}
		LOGGER.info("GATEWAY PRODUCTS : " + productsList.toString(1));
		return Response.ok(productsList.toString()).build();
	}

	@POST
	@Path("/getAppDetailDIY")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAppDetailDIY(@FormParam("email") String email, @FormParam("appName") String appName,
			@FormParam("env") String env, @FormParam("type") String type) {
		String strresponse = null;
		String accessToken = null;
		try {
			if (type.equalsIgnoreCase("SAAS")) {
				if (env.equalsIgnoreCase("PROD")) {
					accessToken = prodProxyApigeeToken();
				} else if (env.equalsIgnoreCase("UAT")) {
					accessToken = uatProxyApigeeToken();
				}
				try {
					strresponse = getIXCAppSAAS(email, env, accessToken, appName);
				} catch (IXCAPPNotExistException e) {
					LOGGER.info("IXC APP Not Exist Exception : " + appName);
				}
			} else if (type.equalsIgnoreCase("DMZ")) {
				accessToken = ixcAccessToken(env);
				try {
					strresponse = getIXCAppDMZ(email, env, accessToken, appName);
				} catch (IXCAPPNotExistException e) {
					LOGGER.info("IXC APP Not Exist Exception : " + appName);
				}
			}
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.info("Exception:" + ex.toString());
			return Response.ok(null).build();
		}
		return Response.ok(strresponse).build();
	}

	@POST
	@Path("/apiKeyManualDIY")
	@Produces(MediaType.APPLICATION_JSON)
	public boolean apiKeyManualDIY() {
		LOGGER.info("APIKEY JOB MANUAL Started");
		try {
			diyStandardDao.apiKeyCronBoth();
			LOGGER.info("APIKEY JOB MANUAL Finished");
			return true;
		} catch (Exception e) {
			LOGGER.info(e.toString());
			return false;
		}
	}

	@POST
	@Path("/exportPDF2")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public static void exportPDF2(@FormParam("jiraID") String jiraID, @FormParam("username") String username,
			@FormParam("apiName") String apiName, @FormParam("userEmail") String userEmail) {
		final String titleName;
		String encRequired = null;
		File file = null;
		ResponseModel responseModel = new ResponseModel();
		JSONObject techJSON = null;
		FileInputStream fis = null;
//		String imagePath = "/u1/APIGateway/icici.png";
		String imagePath = "D:\\icici.png";
		String apiOne = null;
		String apiTwo = null;
		JSONObject jsonTechAPI2 = null;
		String apiNames = null;
		String apiProduct = null;
		String apiVariant = null;

		apiNames = "intimation/MODEL-7,credit_confirmation/MODEL-7";
		System.out.println("apiNames : " + apiNames);
		String[] apiNamesSplit = apiNames.split(",");
		System.out.println("apiNamesSplit Length : " + apiNamesSplit.length);
		if (apiNamesSplit.length > 1) {
			apiOne = apiNamesSplit[0];
			apiTwo = apiNamesSplit[1];
		} else if (apiNamesSplit.length == 1) {
			apiOne = apiName;
		}
		JSONObject json = new JSONObject(
				"{\"CUSTOM_FIELD_15001\":\"TEST14\",\"UAT_ENCRYPTION_REQUIRED\":\"true\",\"CUST_ID\":\"\",\"API_PARENT\":\"iValidate/MODEL-7\",\"ENCRYPTION\":\"Select Field Value - AES - ECB - PKCS5Padding - 256\",\"RES_PDF_DATA\":{\"intimation/MODEL-7\":[{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"VAN\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"PAYMENT_MODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CustomerIFSC\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"Customername\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"REMARKS\",\"id\":3,\"error\":false,\"clientField\":\"REMARKS\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CURRENCY_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CREDIT_ACCOUNT_NUMBER\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_ACCNO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"UTR\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"STATUS\",\"id\":1,\"error\":false,\"clientField\":\"STATUS\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_IFSC\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"AMOUNT\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"ADD_INFO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"Payercode\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"Beneficiaryname\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_MOBILENO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CUSTOMER_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"Credittime\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_BANKNAME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"TRAN_DATE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTERNAME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"ICICIreferencenumber\",\"selectedFunction\":\"\"}],\"credit_confirmation/MODEL-7\":[{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"VAN\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"PAYMENT_MODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CONFIRMATION_MESSAGE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"REMARKS\",\"id\":2,\"error\":false,\"clientField\":\"REMARKS\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CONFIRMATION_DATETIME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CREDIT_ACCOUNT_NUMBER\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CURRENCY_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_ACCNO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"UTR\",\"selectedFunction\":\"\"},{\"customDetail\":true,\"encryption\":\"\",\"iciciField\":\"STATUS\",\"id\":1,\"detail\":{\"type\":\"Status\",\"value\":\"Success\"},\"error\":false,\"clientField\":\"STATUS\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_IFSC\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"AMOUNT\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"ADD_INFO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_MOBILENO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CUSTOMER_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_BANKNAME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"CONFIRMATION_STATUS_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"TRAN_DATE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":\"\",\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTERNAME\",\"selectedFunction\":\"\"}]},\"ENCRYPTION_TYPE\":\"Select Field Value\",\"ORGANIZATION_NAME\":\"Reliance Industries\",\"UAT_AUTHENTICATION_REQUIRED\":\"false\",\"UAT_WEB_SERVICE\":\"application/json\",\"DEEMED_ACTION\":\"Yes\",\"API_ID\":\"2092\",\"TECHNICAL_DETAILS\":{\"intimation/MODEL-7\":{\"PROD_SERVICE_URL\":\"https://byzansystems.com:7443/byzanEncDecApi/byzan/api/Ecoll_intiSF_J0409\",\"UAT_SERVICE_URL\":\"https://byzansystems.com:7443/byzanEncDecApi/byzan/api/Ecoll_intiSF_J0409\"},\"credit_confirmation/MODEL-7\":{\"PROD_SERVICE_URL\":\"https://byzansystems.com:7443/byzanEncDecApi/byzan/api/Ecoll_CCSF_J0411\",\"UAT_SERVICE_URL\":\"https://byzansystems.com:7443/byzanEncDecApi/byzan/api/Ecoll_CCSF_J0411\"}},\"UAT_API_AUTHENTICATION\":\"NA\",\"REQ_PDF_DATA\":{\"intimation/MODEL-7\":[{\"customDetail\":false,\"encryption\":true,\"iciciField\":\"VIRTUAL IDENTIFIER\",\"id\":14,\"error\":false,\"clientField\":\"VAN\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"PAYMENT MODE\",\"id\":5,\"error\":false,\"clientField\":\"PAYMENT_MODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"BENEFICIARY IFSC\",\"id\":4,\"error\":false,\"clientField\":\"CustomerIFSC\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"BENEFICIARY CUSTOMER NAME\",\"id\":6,\"error\":false,\"clientField\":\"Customername\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CURRENCY CODE\",\"id\":10,\"error\":false,\"clientField\":\"CURRENCY_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CUSTOMER ACCOUNT NUMBER\",\"id\":13,\"error\":false,\"clientField\":\"CREDIT_ACCOUNT_NUMBER\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":true,\"iciciField\":\"SENDER ACCOUNT NUMBER\",\"id\":8,\"error\":false,\"clientField\":\"REMITTER_ACCNO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"UTR\",\"id\":9,\"error\":false,\"clientField\":\"UTR\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER IFSC\",\"id\":1,\"error\":false,\"clientField\":\"REMITTER_IFSC\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"TRANSACTION AMOUNT\",\"id\":7,\"error\":false,\"clientField\":\"AMOUNT\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER TO RECEIVER INFORMATION\",\"id\":11,\"error\":false,\"clientField\":\"ADD_INFO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"PAYER CODE\",\"id\":16,\"error\":false,\"clientField\":\"Payercode\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"BENEFICIARY CUSTOMER NAME\",\"id\":6,\"error\":false,\"clientField\":\"Beneficiaryname\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"REMITTER_MOBILENO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CLIENT CODE\",\"id\":2,\"error\":false,\"clientField\":\"CUSTOMER_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER BANK NAME\",\"id\":3,\"error\":false,\"clientField\":\"REMITTER_BANKNAME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"Credittime\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"TRANSACTION DATE\",\"id\":12,\"error\":false,\"clientField\":\"TRAN_DATE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER NAME\",\"id\":15,\"error\":false,\"clientField\":\"REMITTERNAME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"\",\"id\":null,\"error\":false,\"clientField\":\"ICICIreferencenumber\",\"selectedFunction\":\"\"}],\"credit_confirmation/MODEL-7\":[{\"customDetail\":false,\"encryption\":true,\"iciciField\":\"VIRTUAL IDENTIFIER\",\"id\":2,\"error\":false,\"clientField\":\"VAN\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"PAYMENT MODE\",\"id\":5,\"error\":false,\"clientField\":\"PAYMENT_MODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CONFIRMATION MESSAGE\",\"id\":19,\"error\":false,\"clientField\":\"CONFIRMATION_MESSAGE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CONFIRMATION DATETIME\",\"id\":20,\"error\":false,\"clientField\":\"CONFIRMATION_DATETIME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CURRENCY CODE\",\"id\":4,\"error\":false,\"clientField\":\"CURRENCY_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CUSTOMER ACCOUNT NUMBER\",\"id\":12,\"error\":false,\"clientField\":\"CREDIT_ACCOUNT_NUMBER\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":true,\"iciciField\":\"SENDER ACCOUNT NUMBER\",\"id\":9,\"error\":false,\"clientField\":\"REMITTER_ACCNO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"UTR\",\"id\":6,\"error\":false,\"clientField\":\"UTR\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER IFSC\",\"id\":11,\"error\":false,\"clientField\":\"REMITTER_IFSC\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"TRANSACTION AMOUNT\",\"id\":3,\"error\":false,\"clientField\":\"AMOUNT\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER TO RECEIVER INFORMATION\",\"id\":13,\"error\":false,\"clientField\":\"ADD_INFO\",\"selectedFunction\":\"\"},{\"customDetail\":true,\"encryption\":false,\"iciciField\":\"\",\"id\":null,\"detail\":{\"type\":\"Static\",\"value\":\"9999999999\"},\"error\":false,\"clientField\":\"REMITTER_MOBILENO\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CLIENT CODE\",\"id\":1,\"error\":false,\"clientField\":\"CUSTOMER_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER BANK NAME\",\"id\":10,\"error\":false,\"clientField\":\"REMITTER_BANKNAME\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"TRANSACTION DATE\",\"id\":7,\"error\":false,\"clientField\":\"TRAN_DATE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"CONFIRMATION STATUS CODE\",\"id\":18,\"error\":false,\"clientField\":\"CONFIRMATION_STATUS_CODE\",\"selectedFunction\":\"\"},{\"customDetail\":false,\"encryption\":false,\"iciciField\":\"SENDER NAME\",\"id\":8,\"error\":false,\"clientField\":\"REMITTERNAME\",\"selectedFunction\":\"\"}]},\"API_PRODUCT\":\"Collections\",\"API_NAME\":\"credit_confirmation/MODEL-7\"}");

		System.out.println("json : " + json.toString());
		if (json.has("UAT_ENCRYPTION_REQUIRED")) {
			encRequired = json.getString("UAT_ENCRYPTION_REQUIRED");
			if (encRequired.equals("true") && json.has("TECHNICAL_DETAILS")) {
				techJSON = json.getJSONObject("TECHNICAL_DETAILS");
			} else {
				techJSON = json.getJSONObject("TECHNICAL_DETAILS");
			}
		}
		switch (apiOne) {
		case "intimation/MODEL-5":
			apiProduct = "eCollection";
			apiVariant = "intimation/MODEL-5";
			titleName = "INTIMATION_MODEL-5_" + jiraID;
			break;
		case "intimation/MODEL-7":
			apiProduct = "eCollection";
			apiVariant = "iValidate/MODEL-7";
			titleName = "INTIMATION_MODEL-7_" + jiraID;
			break;
		case "Cheque Collection":
			apiProduct = "Collections";
			apiVariant = "Cheque Collection";
			titleName = "CHEQUE_COLLECTION_" + jiraID;
			break;
		case "credit_confirmation/MODEL-7":
			apiProduct = "eCollection";
			apiVariant = "iValidate/MODEL-7";
			titleName = "INTIMATION_MODEL-7_CC_" + jiraID;
			break;
		case "ecollection-intimation":
			apiProduct = "eCollection";
			apiVariant = "ecollection-intimation";
			titleName = "INTIMATION_" + jiraID;
			break;
		case "validation":
			apiProduct = "Collections";
			apiVariant = "iSurepay";
			titleName = "ISUREPAY_VALIDATION_" + jiraID;
			break;
		case "receipt":
			apiProduct = "Collections";
			apiVariant = "iSurepay";
			titleName = "ISUREPAY_RECEIPT_" + jiraID;
			break;
		case "Insta Alert":
			apiProduct = "Collections";
			apiVariant = "Insta Alert";
			titleName = "INSAT_ALERT_" + jiraID;
			break;
		default:
//			throw new IllegalArgumentException("INVALID API NAME: " + apiName);
			apiProduct = "Trade APIs";
			apiVariant = apiName;
			int length = apiName.replaceAll(" ", "_").toCharArray().length;
			String tradeFileName = null;
			if (length > 12) {
				tradeFileName = apiName.replaceAll(" ", "_").substring(0, 12).toUpperCase();
			} else {
				tradeFileName = apiName.replaceAll(" ", "_").toUpperCase();
			}
			titleName = tradeFileName + "_" + jiraID;
			break;
		}
		String filePath = "D://Deployment" + "/" + titleName + ".pdf";
		file = new File(filePath);
		if (!file.exists()) {
			boolean dirCreated = file.getParentFile().mkdirs();
			if (dirCreated) {
				System.out.println("Directory created : " + file.getAbsolutePath());
			} else {
				file.getParentFile().mkdirs();
				LOGGER.error("Failed to create directory.");
			}
		}
		System.out.println("Directory filePath : " + filePath);
		try {
			PdfDocument pdfDoc = new PdfDocument(new PdfWriter(filePath)); // Creating a PdfDocument object
			Document document = new Document(pdfDoc); // Creating a Document object
			SimpleDateFormat formatter = new SimpleDateFormat("MMM dd, YYYY");
			String today = formatter.format(System.currentTimeMillis());

			ImageData imageData = ImageDataFactory.create(imagePath);
			Image image = new Image(imageData);
			image.scaleToFit(150, 100).setFixedPosition(25, 760);
			document.add(image);
			document.add(new Paragraph("\n\n\n"));
			document.add(new Paragraph("Date: " + today).setMultipliedLeading(1.0f));
			document.add(
					new Paragraph("Client Name : " + json.getString("ORGANIZATION_NAME")).setMultipliedLeading(1.0f));
			document.add(new Paragraph("Product : " + apiProduct).setMultipliedLeading(1.0f));
			document.add(new Paragraph("Variant : " + apiVariant).setMultipliedLeading(1.0f));
			if (apiProduct.equalsIgnoreCase("Collections") || apiProduct.equalsIgnoreCase("eCollection")) {
				if (apiOne.equalsIgnoreCase("Insta Alert")) {
					String accNoMasked = null;
//					accNoMasked = json.getString("CUSTOM_FIELD_15001");
					String accNo = json.getString("CUSTOM_FIELD_15001");
					int length = accNo.length();
					if (length <= 4) {
						accNoMasked = accNo;
					} else {
						StringBuilder masked = new StringBuilder();
						for (int i = 0; i < length - 4; i++) {
							masked.append("*");
						}
						String visible = accNo.substring(length - 4);
						accNoMasked = masked + visible;
					}
					document.add(new Paragraph("Bank Account No : " + accNoMasked).setMultipliedLeading(1.0f));
				} else {
					document.add(new Paragraph("Client Code : " + json.getString("CUSTOM_FIELD_15001"))
							.setMultipliedLeading(1.0f));
				}
			} else if (apiProduct.equalsIgnoreCase("Trade APIs")) {
				document.add(
						new Paragraph("CUST ID : " + json.getString("CUSTOM_FIELD_15001")).setMultipliedLeading(1.0f));
			}
			document.add(new Paragraph("\nTechnical Specifications:").setMarginTop(10.0f).setBold()
					.setMultipliedLeading(1.0f));
			String webService = null;
			if (json.getString("UAT_WEB_SERVICE").equals("application/json")) {
				webService = "REST API-JSON";
			} else if (json.getString("UAT_WEB_SERVICE").equals("application/xml")) {
				webService = "REST API-XML";
			} else if (json.getString("UAT_WEB_SERVICE").equals("application/soap+xml")) {
				webService = "SOAP WEB SERVICE";
			}
			document.add(new Paragraph("1. Type of webservice : " + webService).setMultipliedLeading(1.0f));
			JSONObject jsonTechAPI3 = techJSON.getJSONObject(apiOne);
			if (apiTwo != null) {
				jsonTechAPI2 = techJSON.getJSONObject(apiTwo);
			}
			document.add(new Paragraph("2. UAT URLs : ").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List uatList = new com.itextpdf.layout.element.List().setListSymbol("     ");
			uatList.add(new ListItem("a. " + apiOne + " : " + jsonTechAPI3.getString("UAT_SERVICE_URL")));
			if (apiTwo != null) {
				uatList.add(new ListItem("b. " + apiTwo + " : " + jsonTechAPI2.getString("UAT_SERVICE_URL")));
			}
			document.add(uatList);
			document.add(new Paragraph("3. Production URLs:").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List prodList = new com.itextpdf.layout.element.List().setListSymbol("     ");
			prodList.add(new ListItem("a. " + apiOne + " : " + jsonTechAPI3.getString("PROD_SERVICE_URL")));
			if (apiTwo != null) {
				prodList.add(new ListItem("b. " + apiTwo + " : " + jsonTechAPI2.getString("PROD_SERVICE_URL")));
			}
			document.add(prodList);
			document.add(new Paragraph("4. Security parameters:").setMarginTop(10.0f).setMultipliedLeading(1.0f));
			com.itextpdf.layout.element.List securityList = new com.itextpdf.layout.element.List()
					.setListSymbol("     ");
			if (json.getString("UAT_ENCRYPTION_REQUIRED").equals("true")) {
				securityList.add(new ListItem("a. Encryption - " + json.getString("ENCRYPTION")));
			} else {
				securityList.add(new ListItem("a. Encryption - NA"));
			}
			if (json.getString("UAT_AUTHENTICATION_REQUIRED").equals("true")) {
				securityList.add(new ListItem("b. Authentication \u2013 " + json.getString("UAT_API_AUTHENTICATION")));
			} else {
				securityList.add(new ListItem("b. Authentication \u2013 NA"));
			}
			if (json.getString("UAT_ENCRYPTION_REQUIRED").equals("true")
					&& json.getString("ENCRYPTION_TYPE").equals("All Payload")) {
				securityList.add(new ListItem("c. Hybrid Encryption - " + json.getString("HYBRID_ENCRYTION")));
			}
			document.add(securityList);
			if (apiName.equals("intimation/MODEL-7") || apiName.equals("credit_confirmation/MODEL-7")
					|| apiName.equals("intimation/MODEL-5")) {
				document.add(new Paragraph("5. Deemed Action: " + json.getString("DEEMED_ACTION")).setMarginTop(10.0f)
						.setMultipliedLeading(1.0f));
			}
			document.add(new Paragraph("\n\n"));
			document.add(new Paragraph("Mapping Data:").setMarginTop(10.0f).setBold().setMultipliedLeading(1.0f));
			document.add(new Paragraph(String.valueOf(apiOne) + " Request :").setMarginTop(10.0f).setBold()
					.setMultipliedLeading(2.0f));
			float[] columnWidths = { 60f, 140f, 140f, 110f, 110f };
			Table reqTableApiName = new Table(columnWidths);
			JSONObject request = json.getJSONObject("REQ_PDF_DATA");
			createPdfWithTable(request.getJSONArray(apiOne), reqTableApiName, "REQUEST");
			document.add(reqTableApiName);

			// Response Mapping Data for apiName
			document.add(new Paragraph(apiOne + " Response : ").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
			Table resTableApiName = new Table(columnWidths);
			JSONObject response = json.getJSONObject("RES_PDF_DATA");
			createPdfWithTable(response.getJSONArray(apiOne), resTableApiName, "RESPONSE");
			document.add(resTableApiName);

			if (apiTwo != null) {
				document.add(new Paragraph("\n\n"));
				document.add(
						new Paragraph(apiTwo + " Request :").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
				Table reqTableApiName1 = new Table(columnWidths);
				createPdfWithTable(request.getJSONArray(apiTwo), reqTableApiName1, "REQUEST");
				document.add(reqTableApiName1);

				// Response Mapping Data for apiName1
				document.add(
						new Paragraph(apiTwo + " Response :").setMarginTop(10).setBold().setMultipliedLeading(2.0f));
				Table resTableApiName1 = new Table(columnWidths);
				createPdfWithTable(response.getJSONArray(apiTwo), resTableApiName1, "RESPONSE");
				document.add(resTableApiName1);
			}
			document.close();

			try {
				file = new File(filePath);
				fis = new FileInputStream(file);
			} catch (FileNotFoundException e) {
				System.out.println("FILE NOT FOUND : " + filePath);
			}
			System.out.println("FILE FOUND : " + filePath);
//			return Response.ok(fis, MediaType.APPLICATION_OCTET_STREAM)
//					.header("Content-Disposition", "attachment;filename=" + titleName).header("fileName", titleName)
//					.build();
		} catch (Exception e) {
			StringWriter ex = new StringWriter();
			e.printStackTrace(new PrintWriter(ex));
			LOGGER.error(ex.toString());
		} finally {
			try {
				fis.close();
			} catch (IOException e) {
			}
		}
	}
	@POST
	@Path("/saveFileFlickerTechnicalDetails")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public Response saveFileFlickerTechnicalDetails(
			@FormDataParam("jiraID") String jiraID,
			@FormDataParam("userID") String userID,
			@FormDataParam("apiProduct") String apiProduct,
			@FormDataParam("apiParent") String apiParent,
			@FormDataParam("apiType") String apiType,
			@FormDataParam("payloadAPIData") String payloadAPIData,
			@FormDataParam("isRevert") boolean isRevert,
			@FormDataParam("statusJSON") String statusJSON,
		        @HeaderParam("apikey") String apiKey) {
try {
	
	
	String jiraDirPath = GwConstants.DIY_STANDARD_ONBOARD_DOCUMENT_UPLOADPATH + "/" + jiraID;
	String attachmentUrl = new StringBuffer().append(GwConstants.JIRA_URL_V2_DNS).append("issue/") + jiraID
			+ "/attachments";

//    if (apiProduct.equalsIgnoreCase("Host-To-Host")) {
//        DIYStandardModel apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
//		String jiraCategory = apiUserDataModel.getJiraCategory();
//		String CorpID=apiUserDataModel.getCorpID();
//		if(apiParent.equals("Snorkel-fileTransfer")|| apiParent.equals("Snorkel-InternalApplication"))
//		{
		
	JSONObject payload = new JSONObject(payloadAPIData);

	// === 1. Custom Attributes (Common for Internal & External) ===
	JSONObject customAttributesJson = new JSONObject();
	customAttributesJson.put("ClientName", payload.optString("ClientName"));
	customAttributesJson.put("EnableAlerts", payload.optString("EnableAlerts"));
	customAttributesJson.put("PeerCode", payload.optString("PeerCode"));
	customAttributesJson.put("destinationPaymentPath", payload.optString("destinationPaymentPath"));
	customAttributesJson.put("ReversalBackup", payload.optString("ReversalBackup"));
	customAttributesJson.put("ReversalFilePath", payload.optString("ReversalFilePath"));

	// === 2. Preference JSON ===
	JSONObject preferencesJson = new JSONObject();
	JSONObject clientDetails = new JSONObject();
	clientDetails.put("Status", "Active");
	clientDetails.put("Name", payload.optString("ClientName"));
	clientDetails.put("EnableAlerts", payload.optString("EnableAlerts"));

	// === Upload Section ===
	if ("true".equalsIgnoreCase(payload.optString("EnablePushOperations"))) {
	    JSONObject upload = new JSONObject();
	    upload.put("Enable", payload.optString("EnablePushOperations"));
	    upload.put("IsMultipleUpload", payload.optString("IsMultipleUpload"));

	    if ("true".equalsIgnoreCase(payload.optString("IsMultipleUpload"))) {
	        upload.put("Source", new JSONObject()
	            .put("Source1", payload.optString("Source1"))
	            .put("Source2", payload.optString("Source2"))
	            .put("Source3", payload.optString("Source3"))
	            .put("Source4", payload.optString("Source4"))
	            .put("Source5", payload.optString("Source5")));
	        upload.put("Backup", new JSONObject()
	            .put("Backup1", payload.optString("Backup1"))
	            .put("Backup2", payload.optString("Backup2"))
	            .put("Backup3", payload.optString("Backup3"))
	            .put("Backup4", payload.optString("Backup4"))
	            .put("Backup5", payload.optString("Backup5")));
	        upload.put("Destination", new JSONObject()
	            .put("Destination1", payload.optString("Destination1"))
	            .put("Destination2", payload.optString("Destination2"))
	            .put("Destination3", payload.optString("Destination3"))
	            .put("Destination4", payload.optString("Destination4"))
	            .put("Destination5", payload.optString("Destination5")));
	        upload.put("DestinationApplication", new JSONObject()
	            .put("DestinationApplication1", payload.optString("DestinationApplication1"))
	            .put("DestinationApplication2", payload.optString("DestinationApplication2"))
	            .put("DestinationApplication3", payload.optString("DestinationApplication3"))
	            .put("DestinationApplication4", payload.optString("DestinationApplication4"))
	            .put("DestinationApplication5", payload.optString("DestinationApplication5")));
	        upload.put("EnableEncryption", new JSONObject()
	            .put("EnableEncryption1", payload.optString("EnableEncryption1"))
	            .put("EnableEncryption2", payload.optString("EnableEncryption2"))
	            .put("EnableEncryption3", payload.optString("EnableEncryption3"))
	            .put("EnableEncryption4", payload.optString("EnableEncryption4"))
	            .put("EnableEncryption5", payload.optString("EnableEncryption5")));
	        upload.put("Encryption", new JSONObject()
	            .put("Algorithm1", payload.optString("Algorithm1"))
	            .put("Algorithm2", payload.optString("Algorithm2"))
	            .put("Algorithm3", payload.optString("Algorithm3"))
	            .put("Algorithm4", payload.optString("Algorithm4"))
	            .put("Algorithm5", payload.optString("Algorithm5")));
	        upload.put("PeerCode", new JSONObject()
	            .put("PeerCode1", payload.optString("PeerCode1"))
	            .put("PeerCode2", payload.optString("PeerCode2"))
	            .put("PeerCode3", payload.optString("PeerCode3"))
	            .put("PeerCode4", payload.optString("PeerCode4"))
	            .put("PeerCode5", payload.optString("PeerCode5")));
	        upload.put("Prefix", new JSONObject()
	            .put("Prefix1", payload.optString("Prefix1"))
	            .put("Prefix2", payload.optString("Prefix2"))
	            .put("Prefix3", payload.optString("Prefix3"))
	            .put("Prefix4", payload.optString("Prefix4"))
	            .put("Prefix5", payload.optString("Prefix5")));
	        upload.put("addPrefix", new JSONObject()
	            .put("addPrefix1", payload.optString("addPrefix1"))
	            .put("addPrefix2", payload.optString("addPrefix2"))
	            .put("addPrefix3", payload.optString("addPrefix3"))
	            .put("addPrefix4", payload.optString("addPrefix4"))
	            .put("addPrefix5", payload.optString("addPrefix5")));
	    }

	    clientDetails.put("Upload", upload);
	}

	// === MIS Section ===
	if ("true".equalsIgnoreCase(payload.optString("EnablePullOperations"))) {
	    JSONObject mis = new JSONObject();
	    mis.put("Enable", payload.optString("EnablePullOperations"));
	    mis.put("IsMultipleMIS", payload.optString("IsMultipleMIS"));

	    if ("true".equalsIgnoreCase(payload.optString("IsMultipleMIS"))) {
	        mis.put("Source", new JSONObject()
	            .put("Source1", payload.optString("MIS_Source1"))
	            .put("Source2", payload.optString("MIS_Source2"))
	            .put("Source3", payload.optString("MIS_Source3"))
	            .put("Source4", payload.optString("MIS_Source4"))
	            .put("Source5", payload.optString("MIS_Source5")));
	        mis.put("Backup", new JSONObject()
	            .put("Backup1", payload.optString("MIS_Backup1"))
	            .put("Backup2", payload.optString("MIS_Backup2"))
	            .put("Backup3", payload.optString("MIS_Backup3"))
	            .put("Backup4", payload.optString("MIS_Backup4"))
	            .put("Backup5", payload.optString("MIS_Backup5")));
	        mis.put("Destination", new JSONObject()
	            .put("Destination1", payload.optString("MIS_Destination1"))
	            .put("Destination2", payload.optString("MIS_Destination2"))
	            .put("Destination3", payload.optString("MIS_Destination3"))
	            .put("Destination4", payload.optString("MIS_Destination4"))
	            .put("Destination5", payload.optString("MIS_Destination5")));
	        mis.put("EnableEncryption", new JSONObject()
	            .put("EnableEncryption1", payload.optString("MIS_EnableEncryption1"))
	            .put("EnableEncryption2", payload.optString("MIS_EnableEncryption2"))
	            .put("EnableEncryption3", payload.optString("MIS_EnableEncryption3"))
	            .put("EnableEncryption4", payload.optString("MIS_EnableEncryption4"))
	            .put("EnableEncryption5", payload.optString("MIS_EnableEncryption5")));
	        mis.put("Encryption", new JSONObject()
	            .put("Algorithm1", payload.optString("MIS_Algorithm1"))
	            .put("Algorithm2", payload.optString("MIS_Algorithm2"))
	            .put("Algorithm3", payload.optString("MIS_Algorithm3"))
	            .put("Algorithm4", payload.optString("MIS_Algorithm4"))
	            .put("Algorithm5", payload.optString("MIS_Algorithm5")));
	        mis.put("removePrefixMIS", new JSONObject()
	            .put("removePrefixMIS1", payload.optString("removePrefixMIS1"))
	            .put("removePrefixMIS2", payload.optString("removePrefixMIS2"))
	            .put("removePrefixMIS3", payload.optString("removePrefixMIS3"))
	            .put("removePrefixMIS4", payload.optString("removePrefixMIS4"))
	            .put("removePrefixMIS5", payload.optString("removePrefixMIS5")));
	    }

	    clientDetails.put("MIS", mis);
	}

	// === Additional Fields ===
	JSONObject additionalFields = new JSONObject();
	additionalFields.put("Add_Field1", payload.optString("Add_Field1"));
	additionalFields.put("Add_Field2", payload.optString("Add_Field2"));
	additionalFields.put("Add_Field3", payload.optString("Add_Field3"));
	additionalFields.put("Add_Field4", payload.optString("Add_Field4"));
	additionalFields.put("Add_Field5", payload.optString("Add_Field5"));
	additionalFields.put("Add_Field6", payload.optString("Add_Field6"));
	clientDetails.put("AdditionalFields", additionalFields);
	
	// === 3. Counter ===
	JSONObject counterJson = new JSONObject();
	counterJson.put("PeerCode", payload.optString("PeerCode"));
	counterJson.put("Source1Count", payload.optString("Source1Count"));
	counterJson.put("Source2Count", payload.optString("Source2Count"));
	counterJson.put("Source3Count", payload.optString("Source3Count"));
	counterJson.put("Source4Count", payload.optString("Source4Count"));
	counterJson.put("Source5Count", payload.optString("Source5Count"));
	counterJson.put("Date", payload.optString("Date"));

	// === 4. Transaction ===
	JSONObject transactionJson = new JSONObject();
	transactionJson.put("PeerCode", payload.optString("PeerCode"));
	transactionJson.put("Pending", payload.optString("Pending"));
	transactionJson.put("UploadCount", payload.optString("UploadCount"));
	transactionJson.put("MISCount", payload.optString("MISCount"));
	transactionJson.put("LastFileUpload", payload.optString("LastFileUpload"));
	transactionJson.put("LastFileUploadTimestamp", payload.optString("LastFileUploadTimestamp"));
	transactionJson.put("LastMISFile", payload.optString("LastMISFile"));
	transactionJson.put("LastMISFileTimestamp", payload.optString("LastMISFileTimestamp"));


	// === Final Preference JSON ===
	preferencesJson.put("ClientDetails", clientDetails);

        // === 5. Push All Payloads ===
	// === 5. Push All Payloads ===
	List<JSONObject> payloads = new ArrayList<>();
	List<String> urls = new ArrayList<>();

	System.out.println(preferencesJson);
	System.out.println(counterJson);
	System.out.println(transactionJson);

	payloads.add(preferencesJson);
	payloads.add(counterJson);
	payloads.add(transactionJson);
	
	
	

	urls.add("https://uat-onprem-dmz-hybrid.icicibankltd.com/fileflick/database/services/preference/save");
	urls.add("https://uat-onprem-dmz-hybrid.icicibankltd.com/fileflick/database/services/counter/save");
	urls.add("https://uat-onprem-dmz-hybrid.icicibankltd.com/fileflick/database/services/files/save");

	for (int i = 0; i < urls.size(); i++) {
	    URL url = new URL(urls.get(i));
	    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	    conn.setRequestMethod("POST");
	    conn.setRequestProperty("Content-Type", "application/json");
	    conn.setRequestProperty("apikey", apiKey);
	    conn.setDoOutput(true);

	    try (OutputStream os = conn.getOutputStream()) {
	        byte[] input = payloads.get(i).toString().getBytes("utf-8");
	        os.write(input, 0, input.length);
	    }

	    int responseCode = conn.getResponseCode();
	    if (responseCode != 200 && responseCode != 201) {
	        return Response.status(responseCode).entity("MongoDB operation failed at index " + i).build();
	    }
	}

     // === JIRA FLOW FOR NEW PRODUCT ===
    
            try {
                DIYStandardModel apiUserDataModel = diyStandardDao.getApiParentData(apiParent, jiraID);
                JSONObject payloadJSON = new JSONObject(payloadAPIData);
                JSONObject apiDataJSON = payloadJSON.getJSONObject(apiParent);
                String jiraCategory = apiUserDataModel.getJiraCategory();

                String uatIP = apiDataJSON.optString("uatIP", "");
                String prodIP = apiDataJSON.optString("prodIP", "");
                String encryptionRequired = apiDataJSON.optString("uatEncryptionRequired", "");
                String encMode = apiDataJSON.optString("uatEncMode", "");

                // === Prepare JIRA Field Update JSON ===
//                JSONObject fields = new JSONObject();
//                fields.put("customfield_15616", uatIP);
//                fields.put("customfield_15632", prodIP);
//                fields.put("customfield_15782", apiUserDataModel.getCorpID());

//                JSONObject issue = new JSONObject();
//                issue.put("fields", fields);

//                LOGGER.info("JIRA CUSTOM_FIELDS NEWPRODUCT: " + issue.toString());
//
//                boolean fieldsUpdated = updateCustomFieldsJira(issue.toString(), jiraID);
//                if (fieldsUpdated) {
//                    LOGGER.info("✅ JIRA Fields updated successfully for NewProduct");
//                } else {
//                    LOGGER.warn("⚠️ JIRA Fields update failed for NewProduct");
//                }

                // === Prepare appCreationJSON for transition
                JSONObject appJSON = new JSONObject();
                String appCreationJSON = "";

                if (jiraCategory.equalsIgnoreCase("NEW")) {
                    if (!isRevert) {
                        appJSON.put("isAppUATCreated", false);
                        appJSON.put("isAppPRODCreated", false);
                    } else {
                        appJSON.put("isAppUATCreated", true);
                        appJSON.put("isAppPRODCreated", false);
                    }
                    appCreationJSON = appJSON.toString();
                } else if (jiraCategory.equalsIgnoreCase("ADD")) {
                    appJSON.put("isAddProductUATDone", false);
                    appJSON.put("isAddProductPRODDone", false);
                    appCreationJSON = appJSON.toString();
                }

                // === JIRA Transition and Comment
                boolean isReverted  = jiraTransition("21", jiraID); // Move to InVerification
                jiraComment("✅ JIRA Status moved to InVerification for NewProduct", jiraID);

                if (isReverted) {
                    diyStandardDao.saveStatusJSON(statusJSON, jiraID); // optional, your call
                    LOGGER.info("✅ JIRA transition completed for NewProduct");
                } else {
                    LOGGER.error("❌ JIRA transition failed for NewProduct");
                }

            } catch (Exception ex) {
                LOGGER.error("❌ Exception in NewProduct JIRA flow: " + ex.getMessage(), ex);
            }
        

//    }
//}

    // ✅ Final success response
    return Response.ok().entity("All MongoDB operations executed successfully.").build();

} catch (Exception e) {
    e.printStackTrace();
    return Response.status(500).entity("Internal Server Error: " + e.getMessage()).build();
}

//	       
	   
}
	
	
public boolean saveJsonPayloadsForFlicker(String userID, String jiraID, String apiName,
        JSONObject preferencesJson, JSONObject transactionJson, JSONObject counterJson) {

    PreparedStatement pstmt = null;
    Connection connection = null;
    int rows = 0;
    boolean flag = false;

    try {
        connection = DBConnUtil.getConnection();

        DIYStandardDaoImpl impl = new DIYStandardDaoImpl();
        Object techDate = impl.getTechnicalDateInbound(jiraID);

        if (techDate != null) {
            // === Perform UPDATE with userID in WHERE clause ===
            String updateSQL = "UPDATE DIY_STND_TBL SET PREFERENCESJSON = ?, TRANSACTIONJSON = ?, COUNTERJSON = ?, "
                    + "TECHNICAL_DATE = ?, OPERATION = ?, UPDATEDBY = ? WHERE JIRA_ID = ? AND apiName = ? AND UPDATEDBY = ?";

            pstmt = connection.prepareStatement(updateSQL);
            pstmt.setString(1, preferencesJson != null ? preferencesJson.toString() : null);
            pstmt.setString(2, transactionJson != null ? transactionJson.toString() : null);
            pstmt.setString(3, counterJson != null ? counterJson.toString() : null);
            pstmt.setDate(4, (java.sql.Date) techDate);
            pstmt.setString(5, "UPDATE");
            pstmt.setString(6, userID);     // Set UPDATEDBY
            pstmt.setString(7, jiraID);
            pstmt.setString(8, apiName);
            pstmt.setString(9, userID);     // WHERE UPDATEDBY = ?
        } else {
            // === Perform INSERT ===
            String insertSQL = "INSERT INTO DIY_STND_TBL (JIRA_ID, apiName, PREFERENCESJSON, TRANSACTIONJSON, COUNTERJSON, TECHNICAL_DATE, OPERATION, UPDATEDBY) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

            pstmt = connection.prepareStatement(insertSQL);
            pstmt.setString(1, jiraID);
            pstmt.setString(2, apiName);
            pstmt.setString(3, preferencesJson != null ? preferencesJson.toString() : null);
            pstmt.setString(4, transactionJson != null ? transactionJson.toString() : null);
            pstmt.setString(5, counterJson != null ? counterJson.toString() : null);
            pstmt.setDate(6, new java.sql.Date(System.currentTimeMillis())); // current date
            pstmt.setString(7, "INSERT");
            pstmt.setString(8, userID); // Set UPDATEDBY
        }

        rows = pstmt.executeUpdate();
        flag = rows > 0;

    } catch (SQLException e) {
        StringWriter ex = new StringWriter();
        e.printStackTrace(new PrintWriter(ex));
        LOGGER.error(ex.toString());
    } finally {
        DBConnUtil.close(pstmt, connection);
    }

    return flag;
}



	


	public static void main(String[] args) {
		System.out.println("16 : " + RandomStringUtils.randomAlphabetic(16));
		System.out.println("32 : " + RandomStringUtils.randomAlphabetic(32));
//		exportPDF2("AG-27137", "BAN329125", "intimation/MODEL-7,credit_confirmation/MODEL-7",
//				"naresh.yasa@ext.icicibank.com");
		JSONObject json = new JSONObject(
				"{\"UAT\":{\"0\":false,\"1\":false,\"5\":false,\"10\":false,\"15\":false,\"30\":false,\"DONE\":false},\"PROD\":{\"0\":false,\"1\":false,\"5\":false,\"10\":false,\"15\":false,\"30\":false,\"DONE\":false}}");
		System.out.println("16 : " + json.toString(1));
	}

}
